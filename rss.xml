<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>brunetto's blog</title><link>brunetto.github.io</link><description>This is a demo site for Nikola.</description><lastBuildDate>Sun, 18 Aug 2013 12:50:50 GMT</lastBuildDate><generator>nikola</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Python slicing, rebinning and indexing</title><link>brunetto.github.io/posts/python-slicing-rebinning-and-indexing.html</link><description>&lt;div&gt;&lt;p&gt;During my master thesis I had to manage a lot of (different) data from GIF and GIF2 projects, Millimillennium, Millenium and Millennium 2 simulations and so on. Sometimes there were the need to sort, divide or rearrange these dataset.   &lt;br&gt;
Here some examples.    &lt;/p&gt;
&lt;p&gt;&lt;a href="/posts/python-slicing-rebinning-and-indexing.html"&gt;Read more...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>code</category><category>Python</category><guid>brunetto.github.io/posts/python-slicing-rebinning-and-indexing.html</guid><pubDate>Fri, 25 Nov 2011 00:00:00 GMT</pubDate></item><item><title>Python CLI and configuration file parser</title><link>brunetto.github.io/posts/python-cli-and-configuration-file-parser.html</link><description>&lt;div&gt;&lt;p&gt;One of the first things I needed writing the code for my thesis was the ability to read options and parameters both from a configuration file and from the command line. After some attempts I have found (at &lt;a href="http://www.decalage.info/" target="_blank" title="http://www.decalage.info"&gt;http://www.decalage.info&lt;/a&gt;) a file parser to read a configuration file and the Python library &lt;a href="http://docs.python.org/dev/library/argparse.html" target="_blank" title="argparse"&gt;argparse&lt;/a&gt; for the command line parsing. In addition I have modified the file parser and I've added a "variable container" object, inspired by some snippets found somewhere on the web.  &lt;br&gt;
&lt;/p&gt;&lt;p&gt;&lt;a href="/posts/python-cli-and-configuration-file-parser.html"&gt;Read more...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>astro/physics</category><category>code</category><category>Computer</category><category>Master Thesis</category><category>Python</category><category>imported</category><guid>brunetto.github.io/posts/python-cli-and-configuration-file-parser.html</guid><pubDate>Thu, 17 Nov 2011 00:00:00 GMT</pubDate></item><item><title>Python logging</title><link>brunetto.github.io/posts/python-logging.html</link><description>&lt;div&gt;&lt;p&gt;After I had a &lt;a href="http://brunettoziosi.blogspot.it/2011/11/python-parallel-job-manager.html" target="_blank" title="Python parallel job manager"&gt;Python parallel job manager&lt;/a&gt; I realize that all the attempts I have done to log what happen in my code weren't satisfying. It was not comfortable to manage every output when I want to change something and it was impossible to switch off some of logs without changing the code. The Python logging library is a great piece of code that permits to personalize most of the aspect of the logging in a program but maintaining a standard and comfortable interface. It also allows an easy management of many different outputs (file, screen, ...) and different levels of logging (error, info, ...) indipendent one from each other. It also allows to handle the logging of the imported modules.  &lt;br&gt;
&lt;/p&gt;&lt;p&gt;&lt;a href="/posts/python-logging.html"&gt;Read more...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>code</category><category>Python</category><guid>brunetto.github.io/posts/python-logging.html</guid><pubDate>Thu, 17 Nov 2011 00:00:00 GMT</pubDate></item><item><title>Cosmological simulations #5: initial conditions!</title><link>brunetto.github.io/posts/cosmological-simulations-5-initial-conditions.html</link><description>&lt;div&gt;&lt;p&gt;After we had a look on why we need cosmological simulations, what they are and how they are performed, it's time to learn more about the preparation of a simulation, in particular what are initial conditions and how we build them.  &lt;br&gt;
&lt;/p&gt;&lt;p&gt;&lt;a href="/posts/cosmological-simulations-5-initial-conditions.html"&gt;Read more...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>astro/physics</category><category>cosmic_structure</category><category>Cosmology</category><category>PhD</category><guid>brunetto.github.io/posts/cosmological-simulations-5-initial-conditions.html</guid><pubDate>Wed, 16 Nov 2011 00:00:00 GMT</pubDate></item><item><title>Cosmological simulations #3: force calculation!</title><link>brunetto.github.io/posts/cosmological-simulations-3-force-calculation.html</link><description>&lt;div&gt;&lt;p&gt;In the previous posts we wrote about cosmological simulations, why we need them, how they are performed and which are the important things to care about.
Now we are ready to learn the algorithms developed to compute gravitational forces between the particles.    &lt;/p&gt;
&lt;p&gt;&lt;a href="/posts/cosmological-simulations-3-force-calculation.html"&gt;Read more...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>astro/physics</category><category>cosmic_structure</category><category>Cosmology</category><category>PhD</category><category>imported</category><guid>brunetto.github.io/posts/cosmological-simulations-3-force-calculation.html</guid><pubDate>Sun, 13 Nov 2011 00:00:00 GMT</pubDate></item><item><title>Cosmological simulations: #4: Moving the particles!</title><link>brunetto.github.io/posts/cosmological-simulations-4-moving-the-particles.html</link><description>&lt;div&gt;&lt;h4&gt;Equations of motion&lt;/h4&gt;
&lt;p&gt;Once we have learned how to calculate gravitational forces and decided which way is best for us, it's time to move particles according to the force field.  &lt;br&gt;
To have an idea of what happens we can look at a simplified version of the pp-method, where the new coordinates and velocities are expressed starting from the previous values:    &lt;/p&gt;
&lt;p&gt;$\mathbf{v}_i^{new}=\mathbf{v}_i^{old}+\frac{\mathbf{F}_i}{m_i}\Delta t$
$\mathbf{x}_i^{new}=\mathbf{x}_i^{old}+\mathbf{v}_i\Delta t$&lt;/p&gt;
&lt;p&gt;More in general we start from the Newtonian equation of motion for a set of particles interacting only through gravity, in particular we consider the Euler and Poisson equations. We express these in comoving coordinates because in this way we can focus on density and velocity perturbations, while the expansion of the universe is included in the scale factor $a$ (obtained from the Friedmann equations):    &lt;/p&gt;
&lt;p&gt;$\frac{\mathrm{d}^2\mathbf{x}}{\mathrm{d}t^2}+2\frac{\mathrm{d}a/\mathrm{d}t}{a}\frac{\mathrm{d}\mathbf{x}}{\mathrm{d}t}=-\frac{1}{a^2}\nabla_x\phi$&lt;/p&gt;
&lt;p&gt;$\nabla_x^2\phi=4\pi Ga^2\bar \rho\delta = \frac{3}{2}H_0^2\Omega_0\frac{\delta}{a}$&lt;/p&gt;
&lt;p&gt;&lt;a href="/posts/cosmological-simulations-4-moving-the-particles.html"&gt;Read more...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><guid>brunetto.github.io/posts/cosmological-simulations-4-moving-the-particles.html</guid><pubDate>Sun, 13 Nov 2011 00:00:00 GMT</pubDate></item><item><title>PhD question #1: M*</title><link>brunetto.github.io/posts/phd-question-1-m.html</link><description>&lt;div&gt;&lt;p&gt;In parallel with the series "Cosmological simulations" I'm starting now another series of posts about cosmology, astro/physics and related arguments. It may happen that your PhD advisor ask you a question about something and you are supposed to know the answer... but you don't! Or it may happen that you have to pass an admittance/qualification exam to enter your PhD student career on general astrophysical knowledge but you can't even remember some arguments exist! Because of these consideration and for my remembrance I will  write down some of these questions and I will try to answer.&lt;br&gt;
&lt;/p&gt;&lt;p&gt;&lt;a href="/posts/phd-question-1-m.html"&gt;Read more...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>astro/physics</category><category>cosmic_structure</category><category>Cosmology</category><category>PhD</category><category>imported</category><guid>brunetto.github.io/posts/phd-question-1-m.html</guid><pubDate>Fri, 11 Nov 2011 00:00:00 GMT</pubDate></item><item><title>Loadleveler quick howto</title><link>brunetto.github.io/posts/loadleveler-quick-howto.html</link><description>&lt;div&gt;&lt;p&gt;Some useful commands to manage jobs with IBM &lt;code&gt;loadleveler&lt;/code&gt; (&lt;code&gt;ll&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;First of all you need to write a script with some configuration options and the job to be submitted. You can call it (for example) "test_run.cmd". With this file you tell &lt;code&gt;ll&lt;/code&gt; what you want to submit, the type of the queue, the directories you need, what you want to be logged and where, the number of parallel tasks and so on.
It would look like this:    &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="c"&gt;# @ initialdir = /path-to-your-folder&lt;/span&gt;
&lt;span class="c"&gt;# @ job_name = test_run&lt;/span&gt;
&lt;span class="c"&gt;# @ output = test_run.$(jobid).out&lt;/span&gt;
&lt;span class="c"&gt;# @ error = test_run.$(jobid).err&lt;/span&gt;
&lt;span class="c"&gt;# @ notification = error&lt;/span&gt;
&lt;span class="c"&gt;# @ class = long&lt;/span&gt;
&lt;span class="c"&gt;# @ total_tasks = 20&lt;/span&gt;
&lt;span class="c"&gt;# @ job_type = parallel&lt;/span&gt;
&lt;span class="c"&gt;# @ queue&lt;/span&gt;

&lt;span class="nb"&gt;ulimit&lt;/span&gt; -s 65536

python ./start.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="/posts/loadleveler-quick-howto.html"&gt;Read more...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>Code</category><category>Computer</category><category>Master Thesis</category><category>imported</category><guid>brunetto.github.io/posts/loadleveler-quick-howto.html</guid><pubDate>Fri, 04 Nov 2011 00:00:00 GMT</pubDate></item><item><title>Python parallel job manager</title><link>brunetto.github.io/posts/python-parallel-job-manager.html</link><description>&lt;div&gt;&lt;p&gt;The final version of the code for my master thesis was the most embarrassing parallel code you can think... just a serial code to be run on different slices of the dataset. I choose this solution because it permits to manage the different resources (memory, processors, ...) on the different machines available without any restriction. Moreover, this solution has no communication between the processes, with better performances and all the processes are independent, so it minimize the damages due to any failure.  &lt;br&gt;
&lt;/p&gt;&lt;p&gt;&lt;a href="/posts/python-parallel-job-manager.html"&gt;Read more...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>astro/physics</category><category>code</category><category>Computer</category><category>Master Thesis</category><category>Python</category><category>imported</category><guid>brunetto.github.io/posts/python-parallel-job-manager.html</guid><pubDate>Fri, 04 Nov 2011 00:00:00 GMT</pubDate></item><item><title>Cosmological simulations #1: why and what?</title><link>brunetto.github.io/posts/cosmological-simulations-1-why-and-what.html</link><description>&lt;div&gt;&lt;p&gt;This is the first of a series of posts dedicated to cosmological simulations!&lt;br&gt;
&lt;br&gt;
I do this because, as stressed by my PhD advisor, I need to practice in explaining in a clear way specialized knowledge and in linking it with its background and motivations. Also I would like to keep track of my progress and of what I'm learning!&lt;br&gt;
&lt;br&gt;
So, let's start with "Why we need cosmological simulations? What are they?"!&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="/posts/cosmological-simulations-1-why-and-what.html"&gt;Read more...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>astro/physics</category><category>Cosmology</category><category>N-body</category><category>PhD</category><category>simulation</category><category>imported</category><guid>brunetto.github.io/posts/cosmological-simulations-1-why-and-what.html</guid><pubDate>Wed, 02 Nov 2011 00:00:00 GMT</pubDate></item></channel></rss>