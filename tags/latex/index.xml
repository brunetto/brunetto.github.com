<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Latex on Post It!</title>
    <link>http://brunettoziosi.eu/tags/latex/</link>
    <description>Recent content in Latex on Post It!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 05 Jun 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://brunettoziosi.eu/tags/latex/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PDF manipulation</title>
      <link>http://brunettoziosi.eu/posts/pdf-manipulation/</link>
      <pubDate>Fri, 05 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://brunettoziosi.eu/posts/pdf-manipulation/</guid>
      <description>&lt;p&gt;It happens, from time to time, that I find myself looking for a way to manipulate PDF
on the fly. For example, I want to print them two-pages per sheet, or to extract
few pages, or to shrink the size of the file without degradate the quality.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Latex conditional compilation</title>
      <link>http://brunettoziosi.eu/posts/latex-conditional-compilation/</link>
      <pubDate>Fri, 13 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://brunettoziosi.eu/posts/latex-conditional-compilation/</guid>
      <description>It&amp;rsquo;s a long time I&amp;rsquo;m looking for a way to conditional-compiling my Beamer presentation in order to decide on the fly if I want to print an handout version of the presentation.
 Inside the .tex file you have to write
\ifdefined\HANDOUT \setbeameroption{show notes} %un-comment to see the notes \usepackage{pgfpages} \pgfpagesuselayout{8 on 1}[a4paper]%, landscape] \fi  where the pgfpages package is used to print 8 slide per page.
Before this if you want you can put \newcommand*{\HANDOUT}{}% to decide in the source if you want the handout version or not&amp;hellip;</description>
    </item>
    
    <item>
      <title>Latex together with matplotlib!</title>
      <link>http://brunettoziosi.eu/posts/latex-together-with-matplotlib/</link>
      <pubDate>Fri, 01 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>http://brunettoziosi.eu/posts/latex-together-with-matplotlib/</guid>
      <description>Sometimes you need to label your plot with math expression or Greek letters and ASCII is not enough.
Everything you need is to add to your script
from matplotlib import rc rc(&#39;font&#39;,**{&#39;family&#39;:&#39;sans-serif&#39;,&#39;sans-serif&#39;:[&#39;Helvetica&#39;]}) ## for Palatino and other serif fonts use: #rc(&#39;font&#39;,**{&#39;family&#39;:&#39;serif&#39;,&#39;serif&#39;:[&#39;Palatino&#39;])) rc(&#39;text&#39;, usetex=True)  and write you text label like
label = r&#39;theoretical $f(nu)$&#39;)  </description>
    </item>
    
    <item>
      <title>Subfile package for latex</title>
      <link>http://brunettoziosi.eu/posts/subfile-package-for-latex/</link>
      <pubDate>Fri, 13 May 2011 00:00:00 +0000</pubDate>
      
      <guid>http://brunettoziosi.eu/posts/subfile-package-for-latex/</guid>
      <description>&lt;p&gt;If you have a complex Latex document and you want to split it in several files, the &lt;a href=&#34;http://ctan.org/tex-archive/macros/latex/contrib/subfiles&#34;&gt;subfile&lt;/a&gt; package can help you.&lt;br /&gt;
The main difference between this and the &lt;code&gt;\input&lt;/code&gt; or &lt;code&gt;\import&lt;/code&gt; methods is that with &lt;code&gt;subfile&lt;/code&gt; you can compile also each file, without need to copy the preamble.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>