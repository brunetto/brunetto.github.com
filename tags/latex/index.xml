<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Latex on Post It!</title>
    <link>http://brunettoziosi.eu/tags/latex/</link>
    <description>Recent content in Latex on Post It!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 05 Jun 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://brunettoziosi.eu/tags/latex/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>PDF manipulation</title>
      <link>http://brunettoziosi.eu/posts/pdf-manipulation/</link>
      <pubDate>Fri, 05 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://brunettoziosi.eu/posts/pdf-manipulation/</guid>
      <description>

&lt;p&gt;It happens, from time to time, that I find myself looking for a way to manipulate PDF
on the fly. For example, I want to print them two-pages per sheet, or to extract
few pages, or to shrink the size of the file without degradate the quality.&lt;/p&gt;

&lt;p&gt;Here are few trick I collected and post here to be able to find them.&lt;/p&gt;

&lt;h2 id=&#34;print-two-pages-per-sheet:1a99063f87f259b634426df7f0e7e8a1&#34;&gt;Print two pages per sheet&lt;/h2&gt;

&lt;p&gt;The first tricks comes from &lt;a href=&#34;http://0x2a.at/blog/2011/02/pdf_manipulation_on_the_cli/&#34;&gt;here&lt;/a&gt;
and assume you have &lt;a href=&#34;http://www2.warwick.ac.uk/fac/sci/statistics/staff/academic-research/firth/software/pdfjam/&#34;&gt;&lt;code&gt;pdfjam&lt;/code&gt;&lt;/a&gt;
installed.
This is how you can produce a pdf with two pages per sheet:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pdfjam --nup 2x2 infile.pdf --landscape --outfile outfile.pdf
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;booklet:1a99063f87f259b634426df7f0e7e8a1&#34;&gt;Booklet&lt;/h2&gt;

&lt;p&gt;You can also print your pdf file as booklet. This means that the pages
of your file are shuffled (and placed two per sheet) so that you can
join them with a clip or some glue or strings in the middle just like
a real book. The sommand is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pdfbook --short-edge infile.pdf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;pdfbook&lt;/code&gt; is part of &lt;code&gt;pdfjam&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;extract-or-join-pages:1a99063f87f259b634426df7f0e7e8a1&#34;&gt;Extract (or join) pages&lt;/h2&gt;

&lt;p&gt;If you need to extrac some pages from your pdf file you can just run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pdftk infile.pdf cat &amp;lt;first_page&amp;gt;-&amp;lt;last_page&amp;gt; output outfile.pdf 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To join pdf files, instead, run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pdftk infile1.pdf infile2.pdf infile3.pdf cat output outfile.pdf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Obviously you need &lt;a href=&#34;http://packages.ubuntu.com/search?keywords=pdftk&#34;&gt;&lt;code&gt;pdftk&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;shrink-pdf-file-size:1a99063f87f259b634426df7f0e7e8a1&#34;&gt;Shrink pdf file size&lt;/h2&gt;

&lt;p&gt;Sometiimes a pdf grows in size with no reason (apparently). It is possible to shrink it
by reduce it to pdf defaults. You will need &lt;a href=&#34;http://www.ghostscript.com/&#34;&gt;&lt;code&gt;gs&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The command you need to run is&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/default -dNOPAUSE -dQUIET -dBATCH -sOutputFile=outfile.pdf infile.pdf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It can be quite difficult to remember, so you can create a bash alias for a function
doing it for you. In &lt;code&gt;.bashrc&lt;/code&gt; add&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;alias pdfdefault=&#39;function _pdfdefault() { gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/default -dNOPAUSE -dQUIET -dBATCH -sOutputFile=$2 $1;}; _pdfdefault&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and run &lt;code&gt;. ~/.bashrc&lt;/code&gt; before running &lt;code&gt;pdfdefault infile.pdf outfile.pdf&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;two-pages-per-sheet-with-latex:1a99063f87f259b634426df7f0e7e8a1&#34;&gt;Two pages per sheet with latex&lt;/h2&gt;

&lt;p&gt;It is possible, if you are writing something with pdf, to produce a pdf
with two pages per sheet without needing to run &lt;code&gt;pdfjam&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In this case just add, at the beginning of your latex document&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-latex&#34;&gt;\usepackage{pgfpages}
\pgfpagesuselayout{2 on 1}[a4paper], landscape]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Latex conditional compilation</title>
      <link>http://brunettoziosi.eu/posts/latex-conditional-compilation/</link>
      <pubDate>Fri, 13 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://brunettoziosi.eu/posts/latex-conditional-compilation/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s a long time I&amp;rsquo;m looking for a way to conditional-compiling my
&lt;a href=&#34;http://en.wikipedia.org/wiki/Beamer_(LaTeX&#34;&gt;Beamer&lt;/a&gt;) presentation in order to
decide on the fly if I want to print an handout version of the presentation.&lt;/p&gt;

&lt;!--TEASER_END--&gt;

&lt;p&gt;Inside the &lt;code&gt;.tex&lt;/code&gt; file you have to write&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-latex&#34;&gt;\ifdefined\HANDOUT
  \setbeameroption{show notes} %un-comment to see the notes
  \usepackage{pgfpages}
  \pgfpagesuselayout{8 on 1}[a4paper]%, landscape]
\fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where the &lt;code&gt;pgfpages&lt;/code&gt; package is used to print 8 slide per page.&lt;br /&gt;
Before this if you want you can put &lt;code&gt;\newcommand*{\HANDOUT}{}%&lt;/code&gt;
to decide in the source if you want the handout version or not&amp;hellip;&lt;br /&gt;
&amp;hellip; or you can decide it via command line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pdflatex -jobname=handout.pdf  &amp;quot;\def\HANDOUT{}\input{sourcefile.tex}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Latex together with matplotlib!</title>
      <link>http://brunettoziosi.eu/posts/latex-together-with-matplotlib/</link>
      <pubDate>Fri, 01 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>http://brunettoziosi.eu/posts/latex-together-with-matplotlib/</guid>
      <description>&lt;p&gt;Sometimes you need to label your plot with math expression or Greek letters and ASCII is not enough.&lt;br /&gt;
Everything you need is to add to your script&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from matplotlib import rc
rc(&#39;font&#39;,**{&#39;family&#39;:&#39;sans-serif&#39;,&#39;sans-serif&#39;:[&#39;Helvetica&#39;]})
## for Palatino and other serif fonts use:
#rc(&#39;font&#39;,**{&#39;family&#39;:&#39;serif&#39;,&#39;serif&#39;:[&#39;Palatino&#39;]))
rc(&#39;text&#39;, usetex=True)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and write you text label like&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;label = r&#39;theoretical $f(nu)$&#39;)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Subfile package for latex</title>
      <link>http://brunettoziosi.eu/posts/subfile-package-for-latex/</link>
      <pubDate>Fri, 13 May 2011 00:00:00 +0000</pubDate>
      
      <guid>http://brunettoziosi.eu/posts/subfile-package-for-latex/</guid>
      <description>&lt;p&gt;If you have a complex Latex document and you want to split it in several files, the &lt;a href=&#34;http://ctan.org/tex-archive/macros/latex/contrib/subfiles&#34;&gt;subfile&lt;/a&gt; package can help you.&lt;br /&gt;
The main difference between this and the &lt;code&gt;\input&lt;/code&gt; or &lt;code&gt;\import&lt;/code&gt; methods is that with &lt;code&gt;subfile&lt;/code&gt; you can compile also each file, without need to copy the preamble.&lt;/p&gt;

&lt;p&gt;What you have to do is to add&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-latex&#34;&gt;\usepackage{subfiles}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;in the preamble of the master file and&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-latex&#34;&gt;\documentclass[tesi.tex]{subfiles}
\begin{document}
...
\end{document}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;in your subfiles.&lt;br /&gt;
Now you can import your subfiles in the master file with&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-latex&#34;&gt;\subfile{subfile.tex}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
Sources:&lt;br /&gt;
&lt;ul&gt;&lt;br /&gt;
&lt;li&gt;&lt;a href=&#34;http://en.wikibooks.org/wiki/LaTeX/Multiple_files&#34;&gt;http://en.wikibooks.org/wiki/LaTeX/Multiple_files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://help.ubuntu.com/community/LaTeX&#34;&gt;How to install in Ubuntu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>