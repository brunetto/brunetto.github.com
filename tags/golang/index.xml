<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on Post It!</title>
    <link>http://brunettoziosi.eu/tags/golang/</link>
    <description>Recent content in Golang on Post It!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 15 Jun 2015 11:55:02 +0200</lastBuildDate>
    <atom:link href="http://brunettoziosi.eu/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Dockerized Starlab</title>
      <link>http://brunettoziosi.eu/posts/dockerized-starlab/</link>
      <pubDate>Mon, 15 Jun 2015 11:55:02 +0200</pubDate>
      
      <guid>http://brunettoziosi.eu/posts/dockerized-starlab/</guid>
      <description>

&lt;p&gt;Once you have &lt;a href=&#34;../docker-installation&#34;&gt;Docker installed&lt;/a&gt;, you may want to see it
in action. Here I demonstrate how to use Docker in a slightly different way respect
what you can find around (AKA use Docker to set up a web-server or something similar).&lt;/p&gt;

&lt;p&gt;I think Docker is a great solution to deal with easiness of installation and reproducibility
in science. LXD would be probable be better. LXD already provide unprivileged containers
AND is more about a container containing more than an application, while Docker is
based on the idea of one container for a single app. However, I still have to try LXD.&lt;/p&gt;

&lt;p&gt;Here I will show you how to use Docker to install and run &lt;a href=&#34;http://brunettoziosi.eu/posts/starlab-gpu-installation/&#34;&gt;Starlab&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;NB: nVidia (AKA the most annoying GPU producer in the world) drivers, in addition to be
the worst Linux GPU drivers, require a system-dependent installation. This means that
you can&amp;rsquo;t just download the Docker image from &lt;a href=&#34;https://registry.hub.docker.com/repos/brunetto/&#34;&gt;my Docker registry&lt;/a&gt; and run a container
from it, but you need to download the &lt;code&gt;Dockerfile&lt;/code&gt; and build the image on your own.
You can use the image I provide ONLY if you run the non-GPU StarLab version.
And to do this you need to have a loooot of time to wait for the simulations to finish.&lt;/p&gt;

&lt;h2 id=&#34;create-a-docker-image:e7da96f04bfa3eab144a0265a4f6de5a&#34;&gt;Create a Docker image&lt;/h2&gt;

&lt;p&gt;The image I&amp;rsquo;m going to create contains:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;our modified StarLab version (it contains updated stellar evolution recipes), both GPU and non GPU version&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;the same version with an &lt;a href=&#34;http://adsabs.harvard.edu/abs/1991RMxAA..22..255A&#34;&gt;Allen-Santillan&lt;/a&gt; galactic tidal field,
corrected for the non-inertial reference frame used in StarLab
(at the moment this version is not working, probably because a problem in the timestep calculation, but I am working on it!)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can use the &lt;a href=&#34;http://www.sns.ias.edu/~starlab/download/&#34;&gt;public version&lt;/a&gt; and correct the
&lt;code&gt;Dockerfile&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It is possible to download and extract the StarLab sourced directly from the Internet but I
prefer to have everything already in the folder.&lt;/p&gt;

&lt;p&gt;First of all, create a new empty folder and &lt;code&gt;cd&lt;/code&gt; into it. Then, copy the StarLab sources
and the docker file into that folder.
Mine look like that:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;starlabDocker.tar.gz
	|-sapporo
	|-starlab
	|-starlabAS
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where &lt;code&gt;starlabAS&lt;/code&gt; only contains the files that differ from the versio without the Allen-Santillan tidal field.&lt;/p&gt;

&lt;p&gt;Then, you need a &lt;code&gt;Dockerfile&lt;/code&gt;. The &lt;code&gt;Dockerfile&lt;/code&gt; tells Docker what it has to do
in order to create your image. Which base images to use (if any), which packages to download and install and so on.
Mine is :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;FROM ubuntu:14.04

MAINTAINER brunetto ziosi &amp;lt;my email hehe&amp;gt;

# For the public version of StarLab4.4.4, see http://www.sns.ias.edu/~starlab/

ENV DEBIAN_FRONTEND noninteractive

ENV STARLAB_FILE starlabDocker.tar.gz

# Copy StarLab bundle into the image
COPY $STARLAB_FILE /

# This has to be set by hand and MUST be the same of the host
##############
# longisland #
##############
# ENV CUDA_DRIVER 340.46
# ENV CUDA_INSTALL http://us.download.nvidia.com/XFree86/Linux-x86_64/${CUDA_DRIVER}/NVIDIA-Linux-x86_64-${CUDA_DRIVER}.run
# ENV CUDA_TOOLKIT cuda_6.0.37_linux_64.run
# ENV CUDA_TOOLKIT_DOWNLOAD http://developer.download.nvidia.com/compute/cuda/6_0/rel/installers/$CUDA_TOOLKIT
##############
#    uno     #
##############
# ENV CUDA_DRIVER 331.38
# ENV CUDA_INSTALL http://us.download.nvidia.com/XFree86/Linux-x86_64/${CUDA_DRIVER}/NVIDIA-Linux-x86_64-${CUDA_DRIVER}.run
# ENV CUDA_TOOLKIT cuda_5.5.22_linux_64.run
# ENV CUDA_TOOLKIT_DOWNLOAD http://developer.download.nvidia.com/compute/cuda/5_5/rel/installers/$CUDA_TOOLKIT
##############
#   spritz   #
##############
ENV CUDA_DRIVER 331.113
ENV CUDA_INSTALL http://us.download.nvidia.com/XFree86/Linux-x86_64/${CUDA_DRIVER}/NVIDIA-Linux-x86_64-${CUDA_DRIVER}.run
ENV CUDA_TOOLKIT cuda_5.5.22_linux_64.run
ENV CUDA_TOOLKIT_DOWNLOAD http://developer.download.nvidia.com/compute/cuda/5_5/rel/installers/$CUDA_TOOLKIT
################
#  sfursat     #
# to be tested #
################
# ENV CUDA_DRIVER 270.41.19
# ENV CUDA_INSTALL http://us.download.nvidia.com/XFree86/Linux-x86_64/${CUDA_DRIVER}/NVIDIA-Linux-x86_64-${CUDA_DRIVER}.run
# ENV CUDA_TOOLKIT ????
# ENV CUDA_TOOLKIT_DOWNLOAD ????????

# Update and install minimal and clean up packages
RUN apt-get update --quiet &amp;amp;&amp;amp; apt-get install --yes \
 --no-install-recommends --no-install-suggests \
 build-essential module-init-tools wget libboost-all-dev   \
&amp;amp;&amp;amp; apt-get clean &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*

# Install CUDA drivers
RUN wget $CUDA_INSTALL -P /tmp --no-verbose \
      &amp;amp;&amp;amp; chmod +x /tmp/NVIDIA-Linux-x86_64-${CUDA_DRIVER}.run \
      &amp;amp;&amp;amp; /tmp/NVIDIA-Linux-x86_64-${CUDA_DRIVER}.run -s -N --no-kernel-module \
      &amp;amp;&amp;amp; rm -rf /tmp/*

# Install CUDA toolkit
RUN wget $CUDA_TOOLKIT_DOWNLOAD &amp;amp;&amp;amp; chmod +x $CUDA_TOOLKIT \
&amp;amp;&amp;amp; ./$CUDA_TOOLKIT -toolkit -toolkitpath=/usr/local/cuda-site -silent -override \
&amp;amp;&amp;amp; rm $CUDA_TOOLKIT

# Set env variables
RUN echo &amp;quot;PATH=$PATH:/usr/local/cuda-site/bin&amp;quot; &amp;gt;&amp;gt; .bashrc          \
&amp;amp;&amp;amp; echo &amp;quot;LD_LIBRARY_PATH=/usr/local/cuda-site/lib64&amp;quot; &amp;gt;&amp;gt; .bashrc   \
&amp;amp;&amp;amp; . /.bashrc \
&amp;amp;&amp;amp; ldconfig /usr/local/cuda-site/lib64

# Install StarLab w/ and w/o GPU, w/ and w/o tidal fields
RUN tar -xvf $STARLAB_FILE &amp;amp;&amp;amp; rm $STARLAB_FILE \
&amp;amp;&amp;amp; cp -r starlab starlab-no-GPU               \
&amp;amp;&amp;amp; cp -r starlab starlabAS-no-GPU             \
&amp;amp;&amp;amp; cp -r starlab starlabAS-GPU                \
&amp;amp;&amp;amp; mv starlab starlab-GPU

# Tidal field version only has 5 files different, 
# so we can copy them into a copy of the non TF version:

# starlab/src/node/dyn/util/add_tidal.C
# starlab/src/node/dyn/util/dyn_external.C
# starlab/src/node/dyn/util/dyn_io.C
# starlab/src/node/dyn/util/set_com.C
# starlab/src/node/dyn/util/dyn_story.C

RUN cp starlabAS/*.C starlabAS-no-GPU/src/node/dyn/util/ \
&amp;amp;&amp;amp; cp starlabAS/*.C starlabAS-GPU/src/node/dyn/util/     \
&amp;amp;&amp;amp; cp starlabAS/dyn.h starlabAS-no-GPU/include/          \
&amp;amp;&amp;amp; cp starlabAS/dyn.h starlabAS-GPU/include/             \
&amp;amp;&amp;amp; rm -rf starlabAS

# Compile sapporo
RUN cd sapporo/ &amp;amp;&amp;amp; make &amp;amp;&amp;amp; bash compile.sh &amp;amp;&amp;amp; cd ../

# With and w/o GPU and w/ and w/o AS tidal fields
RUN cd /starlab-GPU/ &amp;amp;&amp;amp; ./configure --with-f77=no &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install &amp;amp;&amp;amp; cd ../ \
&amp;amp;&amp;amp; mv /starlab-GPU/usr/bin slbin-GPU &amp;amp;&amp;amp; rm -rf /starlab-GPU \
&amp;amp;&amp;amp; cd /starlabAS-GPU/ &amp;amp;&amp;amp; ./configure --with-f77=no &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install &amp;amp;&amp;amp; cd ../ \
&amp;amp;&amp;amp; mv /starlabAS-GPU/usr/bin slbinAS-GPU &amp;amp;&amp;amp; rm -rf /starlabAS-GPU \
&amp;amp;&amp;amp; cd /starlab-no-GPU/ &amp;amp;&amp;amp; ./configure --with-f77=no --with-grape=no &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install &amp;amp;&amp;amp; cd ../ \
&amp;amp;&amp;amp; mv /starlab-no-GPU/usr/bin slbin-no-GPU &amp;amp;&amp;amp; rm -rf /starlab-no-GPU \
&amp;amp;&amp;amp; cd /starlabAS-no-GPU/ &amp;amp;&amp;amp; ./configure --with-f77=no --with-grape=no &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install &amp;amp;&amp;amp; cd ../ \
&amp;amp;&amp;amp; mv /starlabAS-no-GPU/usr/bin slbinAS-no-GPU &amp;amp;&amp;amp; rm -rf /starlabAS-no-GPU

# Default command.
ENTRYPOINT [&amp;quot;/bin/bash&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first part of the &lt;code&gt;Dockerfile&lt;/code&gt; specify to use &lt;code&gt;Ubuntu 14.04&lt;/code&gt; as base image
(a special version customized for Docker). Then it lists me as maintainer of the image.
What follows are environment variables needed for the installation.
&lt;code&gt;COPY&lt;/code&gt; copy the Starlab sources from the host folder to the image &lt;code&gt;/&lt;/code&gt; folder.
After that I set the right variables needed to install the right CUDA drivers
and libraries for each system.&lt;/p&gt;

&lt;p&gt;After setting the environment variables, the &lt;code&gt;RUN&lt;/code&gt; command is used to launch
the update of the system indexes and packages and the installations of the needed
build tools.&lt;/p&gt;

&lt;p&gt;Then we can install the CUDA drivers and the CUDA libraries.&lt;/p&gt;

&lt;p&gt;Because Docker add a layer for each of the Docker commands used, I minimize the number of layers
running more that one bash command chaining them with &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The following steps are extract the sources, copy the files in the right places and compile
sapporo and Starlab. Sapporo is the library that allow Starlab (developed for GRAPE) to run on the GPUs.&lt;/p&gt;

&lt;p&gt;The final line tells Docker that a container based on this image should start with /bin/bash active.&lt;/p&gt;

&lt;p&gt;To build the image just run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;time docker build --force-rm=true -t &amp;lt;your registry name&amp;gt;/starlab-cuda-&amp;lt;driver version&amp;gt;:$(date +&amp;quot;%Y%m%d&amp;quot;) .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is my build line containing&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;time&lt;/code&gt; command, just to know how log does it take to build the image&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker build --force-rm=true&lt;/code&gt; build the image removing intermediate layer&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-t&lt;/code&gt; to tag the image you create with a name you like, I use my Dcoker Hub username,
the name of the program I&amp;rsquo;m dockerizing, if using cuda, the driver version and the build date,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.&lt;/code&gt; the final dot is not a typo, it tells Docker to build an image using the &lt;code&gt;Dockerfile&lt;/code&gt;
in the current folder.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s assume that the container name is &lt;code&gt;me/starlab-cuda-340.46-6.0.37-2015-06-15&lt;/code&gt;
At the end of the process you can check if the image was successfully created (ok, you can do this also from the errors!)
by running:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker images

REPOSITORY                                   TAG                 IMAGE ID            
me/starlab-cuda-340.46-6.0.37-2015-06-15    20150615            b073d414323f        
                                            CREATED             VIRTUAL SIZE
                                            37 minutes ago      5.272 GB
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;run-a-starlab-container:e7da96f04bfa3eab144a0265a4f6de5a&#34;&gt;Run a StarLab container&lt;/h2&gt;

&lt;p&gt;Now that you created the image, it&amp;rsquo;s time to run a container with it.
To create and run a container based on your newly created image run:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -ti --device /dev/nvidia0:/dev/nvidia0 \
                 --device /dev/nvidia1:/dev/nvidia1 \
                 --device /dev/nvidiactl:/dev/nvidiactl \
                 --device /dev/nvidia-uvm:/dev/nvidia-uvm \
                 -v       &amp;lt;abs path to host folder&amp;gt;:&amp;lt;container folder&amp;gt; \
                          me/starlab-cuda-340.46-6.0.37-2015-06-15
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker run&lt;/code&gt; is obvious&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-ti&lt;/code&gt; means open a interactive pseudo tty (that is, more or less, give me a terminal inside the
container, once started, where I can run commands)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--device&lt;/code&gt; specify which devices to attach; in this case I am connecting 2 CUDA GPUs
and allow for the Unified Virtual Memory to be used (it works only from CUDA6)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-v &amp;lt;abs path to host folder&amp;gt;:&amp;lt;container folder&amp;gt;&lt;/code&gt; allow to share a folder between host and container&lt;/li&gt;
&lt;li&gt;&lt;code&gt;me/starlab-cuda-340.46-6.0.37-2015-06-15&lt;/code&gt; is the name of the image from which to create the container&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can check by running:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker ps [-a]

CONTAINER ID        IMAGE                                              
ccdffc10c680        me/starlab-cuda-340.46-6.0.37-2015-06-15   
                     COMMAND             CREATED             
                     &amp;quot;/bin/bash&amp;quot;         15 seconds ago    
                     STATUS              PORTS               NAMES
                     Up 15 seconds                           adoring_turing
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;-a&lt;/code&gt; flags tells Docker to show you also the stopped containers. Note that the container
has a random name given by Docker.&lt;/p&gt;

&lt;p&gt;It is also possible to directly run commands just after the container creation,
for example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ time echo &amp;quot;Hello world&amp;quot;
Hello world
real    0m0.000s
user    0m0.000s
sys     0m0.000s

$ time docker run ubuntu:14.04 /bin/echo &#39;Hello world&#39;
Hello world
real    0m0.219s
user    0m0.028s
sys     0m0.005s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example, the second command ran into a docker container.&lt;/p&gt;

&lt;p&gt;We can do something better: we want a script that creates a container,
start it, run some commands and then clean everything.&lt;/p&gt;

&lt;p&gt;This could be quite easy, but we are using StarLab, that makes heavy use of pipes.
I found three solutions to get it works, the last being the better.&lt;/p&gt;

&lt;p&gt;The first attempt is something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash # shebang line to specify the interpreter

set -x # set -x tells bash to echo the command is going to run

# Create a docker container with devices and volumes and give it a name
docker create --name sltest -i -t \
--device /dev/nvidia0:/dev/nvidia0 \
--device /dev/nvidia1:/dev/nvidia1 \
--device /dev/nvidiactl:/dev/nvidiactl \
--device /dev/nvidia-uvm:/dev/nvidia-uvm \
me/starlab-cuda-340.46-6.0.37-2015-06-15

# Start the container
docker start sltest

# Exec commands to create StarLab initial conditions
(docker exec -i sltest /slbin/makeking -n 100 -w 5 -i -u ) &amp;gt; makeking.out
(docker exec -i sltest /slbin/makemass -f 8 -l 0.1 -u 40 ) &amp;lt; makeking.out &amp;gt; makemass.out
(docker exec -i sltest /slbin/add_star -R 1 -Z 0.1       ) &amp;lt; makemass.out &amp;gt; add_star.out
(docker exec -i sltest /slbin/scale    -R 1 -M 1         ) &amp;lt; add_star.out &amp;gt; ics.txt

# Start kira
(docker exec -i sltest /slbin/kira -t 3 -d 1 -D 1 -f 0 -n 10 -e 0 -B -b 1) &amp;lt; ics.txt &amp;gt; out.txt 2&amp;gt; err.txt

# Stop and delete the container
docker stop sltest
docker rm sltest
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example make use of the STDIN/ERR/OUT redirection, but does not always work
very well.&lt;/p&gt;

&lt;p&gt;The second attempt, a little better is&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash 
set -x 

# Create env variables for the folders
LOCAL_FOLDER=~/starlab-results
DOCKER_FOLDER=/starlab-results

# Create a docker container with devices and volumes and give it a name
docker create --name sltest -i -t \
--device /dev/nvidia0:/dev/nvidia0 \
--device /dev/nvidia1:/dev/nvidia1 \
--device /dev/nvidiactl:/dev/nvidiactl \
--device /dev/nvidia-uvm:/dev/nvidia-uvm \
-v $LOCAL_FOLDER:$DOCKER_FOLDER \
me/starlab-cuda-340.46-6.0.37-2015-06-15

# Start the container
docker start sltest

# Exec commands to create StarLab initial conditions
(docker exec -i sltest -c &amp;quot;/slbin/makeking -n 100 -w 5 -i -u ) &amp;gt; $DOCKER_FOLDER/makeking.out&amp;quot;
(docker exec -i sltest -c &amp;quot;/slbin/makemass -f 8 -l 0.1 -u 40 ) &amp;lt; $DOCKER_FOLDER/makeking.out &amp;gt; $DOCKER_FOLDER/makemass.out&amp;quot;
(docker exec -i sltest -c &amp;quot;/slbin/add_star -R 1 -Z 0.1       ) &amp;lt; $DOCKER_FOLDER/makemass.out &amp;gt; $DOCKER_FOLDER/add_star.out&amp;quot;
(docker exec -i sltest -c &amp;quot;/slbin/scale    -R 1 -M 1         ) &amp;lt; $DOCKER_FOLDER/add_star.out &amp;gt; $DOCKER_FOLDER/ics.txt&amp;quot;

# Start kira
docker exec -i sltest bash -c &amp;quot;/slbin/kira -t 3 -d 1 -D 1 -f 0 \
 -n 10 -e 0 -B -b 1 &amp;lt; $DOCKER_FOLDER/ics.txt \
 &amp;gt; $DOCKER_FOLDER/out.txt 2&amp;gt; $DOCKER_FOLDER/err.txt&amp;quot;

# Stop and delete the container
docker stop sltest
docker rm sltest
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this second example we make use of the internal container folder attached to a host system folder.
We will found our files in &lt;code&gt;~/starlab-results&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, the way I prefer is to make the container bash read a script in the
exchange folder. To do this, we need two files.&lt;br /&gt;
The first create the container and launch the second, located into the exchange folder.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cat dockerized_starlab.sh

#!/bin/bash
set -x
# Create a docker container with devices and volumes and give it a name
CONTAINER_NAME=test-001

docker create --name $CONTAINER_NAME -i -t \
--device /dev/nvidia0:/dev/nvidia0 \
--device /dev/nvidia1:/dev/nvidia1 \
--device /dev/nvidiactl:/dev/nvidiactl \
--device /dev/nvidia-uvm:/dev/nvidia-uvm \
-v /home/ziosi/tests/$CONTAINER_NAME/results/:/sl-exchanges/ \
me/starlab-cuda-340.46-6.0.37-2015-06-15

# Start the container
docker start $CONTAINER_NAME

# Execute the script in the exchange folder
docker exec -i $CONTAINER_NAME bash -c &amp;quot;/sl-exchanges/run.sh&amp;quot;

docker stop $CONTAINER_NAME
docker rm $CONTAINER_NAME
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The second may contain the instructions to run StarLab commands:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash
set -x

for RUN in $(ls create_*.sh); do
	echo &amp;quot;Run $RUN&amp;quot;;
	/slbin-GPU/makeking -n 1000 -w 5 -i -u  &amp;gt; /sl-exchanges/makeking-$RUN.out;
	/slbin-GPU/makemass -f 8  -l 0.1 -u 150 &amp;lt; /sl-exchanges/makeking-$RUN.out &amp;gt; /sl-exchanges/makemass-$RUN.out;
	/slbin-GPU/add_star -R 1 -Z 0.10        &amp;lt; /sl-exchanges/makemass-$RUN.out &amp;gt; /sl-exchanges/add_star-$RUN.out;
	/slbin-GPU/set_com -r 5 0 0 -v 0 1 0    &amp;lt; /sl-exchanges/add_star-$RUN.out &amp;gt; /sl-exchanges/set_com-$RUN.out;
	/slbin-GPU/scale -R 1 -M 1  &amp;lt; /sl-exchanges/set_com-$RUN.out &amp;gt; /sl-exchanges/ics-$RUN.txt;
	/slbin-GPU/kira -t 500 -d 1 -D 1 -f 0 -n 10 -e 0 -B -b 1 &amp;lt; /sl-exchanges/ics-$RUN.txt &amp;gt; /sl-exchanges/out-$RUN.txt 2&amp;gt; /sl-exchanges/err-$RUN.txt;
done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where I take advantage of the fact that I wrote a script to loop over different
simulations to be ran.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s it!!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Install Docker</title>
      <link>http://brunettoziosi.eu/posts/docker-installation/</link>
      <pubDate>Mon, 15 Jun 2015 10:55:02 +0200</pubDate>
      
      <guid>http://brunettoziosi.eu/posts/docker-installation/</guid>
      <description>

&lt;h2 id=&#34;what-is-docker:b27a6dac77ac7c1c26ccb85a8fe76747&#34;&gt;What is Docker&lt;/h2&gt;

&lt;p&gt;Well, Docker is&lt;/p&gt;

&lt;p&gt;&amp;ldquo;An open source project to pack, ship and run any application as a lightweight container.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;I have written a brief introduction &lt;a href=&#34;http://rawgit.com/brunetto/my-public-talks/master/2014-12-cinecaBigData/index.html#24&#34;&gt;here&lt;/a&gt;,
and the Internet is full of definitions and suggestions. Check also out
&lt;a href=&#34;http://www.ubuntu.com/cloud/tools/lxd&#34;&gt;this&lt;/a&gt; for a comparison with
&lt;a href=&#34;https://insights.ubuntu.com/2015/04/28/getting-started-with-lxd-the-container-lightervisor/&#34;&gt;LDX&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, in short, Docker:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;is an isolated sharable environment (dev and ship)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;avoid the need to mess-up host OS to change dev env&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;avoid the need to get mad to install an app&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;is (was) based on lxc (linux containers) and Go&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;is NOT a virtual machine → lightweight&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;is a secure (sandbox)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;allow you to commit changes&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;is based on images and containers: templates and running instances (that lose memory on shutdown)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;how-to-install-docker:b27a6dac77ac7c1c26ccb85a8fe76747&#34;&gt;How to install Docker&lt;/h2&gt;

&lt;p&gt;There are many different way to install Docker. On *buntu,
I find this the best (see also &lt;a href=&#34;https://github.com/brunetto/docker-cheat-sheet#linux&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add docker repository key to apt-key for package verification and add repository:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo sh -c &amp;quot;wget -qO- https://get.docker.io/gpg | apt-key add -&amp;quot;
sudo sh -c &amp;quot;echo deb http://get.docker.io/ubuntu docker main\
&amp;gt; /etc/apt/sources.list.d/docker.list&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Install docker&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo aptitude update &amp;amp;&amp;amp; sudo aptitude install lxc-docker
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Avoid typing sudo everytime&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo groupadd docker
sudo gpasswd -a ${USER} docker
sudo service docker restart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then logout and login again.&lt;/p&gt;

&lt;p&gt;If you want, you can allow memory limits: set &lt;code&gt;/etc/default/grub&lt;/code&gt; key &lt;code&gt;GRUB_CMDLINE_LINUX&lt;/code&gt; to&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GRUB_CMDLINE_LINUX=&amp;quot;cgroup_enable=memory swapaccount=1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then update GRUB with &lt;code&gt;sudo update-grub&lt;/code&gt; and reboot.&lt;/p&gt;

&lt;h2 id=&#34;usefull-commands:b27a6dac77ac7c1c26ccb85a8fe76747&#34;&gt;Usefull commands&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;docker&lt;/code&gt; &lt;a href=&#34;https://docs.docker.com/reference/commandline/cli/#attach&#34;&gt;attach&lt;/a&gt;,
&lt;a href=&#34;https://docs.docker.com/reference/commandline/cli/#create&#34;&gt;create&lt;/a&gt;,
&lt;a href=&#34;https://docs.docker.com/reference/commandline/cli/#exec&#34;&gt;exec&lt;/a&gt;,
&lt;a href=&#34;https://docs.docker.com/reference/commandline/cli/#inspect&#34;&gt;inspect&lt;/a&gt;,
&lt;a href=&#34;https://docs.docker.com/reference/commandline/cli/#logs&#34;&gt;logs&lt;/a&gt;,
&lt;a href=&#34;https://docs.docker.com/reference/commandline/cli/#push&#34;&gt;push&lt;/a&gt;,
&lt;a href=&#34;https://docs.docker.com/reference/commandline/cli/#pull&#34;&gt;pull&lt;/a&gt;,
&lt;a href=&#34;https://docs.docker.com/reference/commandline/cli/#rm&#34;&gt;rm&lt;/a&gt;,
&lt;a href=&#34;https://docs.docker.com/reference/commandline/cli/#rmi&#34;&gt;rmi&lt;/a&gt;,
&lt;a href=&#34;https://docs.docker.com/reference/commandline/cli/#run&#34;&gt;run&lt;/a&gt;,
&lt;a href=&#34;https://docs.docker.com/reference/commandline/cli/#start&#34;&gt;start&lt;/a&gt;,
&lt;a href=&#34;https://docs.docker.com/reference/commandline/cli/#stop&#34;&gt;stop&lt;/a&gt;,
&lt;a href=&#34;https://docs.docker.com/reference/commandline/cli/#tag&#34;&gt;tag&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Inside a container, exit with &lt;code&gt;ctrl+p ctrl+q&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Attach to a running container with &lt;code&gt;docker attach &amp;lt;container name&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;other-resources:b27a6dac77ac7c1c26ccb85a8fe76747&#34;&gt;Other resources&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://registry.hub.docker.com&#34;&gt;Registry/repository&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Docs: &lt;a href=&#34;https://docs.docker.com/reference/commandline/cli/&#34;&gt;command line&lt;/a&gt;, &lt;a href=&#34;http://docs.docker.com/&#34;&gt;all&lt;/a&gt;, &lt;a href=&#34;https://github.com/brunetto/docker-cheat-sheet&#34;&gt;me&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/24702233/docker-container-and-memory-consumption&#34;&gt;Memory consumption&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://phusion.github.io/baseimage-docker/#intro&#34;&gt;Docker baseimages&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See &lt;a href=&#34;../dockerized-starlab&#34;&gt;Dockerized Starlab&lt;/a&gt; to have an example of
how Docker can be used.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Blog pages index generator</title>
      <link>http://brunettoziosi.eu/posts/blog-pages-index-generator/</link>
      <pubDate>Fri, 29 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://brunettoziosi.eu/posts/blog-pages-index-generator/</guid>
      <description>&lt;p&gt;Since some time I was looking for a way to automatically generate an
&lt;a href=&#34;../stories/index.html&#34;&gt;index&lt;/a&gt; for the
pages of this blog!
This would rebuild my index every time keeping automatically track of new or
deleted pages.&lt;/p&gt;

&lt;p&gt;Eventually I had time to try, and I tried in Go!:)&lt;/p&gt;

&lt;p&gt;This is the first attempt, it could be better, but it works!&lt;/p&gt;

&lt;p&gt;Filesystem walk from
&lt;a href=&#34;http://stackoverflow.com/questions/12657365/extracting-directory-hierarchy-using-go-language&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;path/filepath&amp;quot;
	&amp;quot;fmt&amp;quot;
	&amp;quot;log&amp;quot;
	&amp;quot;os&amp;quot;
	&amp;quot;strings&amp;quot;
	&amp;quot;time&amp;quot;
)

func main() {
	tGlob0 := time.Now()
	
	// Create output file
	fOut, err := os.Create(&amp;quot;index.md&amp;quot;)
	if err != nil {
        panic(err)
    }
    defer fOut.Close()
	
	// Define and implement what to do with path pieces
	visit := func(path string, info os.FileInfo, err error) error {
		// Split dir path from file name
		dir, file := filepath.Split(path)
		// Init list line string
		line := &amp;quot;&amp;quot;
		// Init and compute the level of indentation based on dit level 
		indent := &amp;quot;&amp;quot;
		for i:=0; i &amp;lt; len(strings.Split(dir, &amp;quot;/&amp;quot;))-1; i++ {
			indent = indent + &amp;quot;    &amp;quot;
		}
		// If I reach a new dir
        if info.IsDir() {
			// Ignore local dir (exit function)
			if strings.Contains(path, &amp;quot;.&amp;quot;) {
				return nil
			}
			// Create line for page with name == dirName
            line = indent + &amp;quot;* [&amp;quot;+strings.Title(filepath.Base(path))+&amp;quot;](&amp;quot;+filepath.Join(path, filepath.Base(path)+&amp;quot;.html)&amp;quot;)+&amp;quot;\n&amp;quot;
        // If I found a new file
		} else {
			// Only consider md files
			if strings.HasSuffix(file, &amp;quot;md&amp;quot;){
				fileBase := strings.TrimSuffix(file, &amp;quot;.md&amp;quot;)
				// Ignore files with name == dirName
				if fileBase == filepath.Base(dir) {
					return nil
				}
				// Create line
				linkName := strings.Replace(strings.Title(strings.Replace(fileBase, &amp;quot;-&amp;quot;, &amp;quot;_&amp;quot;, -1)), &amp;quot;_&amp;quot;, &amp;quot; &amp;quot;, -1)
			    line = indent + &amp;quot;* [&amp;quot;+ linkName +&amp;quot;](&amp;quot;+filepath.Join(dir, strings.Replace(file, &amp;quot;.md&amp;quot;, &amp;quot;.html&amp;quot;, 1))+&amp;quot;)\n&amp;quot;
			} else {	
				return nil
			}
        }
        // Print line to file
//         fmt.Print(line)
		if _, err = fOut.WriteString(line); err != nil {
			log.Fatal(err)
		}
        return nil
    }
    
    header := `&amp;lt;!-- 
.. link: 
.. description: 
.. tags: 
.. date: 2013/09/03 12:24:24
.. title: for future references summary
.. slug: index
--&amp;gt;

* [Blog](../index.html)
`
    
    if _, err = fOut.WriteString(header); err != nil {
			log.Fatal(err)
	}
    
    // Walk through folders
	err = filepath.Walk(&amp;quot;./&amp;quot;, visit)
    if err != nil {
        log.Fatal(err)
    }
	

	tGlob1 := time.Now()
	fmt.Println()
	log.Println(&amp;quot;Recreated pages index in &amp;quot;, tGlob1.Sub(tGlob0))
} //END MAIN


&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Super-basic file parsing in Go</title>
      <link>http://brunettoziosi.eu/posts/super-basic-file-parsing-in-go/</link>
      <pubDate>Thu, 05 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://brunettoziosi.eu/posts/super-basic-file-parsing-in-go/</guid>
      <description>&lt;p&gt;I want to parse all the files in a folder starting with a certain prefix
searching for the lines containing a certain string.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;package main&lt;/code&gt; tells go that this source will be a main file, not a library/module.
Then, we import the packages we need. If a package is not still needed, go will
throw an error.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;//&lt;/code&gt; or &lt;code&gt;/* */&lt;/code&gt; are, respectively, the one-line and multi-line comments.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;bufio&amp;quot; // buffered input/output
	&amp;quot;compress/gzip&amp;quot; // compressed files handling
	&amp;quot;log&amp;quot; // logging
	&amp;quot;os&amp;quot; // OS related utilities
	&amp;quot;time&amp;quot; // timing
	&amp;quot;strings&amp;quot; // strings handling
	&amp;quot;path/filepath&amp;quot; // path handling
	&amp;quot;fmt&amp;quot; // basic printing
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The main body of the program has to be in the &lt;code&gt;main&lt;/code&gt; function.
We would also like to know the time needed to execute the program so we use
&lt;code&gt;tGlob0 := time.Now()&lt;/code&gt; to keep track of the time we launch the program.&lt;br /&gt;
We also print a help message in case the number of arguments provided
do not match the needed ones&amp;hellip;. id they are wrong, googd luck!:P&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {
	
	helpMessage :=`Hi! To use this program you must provide
	1 - the path
	2 - the file prefix
	3 - the output file
	4 - the string to be searched.`
	
	if len(os.Args) &amp;lt; 5{
		fmt.Println(helpMessage)
		os.Exit(0)
	}

	tGlob0 := time.Now()
 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go can create variables in two ways, by declaring them before or by assignement directly.
To have a clearer view of what is going on I will declare the variables before except
for &lt;code&gt;tGlob0&lt;/code&gt; and &lt;code&gt;tGlob1&lt;/code&gt;. If you want to know the type of a variable, you can
create it by assignement and then inspect its type with the reflect package,
using &lt;code&gt;reflect.TypeOf(variable)&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;    var inPath string
    var prefix string
    var searchString string
    var outFile string
    var inFiles []string
    var inFile string
    var extString []string
    var ext string
    var PID int 
    var (fileStruct *os.File
    fOut *os.File)
    var err error
    var fZip *gzip.Reader
    var nReader *bufio.Reader
    var read_line string
```        

The `os` package provides the tools to interact with the OS, so we can retrieve the process
PID and the CLI arguments.        
    

````go
	PID = os.Getpid()
	log.Println(&amp;quot;Process PID is &amp;quot;, PID)	
	
	inPath = os.Args[1]
	prefix = os.Args[2]+&amp;quot;*&amp;quot;
	outFile = os.Args[3]
	searchString = os.Args[4]
	
	log.Println(&amp;quot;Parsing files in folder &amp;quot;, inPath, &amp;quot; selecting &amp;quot;, os.Args[2])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Glob&lt;/code&gt; function allows to search for the filenames matching a certain
 wildcard pattern.&lt;br /&gt;
 &lt;code&gt;defer&lt;/code&gt; is used to mark functions to be executed on function exit.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;	inFiles, err = filepath.Glob(filepath.Join(inPath, prefix))
	if err != nil {
		panic(err)
	}
	
	log.Println(&amp;quot;Searching for &amp;quot;, searchString, &amp;quot; in &amp;quot;, filepath.Join(inPath, prefix))
	log.Println(&amp;quot;Creating output file &amp;quot;, outFile)
	
	fOut, err = os.Create(outFile)
	if err != nil {
		panic(err)
	}
	defer fOut.Close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the following piece of code is possible to see how to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;work on strings&lt;/li&gt;
&lt;li&gt;write a counter that updates&lt;/li&gt;
&lt;li&gt;use the switch construct&lt;/li&gt;
&lt;li&gt;make an assignement in the if construct&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;	log.Println(&amp;quot;Starting main loop on file list of lenght &amp;quot;, len(inFiles))
	for fileIdx := range inFiles {
		
		inFile = inFiles[fileIdx]
		extString = strings.Split(inFile, &amp;quot;.&amp;quot;)
		ext = extString[len(extString)-1]

		// Write an updating counter
		fmt.Print(&amp;quot;Completed: &amp;quot;, 100. * fileIdx / len(inFiles), &amp;quot;% \r&amp;quot;)
		
		// Creating file object
		if fileStruct, err = os.Open(inFile); err != nil {
			log.Fatal(os.Stderr, &amp;quot;%v, Can&#39;t open %s: error: %s\n&amp;quot;, os.Args[0], inFile, err)
			os.Exit(1)
		}
		defer fileStruct.Close()
		
		switch ext {
			case &amp;quot;dat&amp;quot;: {
				nReader = bufio.NewReader(fileStruct)
			}
			case &amp;quot;txt&amp;quot;:{
				nReader = bufio.NewReader(fileStruct)
			}
			case &amp;quot;gz&amp;quot;: {
				fZip, err = gzip.NewReader(fileStruct)
				if err != nil {
				log.Fatal(os.Stderr, &amp;quot;%v, Can&#39;t open %s: error: %s\n&amp;quot;, os.Args[0], inFile, err)
				os.Exit(1)
				}
				nReader = bufio.NewReader(fZip)
			}
			default: {
				log.Fatal(&amp;quot;Unrecognized file &amp;quot;, inFile)
			}
		}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And yes, no &lt;code&gt;while&lt;/code&gt; but infinite loops with &lt;code&gt;for&lt;/code&gt;.&lt;br /&gt;
Then we read the file line by line and write the line if we find a certain
string inside it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;        for {
            if read_line, err = nReader.ReadString(&#39;\n&#39;); err != nil {
            log.Println(&amp;quot;Done reading file with err&amp;quot;, err)
            break
            }
//          if (strings.Contains(read_line, &amp;quot;name =&amp;quot;) || strings.Contains(read_line, &amp;quot;i =&amp;quot;)) {//&amp;amp;&amp;amp; strings.Contains(read_line, &amp;quot;&amp;lt;&amp;quot;){
                if strings.Contains(read_line, searchString){
                _, err = fOut.WriteString(read_line)
                }
        }
    
        // flush 
        fOut.Sync()
        fOut.Close()
    }
    
    
    log.Println()
    tGlob1 := time.Now()
    log.Println(&amp;quot;Wall time for all &amp;quot;, tGlob1.Sub(tGlob0))
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Check external ip</title>
      <link>http://brunettoziosi.eu/posts/check-external-ip/</link>
      <pubDate>Tue, 03 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://brunettoziosi.eu/posts/check-external-ip/</guid>
      <description>

&lt;p&gt;This is the first attempt to check the external ip of a linux box.
This means, for example, the public ip address of our modem if we are connected
to the home Wi-Fi.&lt;br /&gt;
I will try to do this in Python and Go. Of course these are raw attempts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; new version &lt;a href=&#34;https://github.com/brunetto/fip&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;python:a03aac959a8b7e6a11a32e871f3dca9a&#34;&gt;Python&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python
import re, os, time

# In internet they say that
# ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$
# is better but I find this useful

print &amp;quot;Check external ip&amp;quot;
print &amp;quot;This script need curl and the Python modules re, os and time&amp;quot;

# Compile regex
reg = re.compile(&#39;\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}&#39;)

# Query until stop, hoping the site won&#39;t stop us
while True:
	# Ask the site for ip
	string = os.popen(&amp;quot;curl -s &#39;http://checkip.dyndns.org&#39;&amp;quot;).read()
	res = reg.search(string)
	if res == None:
		print &amp;quot;Error, ip not found, continue, ...&amp;quot;
	else:
		print ip
		ip = res.group(0)
		# Recreate the ip file and write the ip
		ipFile = open(&amp;quot;ip.dat&amp;quot;, &#39;w&#39;)
		ipFile.write(ip)
		ipFile.flush()
		ipFile.close()
	# Wait
	time.sleep(5)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;go:a03aac959a8b7e6a11a32e871f3dca9a&#34;&gt;Go&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	//&amp;quot;io/ioutil&amp;quot;
    &amp;quot;os&amp;quot;
    &amp;quot;log&amp;quot;
    &amp;quot;fmt&amp;quot;
    &amp;quot;time&amp;quot;
    &amp;quot;os/exec&amp;quot;
    &amp;quot;regexp&amp;quot;
)

// check the errors
func check(e error) {
    if e != nil {
        panic(e)
    }
}

func main() {

	// set ip download command
	
	command := &amp;quot;/usr/bin/curl&amp;quot;
	args := &amp;quot;http://checkip.dyndns.org&amp;quot;
	
	// compile regexp
	var digitsRegexp = regexp.MustCompile(`\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}`)
	
	// infinite loop to update the ip
    for ;;{
		// download ip string
		out, err := exec.Command(command, args).Output()
		if err != nil {
			log.Fatal(err)
		}
		
		// out is a binary buffer, convert into string
		ipString := string(out)
		
		// search for ip
		ipRes := digitsRegexp.FindString(ipString)
		fmt.Println(ipRes)
		
		// convert string to byte (found a better method)
		//ipByte := []byte(ipRes)
		//ioutil.WriteFile(&amp;quot;ip.dat&amp;quot;, ipByte, 0644)
		
		// create a file, it implements the Writer interface
		f, err := os.Create(&amp;quot;ip.dat&amp;quot;)
		
		// check for errors
		check(err)
		
		// close file before exit in case of problems
		defer f.Close()
		
		// write the string, discard (_) the number of bytes written
		_, err = f.WriteString(ipRes)
		// flush 
		f.Sync()
		f.Close()
		// wait
		time.Sleep(5 * time.Second)
    }
}

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Go installation from source</title>
      <link>http://brunettoziosi.eu/posts/cosmological-simulations-4-moving-the-particles/</link>
      <pubDate>Fri, 30 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://brunettoziosi.eu/posts/cosmological-simulations-4-moving-the-particles/</guid>
      <description>&lt;p&gt;Summary of the Go installation instruction from source as presented in:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://golang.org/doc/install&#34;&gt;Go installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://golang.org/doc/install/source&#34;&gt;Go installation from source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://golang.org/doc/code.html&#34;&gt;Write Go code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--TEASER_END--&gt;

&lt;p&gt;The installation path will be &lt;code&gt;/usr/local/go&lt;/code&gt; and the workspace in
&lt;code&gt;$HOME/Code/go&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /usr/local
hg clone -u release https://code.google.com/p/go
cd go/src
./all.bash
echo &amp;quot;export PATH=$PATH:/usr/local/go/bin&amp;quot; &amp;gt;&amp;gt; $HOME/.bashrc
echo &amp;quot;export GOPATH=$HOME/Code/go/&amp;quot; &amp;gt;&amp;gt; $HOME/.bashrc
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Go(lang) references</title>
      <link>http://brunettoziosi.eu/pages/tech/golang-references/</link>
      <pubDate>Wed, 21 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://brunettoziosi.eu/pages/tech/golang-references/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../../posts/go-installation-from-source.html&#34;&gt;Go installation from source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.kamilkisiel.net/blog/2012/07/05/using-the-go-regexp-package/&#34;&gt;Regex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://golangtutorials.blogspot.it/2011/05/table-of-contents.html&#34;&gt;Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://golangcookbook.blogspot.it/&#34;&gt;Cookbook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/StefanSchroeder/Golang-Regex-Tutorial&#34;&gt;Tutorial 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gobyexample.com/&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://golang.org/&#34;&gt;http://golang.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://golangtutorials.blogspot.it/2011/05/table-of-contents.html&#34;&gt;http://golangtutorials.blogspot.it/2011/05/table-of-contents.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.golang-book.com/&#34;&gt;http://www.golang-book.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://commandcenter.blogspot.it/2012/06/less-is-exponentially-more.html&#34;&gt;Why it was creates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://groups.google.com/forum/#!forum/golang-nuts&#34;&gt;https://groups.google.com/forum/#!forum/golang-nuts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://code.google.com/p/golem/&#34;&gt;https://code.google.com/p/golem/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gonum&#34;&gt;https://github.com/gonum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://plus.google.com/+golang/posts&#34;&gt;https://plus.google.com/+golang/posts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://plus.google.com/communities/115354877257015196825&#34;&gt;https://plus.google.com/communities/115354877257015196825&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.darkcoding.net/software/pretty-command-line-console-output-on-unix-in-python-and-go-lang/&#34;&gt;Progress bar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://code.google.com/p/log4go/&#34;&gt;Advanced logging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://talks.golang.org/2012/zen.slide&#34;&gt;Zen Slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.repustate.com/migrating-code-from-python-to-golang-what-you-need-to-know/2013/04/23/&#34;&gt;What Python developers need to know before migrating to Go(lang)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/&#34;&gt;Why I’m not leaving Python for Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://golang-for-python-programmers.readthedocs.org/en/latest/&#34;&gt;Golang for Python programmers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://s3.amazonaws.com/golangweekly/go_for_pythonistas.pdf&#34;&gt;Go for Pythonistas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gobyexample.com/&#34;&gt;Go by example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.goinggo.net/&#34;&gt;Going Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.syntax-k.de/projekte/go-review&#34;&gt;The Go Programming Language, or: Why all C-like languages except one suck.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://crypto.stanford.edu/~blynn/c2go/index.html&#34;&gt;c2go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://devcry.heiho.net/2012/04/golang-way-to-go.html?m=1&#34;&gt;Golang: The Way To Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.darkcoding.net/software/go-lang-after-four-months/&#34;&gt;Go after four months #golang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.labix.org/2013/06/15/in-flight-deb-packages-of-go&#34;&gt;GoDeb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://merbist.com/2011/06/27/golang-reflection-exampl/&#34;&gt;Reflection example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://log.zyxar.com/blog/2012/04/08/go-lang-notes/&#34;&gt;Golang notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://learnxinyminutes.com/docs/go/&#34;&gt;http://learnxinyminutes.com/docs/go/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://soniacodes.wordpress.com/&#34;&gt;Sonia Codes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.pheelicks.com/&#34;&gt;http://www.pheelicks.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://talks.golang.org/2012/chat.slide#1&#34;&gt;Chatroulette like mini demo in Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.menfin.info/Presentations/20120709_Golang_introduction/#slide1&#34;&gt;Welcome to the nice world of Golang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://nf.wh3rd.net/10things/&#34;&gt;10 things you (probably) don&amp;rsquo;t know about Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://godoc.org/code.google.com/p/go.tools/present&#34;&gt;Present package docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/lagomeetup/talks&#34;&gt;Some talks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.goinggo.net/&#34;&gt;Going go programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://golang-examples.tumblr.com/&#34;&gt;Golang(Go Language) Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/golang-samples&#34;&gt;GoLang Samples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.golangbootcamp.com/book/frontmatter&#34;&gt;GolangBootCamp Book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://groups.google.com/forum/#!topic/golang-nuts/FCcLsuWsF_U&#34;&gt;Slice of structs vs map o structs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://talks.golang.org/2013/go4python.slide&#34;&gt;go4python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tech.t9i.in/2013/01/why-program-in-go/&#34;&gt;Why I Program in Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/25382073/defining-golang-struct-function-using-pointer-or-not&#34;&gt;Defining golang struct function using pointer or not&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/18435498/why-are-receivers-pass-by-value-in-go/18436251#18436251&#34;&gt;Why are receivers pass by value in Go?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web-server:37888898512b69ee3a39b7d785691d7e&#34;&gt;Web Server&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.joshsoftware.com/2014/03/12/learn-to-build-and-deploy-simple-go-web-apps-part-one/&#34;&gt;Learn to build and deploy simple Go Web Apps, Part One&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://golang.org/doc/articles/wiki/&#34;&gt;http://golang.org/doc/articles/wiki/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/16672593/go-lang-simple-webserver-serve-static-image&#34;&gt;http://stackoverflow.com/questions/16672593/go-lang-simple-webserver-serve-static-image&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ljgww/web_server_example_in_Go_-golang-&#34;&gt;https://github.com/ljgww/web_server_example_in_Go_-golang-&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://robfig.github.io/revel/&#34;&gt;http://robfig.github.io/revel/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://thechangelog.com/on-go-web-application-ecosystem/&#34;&gt;http://thechangelog.com/on-go-web-application-ecosystem/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;goroutines-and-pooling:37888898512b69ee3a39b7d785691d7e&#34;&gt;Goroutines and Pooling&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.goinggo.net/2013/05/thread-pooling-in-go-programming.html?m=0&#34;&gt;http://www.goinggo.net/2013/05/thread-pooling-in-go-programming.html?m=0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gobyexample.com/worker-pools&#34;&gt;https://gobyexample.com/worker-pools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dancallahan.info/journal/go-concurrency/&#34;&gt;http://dancallahan.info/journal/go-concurrency/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.labix.org/2011/10/09/death-of-goroutines-under-control&#34;&gt;http://blog.labix.org/2011/10/09/death-of-goroutines-under-control&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.golang.org/share-memory-by-communicating&#34;&gt;http://blog.golang.org/share-memory-by-communicating&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://golang.org/doc/codewalk/sharemem/&#34;&gt;http://golang.org/doc/codewalk/sharemem/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/18267460/golang-goroutine-pool&#34;&gt;http://stackoverflow.com/questions/18267460/golang-goroutine-pool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dave.cheney.net/tag/golang-3&#34;&gt;http://dave.cheney.net/tag/golang-3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://golang.org/pkg/log/#Logger&#34;&gt;http://golang.org/pkg/log/#Logger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.goinggo.net/2013/11/using-log-package-in-go.html&#34;&gt;http://www.goinggo.net/2013/11/using-log-package-in-go.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://talks.golang.org/2012/concurrency.slide&#34;&gt;Go Concurrency Patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://talks.golang.org/2013/advconc.slide&#34;&gt;Advanced Go Concurrency Patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://talks.golang.org/2012/waza.slide&#34;&gt;Concurrency is not Parallelism&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;efficiency:37888898512b69ee3a39b7d785691d7e&#34;&gt;Efficiency&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://dennisforbes.ca/index.php/2013/07/23/the-most-powerful-feature-of-go-is-the-least-sexy&#34;&gt;The Most Powerful Feature of Go Is The Least Sexy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>