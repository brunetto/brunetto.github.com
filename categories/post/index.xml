<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Post on Post It!</title>
    <link>http://brunettoziosi.eu/categories/post/</link>
    <description>Recent content in Post on Post It!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 05 Jun 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://brunettoziosi.eu/categories/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>PDF manipulation</title>
      <link>http://brunettoziosi.eu/posts/pdf-manipulation/</link>
      <pubDate>Fri, 05 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://brunettoziosi.eu/posts/pdf-manipulation/</guid>
      <description>

&lt;p&gt;It happens, from time to time, that I find myself looking for a way to manipulate PDF
on the fly. For example, I want to print them two-pages per sheet, or to extract
few pages, or to shrink the size of the file without degradate the quality.&lt;/p&gt;

&lt;p&gt;Here are few trick I collected and post here to be able to find them.&lt;/p&gt;

&lt;h2 id=&#34;print-two-pages-per-sheet:1a99063f87f259b634426df7f0e7e8a1&#34;&gt;Print two pages per sheet&lt;/h2&gt;

&lt;p&gt;The first tricks comes from &lt;a href=&#34;http://0x2a.at/blog/2011/02/pdf_manipulation_on_the_cli/&#34;&gt;here&lt;/a&gt;
and assume you have &lt;a href=&#34;http://www2.warwick.ac.uk/fac/sci/statistics/staff/academic-research/firth/software/pdfjam/&#34;&gt;&lt;code&gt;pdfjam&lt;/code&gt;&lt;/a&gt;
installed.
This is how you can produce a pdf with two pages per sheet:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pdfjam --nup 2x2 infile.pdf --landscape --outfile outfile.pdf
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;booklet:1a99063f87f259b634426df7f0e7e8a1&#34;&gt;Booklet&lt;/h2&gt;

&lt;p&gt;You can also print your pdf file as booklet. This means that the pages
of your file are shuffled (and placed two per sheet) so that you can
join them with a clip or some glue or strings in the middle just like
a real book. The sommand is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pdfbook --short-edge infile.pdf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;pdfbook&lt;/code&gt; is part of &lt;code&gt;pdfjam&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;extract-or-join-pages:1a99063f87f259b634426df7f0e7e8a1&#34;&gt;Extract (or join) pages&lt;/h2&gt;

&lt;p&gt;If you need to extrac some pages from your pdf file you can just run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pdftk infile.pdf cat &amp;lt;first_page&amp;gt;-&amp;lt;last_page&amp;gt; output outfile.pdf 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To join pdf files, instead, run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pdftk infile1.pdf infile2.pdf infile3.pdf cat output outfile.pdf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Obviously you need &lt;a href=&#34;http://packages.ubuntu.com/search?keywords=pdftk&#34;&gt;&lt;code&gt;pdftk&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;shrink-pdf-file-size:1a99063f87f259b634426df7f0e7e8a1&#34;&gt;Shrink pdf file size&lt;/h2&gt;

&lt;p&gt;Sometiimes a pdf grows in size with no reason (apparently). It is possible to shrink it
by reduce it to pdf defaults. You will need &lt;a href=&#34;http://www.ghostscript.com/&#34;&gt;&lt;code&gt;gs&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The command you need to run is&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/default -dNOPAUSE -dQUIET -dBATCH -sOutputFile=outfile.pdf infile.pdf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It can be quite difficult to remember, so you can create a bash alias for a function
doing it for you. In &lt;code&gt;.bashrc&lt;/code&gt; add&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;alias pdfdefault=&#39;function _pdfdefault() { gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/default -dNOPAUSE -dQUIET -dBATCH -sOutputFile=$2 $1;}; _pdfdefault&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and run &lt;code&gt;. ~/.bashrc&lt;/code&gt; before running &lt;code&gt;pdfdefault infile.pdf outfile.pdf&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;two-pages-per-sheet-with-latex:1a99063f87f259b634426df7f0e7e8a1&#34;&gt;Two pages per sheet with latex&lt;/h2&gt;

&lt;p&gt;It is possible, if you are writing something with pdf, to produce a pdf
with two pages per sheet without needing to run &lt;code&gt;pdfjam&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In this case just add, at the beginning of your latex document&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-latex&#34;&gt;\usepackage{pgfpages}
\pgfpagesuselayout{2 on 1}[a4paper], landscape]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Not only Big Data</title>
      <link>http://brunettoziosi.eu/posts/not-only-big-data/</link>
      <pubDate>Thu, 08 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://brunettoziosi.eu/posts/not-only-big-data/</guid>
      <description>&lt;p&gt;Recently I&amp;rsquo;ve been at a &lt;a href=&#34;http://www.cineca.it/en&#34;&gt;Cineca&lt;/a&gt; workshop focused on tools to deal with big data analysis.
We had a taste of MapReduce/Hadoop/Spark and friends and we used Docker.
I wrote a small presentation to update my collegues and it become a in-progress presentation of the tools I think are
useful in our everyday work. This presentation aims of acting both as a showcase of what can help us and as a cheat sheet.
You can find it after the break.&lt;/p&gt;

&lt;iframe src=&#34;http://rawgit.com/brunetto/my-public-talks/master/2014-12-cinecaBigData/index.html&#34; width=&#34;800&#34; height=&#34;600&#34;&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Padding</title>
      <link>http://brunettoziosi.eu/posts/padding/</link>
      <pubDate>Fri, 12 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://brunettoziosi.eu/posts/padding/</guid>
      <description>&lt;p&gt;Ok, it&amp;rsquo;s the n-th time I search how to pad numbers in bash.&lt;br /&gt;
I&amp;rsquo;ll take a note here:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;i=5
printf &amp;quot;%03d\n&amp;quot; $i
005
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Something similar in Python and Go:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;t = &amp;quot;test-&amp;quot;
t.ljust(10, &#39;0&#39;) # rjust for right padding

&#39;test-00000&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// LeftPad returns the string padded filling remaining left spaces to `length` with `pad`.
import &amp;quot;log&amp;quot;
import &amp;quot;strings&amp;quot;

func LeftPad(str, pad string, length int) string {
	var repeat int
	if (length-len(str))%len(pad) != 0 {
		log.Fatal(&amp;quot;Can&#39;t pad &amp;quot;, str, &amp;quot; with &amp;quot;, pad, &amp;quot; to length &amp;quot;, length)
	} else {
		repeat = (length - len(str)) / len(pad)
	}
	return strings.Repeat(pad, repeat) + str
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is also possible to do this with &lt;code&gt;fmt&lt;/code&gt; but you still need to compute the number
of char if you want to maintain the total number of printed char.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Things that you can not do without</title>
      <link>http://brunettoziosi.eu/posts/things-that-you-can-not-do-without/</link>
      <pubDate>Fri, 12 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://brunettoziosi.eu/posts/things-that-you-can-not-do-without/</guid>
      <description>&lt;p&gt;A little list of essential tools:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://git-scm.com/&#34;&gt;git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; and &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt; possibly with &lt;a href=&#34;https://github.com/getnikola/nikola&#34;&gt;Nikola&lt;/a&gt; or &lt;a href=&#34;https://github.com/spf13/hugo&#34;&gt;Hugo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bitbucket.org/&#34;&gt;Bitbucket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.dropbox.com&#34;&gt;Dropbox&lt;/a&gt; (possibly with git repos inside, see &lt;a href=&#34;http://stackoverflow.com/questions/12773488/git-fatal-reference-has-invalid-format-refs-heads-master&#34;&gt;here&lt;/a&gt; for problems)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;mega.co.nz&#34;&gt;Mega&lt;/a&gt; with &lt;a href=&#34;https://mega.co.nz/#sync&#34;&gt;linux sync&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ipython.org/&#34;&gt;ipython&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ipython.org/notebook.html&#34;&gt;ipython Notebook&lt;/a&gt; with GitHub and &lt;a href=&#34;http://nbviewer.ipython.org/&#34;&gt;nbviewer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.inkscape.org/en/&#34;&gt;Inkscape&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kate-editor.org/&#34;&gt;Kate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://brunettoziosi.eu/posts/best-golang-installation.html&#34;&gt;Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jeremysanders/veusz&#34;&gt;Veusz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://keep.google.com&#34;&gt;Keep&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://juicessh.com/&#34;&gt;JuiceSSH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;, &lt;a href=&#34;https://github.com/coreos/rocket&#34;&gt;Rocket&lt;/a&gt; (see also &lt;a href=&#34;https://coreos.com/blog/rocket/&#34;&gt;why Rocket&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Python plot examples</title>
      <link>http://brunettoziosi.eu/posts/python-plot-examples/</link>
      <pubDate>Mon, 29 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://brunettoziosi.eu/posts/python-plot-examples/</guid>
      <description>&lt;p&gt;Two examples on how to make plots with &lt;a href=&#34;http://home.gna.org/veusz&#34;&gt;Veusz&lt;/a&gt; and
&lt;a href=&#34;http://matplotlib.org&#34;&gt;Matplotlib&lt;/a&gt;.&lt;br /&gt;
I prefer Veusz because it&amp;rsquo;s easier to configure, modify and it produces
perfect &lt;code&gt;pdf&lt;/code&gt; plots, but sometimes Matplotlib it&amp;rsquo;s faster for producing just
a draft plot to inspect data!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python
# -*- coding: utf8 -*- 

from __future__ import division # no more &amp;quot;zero&amp;quot; integer division bugs!:P
import time
import numpy as np
import veusz.embed as ve

def sm_hist(data, delta=5, n_bin=None, range_=None):
	dataMin = np.floor(data.min())
	dataMax = np.ceil(data.max())
	n_bin = np.ceil(1.*(dataMax-dataMin) / delta)
	range_ = (dataMin, dataMin + n_bin * delta)
	counts, bin_edges = np.histogram(data, n_bin, range_, density = False)
	return counts, bin_edges
	
def sm_hist2(data, delta=5):
	dataMin = np.floor(data.min())
	dataMax = np.ceil(data.max())
	n_bin = np.ceil(1.*(dataMax-dataMin) / delta) + 1
	idxs = ((data  - dataMin) / delta).astype(int)
	counts = np.zeros(n_bin) 
	bin_edges = np.arange(dataMin, dataMax+2, delta)
	for idx in idxs:
		counts[idx] += 1
	counts = np.hstack((np.array([0]), counts, np.array([0])))
	bin_edges = np.hstack((bin_edges[0], bin_edges, bin_edges[-1]))
	return counts, bin_edges

def plotFunc(inpath=&amp;quot;./&amp;quot;, outpath=&amp;quot;./&amp;quot;):
	font = &amp;quot;Times New Roman&amp;quot;
	colors = [u&#39;blue&#39;, u&#39;green&#39;]
	xmin = [&amp;quot;auto&amp;quot;, &amp;quot;auto&amp;quot;]
	xmax = [&amp;quot;auto&amp;quot;, &amp;quot;auto&amp;quot;]
	ymin = [&amp;quot;auto&amp;quot;, 0]
	ymax = [&amp;quot;auto&amp;quot;, &amp;quot;auto&amp;quot;]
	
	xData = np.arange(100) 
	yData = np.random.randint(0, 100, size=100) + np.sin(np.arange(100))
	
	figure = ve.Embedded(&amp;quot;Window_1&amp;quot;)
	page = figure.Root.Add(&#39;page&#39;, width = &#39;30cm&#39;, height=&#39;15cm&#39;)
	grid = page.Add(&#39;grid&#39;, autoadd = False, rows = 1, columns = 2,
						scaleRows=[0.2],
						topMargin=&#39;1cm&#39;,
						bottomMargin=&#39;1cm&#39;
						)
	graphList = []
	
	graphList.append(grid.Add(&#39;graph&#39;, name=&amp;quot;scatter&amp;quot;, autoadd=False, 
							hide = False, 
							Border__width = &#39;2pt&#39;,
							leftMargin = &#39;0.6cm&#39;,
							rightMargin = &#39;0.4cm&#39;,
							topMargin = &#39;0.5cm&#39;,
							bottomMargin = &#39;1cm&#39;,
							))
	
	graphList.append(grid.Add(&#39;graph&#39;, name=&amp;quot;hist&amp;quot;, autoadd=False, 
							hide = False, 
							Border__width = &#39;2pt&#39;,
							leftMargin = &#39;2cm&#39;,
							rightMargin = &#39;0.4cm&#39;,
							topMargin = &#39;0.5cm&#39;,
							bottomMargin = &#39;1cm&#39;,
							))
	
	for i in range(len(graphList)):
		graphList[i].Add(&#39;axis&#39;, name=&#39;x&#39;, label = &amp;quot;x&amp;quot;,
								min = xmin[i],
								max = xmax[i],
								log = False,
								Label__size = &#39;25pt&#39;,
								Label__font = font,
								TickLabels__size = &#39;17pt&#39;,
								TickLabels__format = u&#39;Auto&#39;,
								MajorTicks__width = &#39;2pt&#39;,
								MajorTicks__length = &#39;10pt&#39;,
								MinorTicks__width = &#39;1pt&#39;,
								MinorTicks__length = &#39;6pt&#39;
							)
		graphList[i].Add(&#39;axis&#39;, name=&#39;y&#39;, label = &amp;quot;y&amp;quot;, 
								direction = &#39;vertical&#39;,
								min = ymin[i],
								max = ymax[i],
								log = False,
								autoRange = u&#39;+5%&#39;,
								Label__size = &#39;25pt&#39;,
								Label__font = font,
								TickLabels__size = &#39;20pt&#39;,
								TickLabels__format = u&#39;Auto&#39;,
								MajorTicks__width = &#39;2pt&#39;,
								MajorTicks__length = &#39;10pt&#39;,
								MinorTicks__width = &#39;1pt&#39;,
								MinorTicks__length = &#39;6pt&#39;
							)
	
	graphList[0].Add(&#39;xy&#39;, key=&amp;quot;scatterPlotKey&amp;quot;, name=&#39;scatterPlotName&#39;,
						marker = u&#39;circle&#39;,
						MarkerFill__color = colors[0],
						markerSize = u&#39;3pt&#39;, 
						)

	xDataName = &amp;quot;xScatterData&amp;quot;
	yDataName = &amp;quot;yScatterData&amp;quot;
	figure.SetData(xDataName, xData)
	figure.SetData(yDataName, yData)
	graphList[0].scatterPlotName.xData.val = xDataName
	graphList[0].scatterPlotName.yData.val = yDataName
	
	
	counts, bin_edges = sm_hist2(yData, delta=5)
	
	graphList[1].Add(&#39;xy&#39;, key=&amp;quot;histPlotKey&amp;quot;, name=&#39;histPlotName&#39;,
						xData = bin_edges,
						yData = counts,
						marker = &#39;none&#39;,
						PlotLine__steps = u&#39;left&#39;,
						PlotLine__color = colors[1],
						PlotLine__style = u&amp;quot;solid&amp;quot;,
						PlotLine__width = u&#39;3&#39;,
						FillBelow__color = colors[1],
						FillBelow__style = &amp;quot;forward 2&amp;quot;,
						FillBelow__hide = False,
						FillBelow__transparency = 70,
						#FillBelow__backtransparency = 50,
						FillBelow__linewidth = &#39;1pt&#39;,
						FillBelow__linestyle = &#39;solid&#39;,
						FillBelow__backcolor = &amp;quot;white&amp;quot;,
						FillBelow__backhide = True,
						Label__posnHorz = &#39;right&#39;,
						Label__size = &#39;14pt&#39;, 
						Label__color = &#39;black&#39;
						)

	histKey = graphList[1].Add(&#39;key&#39;, autoadd=False, 
						horzPosn = &#39;left&#39;,
						vertPosn = &#39;top&#39;,
						Text__font = font,
						Text__size = &#39;15&#39;,
						Border__width = &#39;1.5pt&#39;
						)
	
	end = raw_input(&amp;quot;Press any key to finish...&amp;quot;)
	
	figure.Save(&amp;quot;example.vsz&amp;quot;)
	figure.Export(&amp;quot;example.png&amp;quot;, backcolor=&#39;#ffffff&#39;)
	figure.Export(&amp;quot;example.pdf&amp;quot;)

if __name__ == &amp;quot;__main__&amp;quot;:
	inpath = &amp;quot;./&amp;quot;
	outpath = &#39;./&#39;
	tt = time.time()
	plotFunc(inpath, outpath)
	print &amp;quot;Done in &amp;quot;, time.time()-tt, &amp;quot; seconds.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;../../files/example.png&#34; alt=&#34;Veusz plot&#34; title=&#34;Veusz plot&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python
# -*- coding: utf8 -*- 

from __future__ import division # no more &amp;quot;zero&amp;quot; integer division bugs!:P
import time
import numpy as np
import matplotlib.pylab as plt
import matplotlib.font_manager as font_manager

# SM like style
params = {&#39;backend&#39;: &#39;png&#39;,
		&#39;font.family&#39;: &amp;quot;serif&amp;quot;,
		&#39;font.size&#39;: 25,
		&#39;axes.labelsize&#39;: 35,
		#&#39;text.fontsize&#39;: 30,
		&#39;legend.fontsize&#39;: 30,
		&#39;xtick.labelsize&#39;: 28,
		&#39;xtick.major.size&#39;: 20.0,
		&#39;xtick.major.width&#39;: 3.0,
		&#39;xtick.minor.size&#39;: 12.0,
		&#39;xtick.minor.width&#39;: 2,
		&#39;ytick.labelsize&#39;: 28,
		&#39;ytick.major.size&#39;: 20.0,
		&#39;ytick.major.width&#39;: 3.0,
		&#39;ytick.minor.size&#39;: 12.0,
		&#39;ytick.minor.width&#39;: 2,
		#&#39;text.usetex&#39;: True,
		&#39;axes.linewidth&#39;: 3.0,
		&#39;lines.linewidth&#39;: 2,
		&#39;lines.markersize&#39;: 15,
		&#39;axes.grid&#39;: False,
		&#39;grid&#39;: {&#39;color&#39;:&#39;gray&#39;, &#39;linestyle&#39;:&#39;-&#39;, &#39;linewidth&#39;:1},
		&#39;figure.figsize&#39;: (10,10),
		&#39;figure.subplot.left&#39;: 0.15,  # the left side of the subplots of the figure
		&#39;figure.subplot.right&#39;   : 0.95,    # the right side of the subplots of the figure
		&#39;figure.subplot.bottom&#39;  : 0.12,   # the bottom of the subplots of the figure
		&#39;figure.subplot.top&#39;     : 0.92,    # the top of the subplots of the figure
		&#39;figure.subplot.wspace&#39;  : 0.2,    # the amount of width reserved for blank space between subplots
		&#39;figure.subplot.hspace&#39;  : 0.2,    # the amount of height reserved for white space between subplots
		&#39;figure.figsize&#39;: (12, 12)
           }
plt.rcParams.update(params)
	
def sm_hist(data, delta=5, n_bin=None, range_=None):
	dataMin = np.floor(data.min())
	dataMax = np.ceil(data.max())
	n_bin = np.ceil(1.*(dataMax-dataMin) / delta)
	range_ = (dataMin, dataMin + n_bin * delta)
	counts, bin_edges = np.histogram(data, n_bin, range_, density = False)
	# These two lines double the points let you make the histogram
	counts = np.ravel(zip(counts,counts)) 
	bin_edges = np.ravel(zip(bin_edges,bin_edges))
	counts = np.hstack((np.array([0]), counts, np.array([0])))
	return counts, bin_edges
	
	
def sm_hist2(data, delta=5):
	dataMin = np.floor(data.min())
	dataMax = np.ceil(data.max())
	n_bin = np.ceil(1.*(dataMax-dataMin) / delta) + 1
	idxs = ((data  - dataMin) / delta).astype(int)
	counts = np.zeros(n_bin) 
	bin_edges = np.arange(dataMin, dataMax+delta, delta)
	for idx in idxs:
		counts[idx] += 1
	print counts
	# These two lines double the points let you make the histogram
	counts = np.ravel(zip(counts,counts)) 
	bin_edges = np.ravel(zip(bin_edges,bin_edges))
	counts = np.hstack((np.array([0]), counts))
	bin_edges = np.hstack((bin_edges, bin_edges[-1]))
	return counts, bin_edges

def singlePlotScatter(xData, yData, nRows, nCols, x0, y0, rowspan, colspan):
	ax = plt.subplot2grid((nRows,nCols), (x0,y0), rowspan, colspan)
	ax.set_xlabel(&amp;quot;x label&amp;quot;)
	ax.set_ylabel(&amp;quot;y label&amp;quot;)
	ax.set_xscale(&amp;quot;linear&amp;quot;)
	ax.set_yscale(&amp;quot;linear&amp;quot;)
	ax.set_title(&amp;quot;Plot title&amp;quot;)
	ax.title.set_y(1.02) # adjust title position
	ax.xaxis.grid(True, which=&amp;quot;both&amp;quot;)
	ax.yaxis.grid(True, which=&amp;quot;major&amp;quot;)
	ax.plot(xData, yData, 
			color = &amp;quot;green&amp;quot;, 
			markeredgewidth = 0.8, 
			linestyle = &#39;-&#39;, 
			linewidth = 2,
			marker = &#39;o&#39;, 
			markersize = 1, 
			label = &amp;quot;label&amp;quot;)
	return ax

def singlePlotHist(yData, nRows, nCols, x0, y0, rowspan, colspan):
	ax = plt.subplot2grid((nRows,nCols), (x0,y0), rowspan, colspan)
	ax.set_xlabel(&amp;quot;x label&amp;quot;)
	ax.set_ylabel(&amp;quot;y label&amp;quot;)
	ax.set_xscale(&amp;quot;linear&amp;quot;)
	ax.set_yscale(&amp;quot;linear&amp;quot;)
	ax.set_title(&amp;quot;Plot title&amp;quot;)
	ax.title.set_y(1.02) # adjust title position
	ax.xaxis.grid(True, which=&amp;quot;both&amp;quot;)
	ax.yaxis.grid(True, which=&amp;quot;major&amp;quot;)
	counts, bin_edges = sm_hist2(yData, delta = 10)
	ax.set_ylim((0, 1.2*counts.max()))
	
	ax.plot(bin_edges, counts, 
				color = &amp;quot;blue&amp;quot;,
				alpha = 0.8,
				linewidth = 2,
				antialiased = True,
				zorder = 3 
				)
	ax.fill(bin_edges, counts, 
				alpha = 0.5,
				hatch = &amp;quot;/&amp;quot;,
				edgecolor = &amp;quot;blue&amp;quot;,
				facecolor = &amp;quot;white&amp;quot;,
				antialiased = True, 
				label = &amp;quot;whatever you want&amp;quot;
				)
	ax.legend(loc=&#39;upper left&#39;, numpoints = 1, prop=font_manager.FontProperties(size=18)).draw_frame(False)

	return ax

if __name__ == &amp;quot;__main__&amp;quot;:
	tt = time.time()
	xData = np.arange(100) 
	yData = np.random.randint(0, 100, size=100) + np.sin(np.arange(100))
	
	fig = plt.figure()
	fig.suptitle(&amp;quot;Figure title&amp;quot;)
	axs = []
	nPlots = 2
	
	axs.append(singlePlotScatter(xData, yData, nRows=1, nCols=2, x0=0, y0=0, rowspan=1, colspan=1))
	axs.append(singlePlotHist(yData, nRows=1, nCols=2, x0=0, y0=1, rowspan=1, colspan=1))
	
	fig.set_size_inches(20, 10)
	plt.savefig(&amp;quot;./grid.png&amp;quot;, dpi=100)
	plt.close(fig)
	
	print &amp;quot;Done in &amp;quot;, time.time()-tt, &amp;quot; seconds.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;../../files/grid.png&#34; alt=&#34;Matplotlib plot&#34; title=&#34;Mathplotlib plot&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Change a line in all of your files at once</title>
      <link>http://brunettoziosi.eu/posts/change-a-line-in-all-of-your-files-at-once/</link>
      <pubDate>Tue, 23 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://brunettoziosi.eu/posts/change-a-line-in-all-of-your-files-at-once/</guid>
      <description>&lt;p&gt;Sometimes you need to change a single line in a lot of files. May be you made a mistake in your configuration files or you want to change the number of initial conditions to be generated automatically.&lt;br /&gt;
With &lt;code&gt;sed&lt;/code&gt; it is super-easy:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sed -i &#39;s/&amp;quot;Runs&amp;quot;: 10,/&amp;quot;Runs&amp;quot;: 50,/g&#39; *.txt
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Linux network monitoring</title>
      <link>http://brunettoziosi.eu/posts/network-monitoring/</link>
      <pubDate>Mon, 01 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://brunettoziosi.eu/posts/network-monitoring/</guid>
      <description>&lt;p&gt;A list of programs to monitor your network connection and find out which process is eating bandwith
and how to run them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo nethogs eth0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lsof -i -n -P&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo iftop -i eth0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nmon&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>rsync like a pro</title>
      <link>http://brunettoziosi.eu/posts/rsync-like-a-pro/</link>
      <pubDate>Mon, 07 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://brunettoziosi.eu/posts/rsync-like-a-pro/</guid>
      <description>&lt;p&gt;To sync two folder on two different machines with a non-default ssh port:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rsync -avuh --progress --stats --rsh=&#39;ssh -p&amp;lt;your-ssh-port&amp;gt;&#39; user@source:path user@dest:path
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you need it, &lt;code&gt;-c&lt;/code&gt; flag will force files checksum to be sure they are the same or not. It takes a lot of time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Best Golang installation</title>
      <link>http://brunettoziosi.eu/posts/best-golang-installation/</link>
      <pubDate>Thu, 19 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://brunettoziosi.eu/posts/best-golang-installation/</guid>
      <description>&lt;p&gt;Best way to install Golang, from:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.labix.org/2013/06/15/in-flight-deb-packages-of-go&#34;&gt;http://blog.labix.org/2013/06/15/in-flight-deb-packages-of-go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dave.cheney.net/2012/09/08/an-introduction-to-cross-compilation-with-go&#34;&gt;http://dave.cheney.net/2012/09/08/an-introduction-to-cross-compilation-with-go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Assuming you already have the correct environment and you are on an ubuntu workstation.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Download and install &lt;code&gt;godeb&lt;/code&gt; if you haven&amp;rsquo;t already done.&lt;/li&gt;
&lt;li&gt;Then with &lt;code&gt;godeb list&lt;/code&gt; and godeb install &lt;version&gt; install your favourite Go version (the last, obviously!:P).&lt;/li&gt;
&lt;li&gt;To be able to cross-compile with the new installed Go:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo -i
cd /usr/local/go/src
git clone git://github.com/davecheney/golang-crosscompile.git
source golang-crosscompile/crosscompile.bash
go-crosscompile-build-all
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;done.&lt;/p&gt;

&lt;p&gt;If you need a non-root installation or want to do everything from scratch it is
just easy as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://go.googlesource.com/go
cd go
git checkout go1.4.1 # or the latest release
cd src
./all.bash
git clone git://github.com/davecheney/golang-crosscompile.git
source golang-crosscompile/crosscompile.bash
go-crosscompile-build-all
cd ../../
mv go goroot
mkdir -p gopath/bin
mkdir -p gopath/docs
mkdir -p gopath/pkg
mkdir -p gopath/src/github.com/$USER # here you will put your github project sources
echo &amp;quot;export GOROOT=/home/$USER/goroot&amp;quot; &amp;gt;&amp;gt; ~/.bashrc
echo &amp;quot;export GOPATH=/home/$USER/gopath&amp;quot; &amp;gt;&amp;gt; ~/.bashrc
echo &amp;quot;export PATH=$PATH:$GOROOT/bin:$GOPATH/bin&amp;quot; &amp;gt;&amp;gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Ssh keys exchange</title>
      <link>http://brunettoziosi.eu/posts/ssh-keys-exchange/</link>
      <pubDate>Fri, 31 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://brunettoziosi.eu/posts/ssh-keys-exchange/</guid>
      <description>&lt;p&gt;A superfast note on how to exchange ssh keys in order to connect without
the need to remember a password.&lt;/p&gt;

&lt;p&gt;On both the computer (&lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ssh-keygen
ssh-copy-id -i you@B
ssh you@B # to check if it works
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If it doesn&amp;rsquo;t work try:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat .ssh/id_rsa.pub | ssh b@B &#39;cat &amp;gt;&amp;gt; .ssh/authorized_keys&#39;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Blog pages index generator</title>
      <link>http://brunettoziosi.eu/posts/blog-pages-index-generator/</link>
      <pubDate>Fri, 29 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://brunettoziosi.eu/posts/blog-pages-index-generator/</guid>
      <description>&lt;p&gt;Since some time I was looking for a way to automatically generate an
&lt;a href=&#34;../stories/index.html&#34;&gt;index&lt;/a&gt; for the
pages of this blog!
This would rebuild my index every time keeping automatically track of new or
deleted pages.&lt;/p&gt;

&lt;p&gt;Eventually I had time to try, and I tried in Go!:)&lt;/p&gt;

&lt;p&gt;This is the first attempt, it could be better, but it works!&lt;/p&gt;

&lt;p&gt;Filesystem walk from
&lt;a href=&#34;http://stackoverflow.com/questions/12657365/extracting-directory-hierarchy-using-go-language&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;path/filepath&amp;quot;
	&amp;quot;fmt&amp;quot;
	&amp;quot;log&amp;quot;
	&amp;quot;os&amp;quot;
	&amp;quot;strings&amp;quot;
	&amp;quot;time&amp;quot;
)

func main() {
	tGlob0 := time.Now()
	
	// Create output file
	fOut, err := os.Create(&amp;quot;index.md&amp;quot;)
	if err != nil {
        panic(err)
    }
    defer fOut.Close()
	
	// Define and implement what to do with path pieces
	visit := func(path string, info os.FileInfo, err error) error {
		// Split dir path from file name
		dir, file := filepath.Split(path)
		// Init list line string
		line := &amp;quot;&amp;quot;
		// Init and compute the level of indentation based on dit level 
		indent := &amp;quot;&amp;quot;
		for i:=0; i &amp;lt; len(strings.Split(dir, &amp;quot;/&amp;quot;))-1; i++ {
			indent = indent + &amp;quot;    &amp;quot;
		}
		// If I reach a new dir
        if info.IsDir() {
			// Ignore local dir (exit function)
			if strings.Contains(path, &amp;quot;.&amp;quot;) {
				return nil
			}
			// Create line for page with name == dirName
            line = indent + &amp;quot;* [&amp;quot;+strings.Title(filepath.Base(path))+&amp;quot;](&amp;quot;+filepath.Join(path, filepath.Base(path)+&amp;quot;.html)&amp;quot;)+&amp;quot;\n&amp;quot;
        // If I found a new file
		} else {
			// Only consider md files
			if strings.HasSuffix(file, &amp;quot;md&amp;quot;){
				fileBase := strings.TrimSuffix(file, &amp;quot;.md&amp;quot;)
				// Ignore files with name == dirName
				if fileBase == filepath.Base(dir) {
					return nil
				}
				// Create line
				linkName := strings.Replace(strings.Title(strings.Replace(fileBase, &amp;quot;-&amp;quot;, &amp;quot;_&amp;quot;, -1)), &amp;quot;_&amp;quot;, &amp;quot; &amp;quot;, -1)
			    line = indent + &amp;quot;* [&amp;quot;+ linkName +&amp;quot;](&amp;quot;+filepath.Join(dir, strings.Replace(file, &amp;quot;.md&amp;quot;, &amp;quot;.html&amp;quot;, 1))+&amp;quot;)\n&amp;quot;
			} else {	
				return nil
			}
        }
        // Print line to file
//         fmt.Print(line)
		if _, err = fOut.WriteString(line); err != nil {
			log.Fatal(err)
		}
        return nil
    }
    
    header := `&amp;lt;!-- 
.. link: 
.. description: 
.. tags: 
.. date: 2013/09/03 12:24:24
.. title: for future references summary
.. slug: index
--&amp;gt;

* [Blog](../index.html)
`
    
    if _, err = fOut.WriteString(header); err != nil {
			log.Fatal(err)
	}
    
    // Walk through folders
	err = filepath.Walk(&amp;quot;./&amp;quot;, visit)
    if err != nil {
        log.Fatal(err)
    }
	

	tGlob1 := time.Now()
	fmt.Println()
	log.Println(&amp;quot;Recreated pages index in &amp;quot;, tGlob1.Sub(tGlob0))
} //END MAIN


&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Latex conditional compilation</title>
      <link>http://brunettoziosi.eu/posts/latex-conditional-compilation/</link>
      <pubDate>Fri, 13 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://brunettoziosi.eu/posts/latex-conditional-compilation/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s a long time I&amp;rsquo;m looking for a way to conditional-compiling my
&lt;a href=&#34;http://en.wikipedia.org/wiki/Beamer_(LaTeX&#34;&gt;Beamer&lt;/a&gt;) presentation in order to
decide on the fly if I want to print an handout version of the presentation.&lt;/p&gt;

&lt;!--TEASER_END--&gt;

&lt;p&gt;Inside the &lt;code&gt;.tex&lt;/code&gt; file you have to write&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-latex&#34;&gt;\ifdefined\HANDOUT
  \setbeameroption{show notes} %un-comment to see the notes
  \usepackage{pgfpages}
  \pgfpagesuselayout{8 on 1}[a4paper]%, landscape]
\fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where the &lt;code&gt;pgfpages&lt;/code&gt; package is used to print 8 slide per page.&lt;br /&gt;
Before this if you want you can put &lt;code&gt;\newcommand*{\HANDOUT}{}%&lt;/code&gt;
to decide in the source if you want the handout version or not&amp;hellip;&lt;br /&gt;
&amp;hellip; or you can decide it via command line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pdflatex -jobname=handout.pdf  &amp;quot;\def\HANDOUT{}\input{sourcefile.tex}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Super-basic file parsing in Go</title>
      <link>http://brunettoziosi.eu/posts/super-basic-file-parsing-in-go/</link>
      <pubDate>Thu, 05 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://brunettoziosi.eu/posts/super-basic-file-parsing-in-go/</guid>
      <description>&lt;p&gt;I want to parse all the files in a folder starting with a certain prefix
searching for the lines containing a certain string.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;package main&lt;/code&gt; tells go that this source will be a main file, not a library/module.
Then, we import the packages we need. If a package is not still needed, go will
throw an error.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;//&lt;/code&gt; or &lt;code&gt;/* */&lt;/code&gt; are, respectively, the one-line and multi-line comments.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;bufio&amp;quot; // buffered input/output
	&amp;quot;compress/gzip&amp;quot; // compressed files handling
	&amp;quot;log&amp;quot; // logging
	&amp;quot;os&amp;quot; // OS related utilities
	&amp;quot;time&amp;quot; // timing
	&amp;quot;strings&amp;quot; // strings handling
	&amp;quot;path/filepath&amp;quot; // path handling
	&amp;quot;fmt&amp;quot; // basic printing
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The main body of the program has to be in the &lt;code&gt;main&lt;/code&gt; function.
We would also like to know the time needed to execute the program so we use
&lt;code&gt;tGlob0 := time.Now()&lt;/code&gt; to keep track of the time we launch the program.&lt;br /&gt;
We also print a help message in case the number of arguments provided
do not match the needed ones&amp;hellip;. id they are wrong, googd luck!:P&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {
	
	helpMessage :=`Hi! To use this program you must provide
	1 - the path
	2 - the file prefix
	3 - the output file
	4 - the string to be searched.`
	
	if len(os.Args) &amp;lt; 5{
		fmt.Println(helpMessage)
		os.Exit(0)
	}

	tGlob0 := time.Now()
 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go can create variables in two ways, by declaring them before or by assignement directly.
To have a clearer view of what is going on I will declare the variables before except
for &lt;code&gt;tGlob0&lt;/code&gt; and &lt;code&gt;tGlob1&lt;/code&gt;. If you want to know the type of a variable, you can
create it by assignement and then inspect its type with the reflect package,
using &lt;code&gt;reflect.TypeOf(variable)&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;    var inPath string
    var prefix string
    var searchString string
    var outFile string
    var inFiles []string
    var inFile string
    var extString []string
    var ext string
    var PID int 
    var (fileStruct *os.File
    fOut *os.File)
    var err error
    var fZip *gzip.Reader
    var nReader *bufio.Reader
    var read_line string
```        

The `os` package provides the tools to interact with the OS, so we can retrieve the process
PID and the CLI arguments.        
    

````go
	PID = os.Getpid()
	log.Println(&amp;quot;Process PID is &amp;quot;, PID)	
	
	inPath = os.Args[1]
	prefix = os.Args[2]+&amp;quot;*&amp;quot;
	outFile = os.Args[3]
	searchString = os.Args[4]
	
	log.Println(&amp;quot;Parsing files in folder &amp;quot;, inPath, &amp;quot; selecting &amp;quot;, os.Args[2])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Glob&lt;/code&gt; function allows to search for the filenames matching a certain
 wildcard pattern.&lt;br /&gt;
 &lt;code&gt;defer&lt;/code&gt; is used to mark functions to be executed on function exit.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;	inFiles, err = filepath.Glob(filepath.Join(inPath, prefix))
	if err != nil {
		panic(err)
	}
	
	log.Println(&amp;quot;Searching for &amp;quot;, searchString, &amp;quot; in &amp;quot;, filepath.Join(inPath, prefix))
	log.Println(&amp;quot;Creating output file &amp;quot;, outFile)
	
	fOut, err = os.Create(outFile)
	if err != nil {
		panic(err)
	}
	defer fOut.Close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the following piece of code is possible to see how to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;work on strings&lt;/li&gt;
&lt;li&gt;write a counter that updates&lt;/li&gt;
&lt;li&gt;use the switch construct&lt;/li&gt;
&lt;li&gt;make an assignement in the if construct&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;	log.Println(&amp;quot;Starting main loop on file list of lenght &amp;quot;, len(inFiles))
	for fileIdx := range inFiles {
		
		inFile = inFiles[fileIdx]
		extString = strings.Split(inFile, &amp;quot;.&amp;quot;)
		ext = extString[len(extString)-1]

		// Write an updating counter
		fmt.Print(&amp;quot;Completed: &amp;quot;, 100. * fileIdx / len(inFiles), &amp;quot;% \r&amp;quot;)
		
		// Creating file object
		if fileStruct, err = os.Open(inFile); err != nil {
			log.Fatal(os.Stderr, &amp;quot;%v, Can&#39;t open %s: error: %s\n&amp;quot;, os.Args[0], inFile, err)
			os.Exit(1)
		}
		defer fileStruct.Close()
		
		switch ext {
			case &amp;quot;dat&amp;quot;: {
				nReader = bufio.NewReader(fileStruct)
			}
			case &amp;quot;txt&amp;quot;:{
				nReader = bufio.NewReader(fileStruct)
			}
			case &amp;quot;gz&amp;quot;: {
				fZip, err = gzip.NewReader(fileStruct)
				if err != nil {
				log.Fatal(os.Stderr, &amp;quot;%v, Can&#39;t open %s: error: %s\n&amp;quot;, os.Args[0], inFile, err)
				os.Exit(1)
				}
				nReader = bufio.NewReader(fZip)
			}
			default: {
				log.Fatal(&amp;quot;Unrecognized file &amp;quot;, inFile)
			}
		}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And yes, no &lt;code&gt;while&lt;/code&gt; but infinite loops with &lt;code&gt;for&lt;/code&gt;.&lt;br /&gt;
Then we read the file line by line and write the line if we find a certain
string inside it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;        for {
            if read_line, err = nReader.ReadString(&#39;\n&#39;); err != nil {
            log.Println(&amp;quot;Done reading file with err&amp;quot;, err)
            break
            }
//          if (strings.Contains(read_line, &amp;quot;name =&amp;quot;) || strings.Contains(read_line, &amp;quot;i =&amp;quot;)) {//&amp;amp;&amp;amp; strings.Contains(read_line, &amp;quot;&amp;lt;&amp;quot;){
                if strings.Contains(read_line, searchString){
                _, err = fOut.WriteString(read_line)
                }
        }
    
        // flush 
        fOut.Sync()
        fOut.Close()
    }
    
    
    log.Println()
    tGlob1 := time.Now()
    log.Println(&amp;quot;Wall time for all &amp;quot;, tGlob1.Sub(tGlob0))
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Check external ip</title>
      <link>http://brunettoziosi.eu/posts/check-external-ip/</link>
      <pubDate>Tue, 03 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://brunettoziosi.eu/posts/check-external-ip/</guid>
      <description>

&lt;p&gt;This is the first attempt to check the external ip of a linux box.
This means, for example, the public ip address of our modem if we are connected
to the home Wi-Fi.&lt;br /&gt;
I will try to do this in Python and Go. Of course these are raw attempts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; new version &lt;a href=&#34;https://github.com/brunetto/fip&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;python:a03aac959a8b7e6a11a32e871f3dca9a&#34;&gt;Python&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python
import re, os, time

# In internet they say that
# ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$
# is better but I find this useful

print &amp;quot;Check external ip&amp;quot;
print &amp;quot;This script need curl and the Python modules re, os and time&amp;quot;

# Compile regex
reg = re.compile(&#39;\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}&#39;)

# Query until stop, hoping the site won&#39;t stop us
while True:
	# Ask the site for ip
	string = os.popen(&amp;quot;curl -s &#39;http://checkip.dyndns.org&#39;&amp;quot;).read()
	res = reg.search(string)
	if res == None:
		print &amp;quot;Error, ip not found, continue, ...&amp;quot;
	else:
		print ip
		ip = res.group(0)
		# Recreate the ip file and write the ip
		ipFile = open(&amp;quot;ip.dat&amp;quot;, &#39;w&#39;)
		ipFile.write(ip)
		ipFile.flush()
		ipFile.close()
	# Wait
	time.sleep(5)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;go:a03aac959a8b7e6a11a32e871f3dca9a&#34;&gt;Go&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	//&amp;quot;io/ioutil&amp;quot;
    &amp;quot;os&amp;quot;
    &amp;quot;log&amp;quot;
    &amp;quot;fmt&amp;quot;
    &amp;quot;time&amp;quot;
    &amp;quot;os/exec&amp;quot;
    &amp;quot;regexp&amp;quot;
)

// check the errors
func check(e error) {
    if e != nil {
        panic(e)
    }
}

func main() {

	// set ip download command
	
	command := &amp;quot;/usr/bin/curl&amp;quot;
	args := &amp;quot;http://checkip.dyndns.org&amp;quot;
	
	// compile regexp
	var digitsRegexp = regexp.MustCompile(`\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}`)
	
	// infinite loop to update the ip
    for ;;{
		// download ip string
		out, err := exec.Command(command, args).Output()
		if err != nil {
			log.Fatal(err)
		}
		
		// out is a binary buffer, convert into string
		ipString := string(out)
		
		// search for ip
		ipRes := digitsRegexp.FindString(ipString)
		fmt.Println(ipRes)
		
		// convert string to byte (found a better method)
		//ipByte := []byte(ipRes)
		//ioutil.WriteFile(&amp;quot;ip.dat&amp;quot;, ipByte, 0644)
		
		// create a file, it implements the Writer interface
		f, err := os.Create(&amp;quot;ip.dat&amp;quot;)
		
		// check for errors
		check(err)
		
		// close file before exit in case of problems
		defer f.Close()
		
		// write the string, discard (_) the number of bytes written
		_, err = f.WriteString(ipRes)
		// flush 
		f.Sync()
		f.Close()
		// wait
		time.Sleep(5 * time.Second)
    }
}

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Go installation from source</title>
      <link>http://brunettoziosi.eu/posts/cosmological-simulations-4-moving-the-particles/</link>
      <pubDate>Fri, 30 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://brunettoziosi.eu/posts/cosmological-simulations-4-moving-the-particles/</guid>
      <description>&lt;p&gt;Summary of the Go installation instruction from source as presented in:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://golang.org/doc/install&#34;&gt;Go installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://golang.org/doc/install/source&#34;&gt;Go installation from source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://golang.org/doc/code.html&#34;&gt;Write Go code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--TEASER_END--&gt;

&lt;p&gt;The installation path will be &lt;code&gt;/usr/local/go&lt;/code&gt; and the workspace in
&lt;code&gt;$HOME/Code/go&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /usr/local
hg clone -u release https://code.google.com/p/go
cd go/src
./all.bash
echo &amp;quot;export PATH=$PATH:/usr/local/go/bin&amp;quot; &amp;gt;&amp;gt; $HOME/.bashrc
echo &amp;quot;export GOPATH=$HOME/Code/go/&amp;quot; &amp;gt;&amp;gt; $HOME/.bashrc
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>