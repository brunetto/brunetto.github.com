<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>for future reference... (N-body)</title><link>brunettoziosi.eu</link><description></description><atom:link href="categories/n-body.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Sat, 27 Sep 2014 13:56:36 GMT</lastBuildDate><generator>Nikola &lt;http://getnikola.com/&gt;</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>StarLab-GPU installation</title><link>posts/starlab-gpu-installation.html</link><description>&lt;div&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="stories/research/utils/starlab-gpu-old-guide.html"&gt;Click here for the old guide!!!&lt;/a&gt;    &lt;/li&gt;
&lt;li&gt;2014/09/16: updated with installation instruction for g2@Swinburne and some troubleshooting.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; if you want to compile starlab &lt;strong&gt;without GPU support&lt;/strong&gt;, you only need to     &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ignore the "&lt;code&gt;sapporo&lt;/code&gt;"  and "&lt;code&gt;CUDA&lt;/code&gt;" instructions&lt;/li&gt;
&lt;li&gt;rename &lt;code&gt;starlab/local/grape.sh&lt;/code&gt; to &lt;code&gt;starlab/local/_grape.sh&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;substitute &lt;code&gt;configure --without-f77&lt;/code&gt; with &lt;code&gt;configure --with-grape=no --without-f77&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;in case you can't &lt;code&gt;make&lt;/code&gt; succesfully may be you need to copy the folder 
&lt;code&gt;starlab/src/gfx&lt;/code&gt; and do not make clean&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Well, probably you landed here searching information about StarLab, how to 
install it, how to run it, how prevent it to harm your cat.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DISCLAIMER 1:&lt;/strong&gt; I won't promise anything about your cat but I will try to help you having a 
reasonable well running installation of StarLab.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DISCLAIMER 2:&lt;/strong&gt; I'm not a programmer, I'm not a system administrator and I don't even 
know how to program in CUDA (yet). Maybe something here is wrong ore outdated. 
I'm only giving you some of the experienced I collected in n+1 times I installed StarLab. 
Nothin less, nothing more.  &lt;br&gt;
Also note that most of the knowledge I put here come 
from my &lt;a href="http://web.pd.astro.it/mapelli/"&gt;supervisor&lt;/a&gt;.  &lt;br&gt;
I also thanks Mario Spera for the usefull advices.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DISCLAIMER 3:&lt;/strong&gt; StarLab still seems to &lt;strong&gt;always&lt;/strong&gt; crash if you try to simulate a system 
with more than ~6000 binaries.&lt;/p&gt;
&lt;h3&gt;StarLab&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://www.sns.ias.edu/~starlab/"&gt;StarLab&lt;/a&gt; is "A Software Environment for Collisional Stellar Dynamics".
&lt;a href="http://www.sns.ias.edu/~starlab/"&gt;Here&lt;/a&gt; you can find useful information about it that 
is not useful to rewrite here, so have a look and then come back!:)&lt;/p&gt;
&lt;p class="more"&gt;&lt;a href="posts/starlab-gpu-installation.html"&gt;Read more…&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>GPU</category><category>simulations</category><category>N-body</category><guid>posts/starlab-gpu-installation.html</guid><pubDate>Tue, 20 Aug 2013 09:34:11 GMT</pubDate></item><item><title>PhD question #4: calculate the value of M*</title><link>posts/phd-question-4-calculate-the-value-of-m.html</link><description>&lt;div&gt;&lt;p&gt;Some post ago &lt;a href="posts/phd-question-1-m.html"&gt;I've written about M*&lt;/a&gt;, the typical non-linear mass collapsing at the redshift we are considering. Now I have to find a value for it.     &lt;/p&gt;
&lt;p class="more"&gt;&lt;a href="posts/phd-question-4-calculate-the-value-of-m.html"&gt;Read more…&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>astro/physics</category><category>code</category><category>Computer</category><category>Cosmology</category><category>N-body</category><category>PhD</category><category>simulation</category><category>imported</category><guid>posts/phd-question-4-calculate-the-value-of-m.html</guid><pubDate>Tue, 03 Apr 2012 00:00:00 GMT</pubDate></item><item><title>Never never never...</title><link>posts/never-never-never.html</link><description>&lt;div&gt;&lt;p&gt;... never forget that the result of the "integer" division 4/3 is equal to 1 instead of 1.333333333... in, I think, almost all programming languages. This is because it's the division between two integers. Only in Python3 it will give what we expect. It's a detail, and I usually remember it and I write 4./3 (4. is of type "float"), but this time I forget it, and I have obtained wrong results for a week. I didn't understand why and I've searched any possible complex and deep explanation. But it was one of the most simple and stupid errors!:P&lt;/p&gt;
&lt;p&gt;Moreover, always check every new result with the older ones. I didn't do this, and I find strange results after two months of computing. Next time, remember to check EVERY new results!&lt;/p&gt;&lt;/div&gt;</description><category>astro/physics</category><category>Cosmology</category><category>N-body</category><category>PhD</category><category>imported</category><guid>posts/never-never-never.html</guid><pubDate>Tue, 03 Apr 2012 00:00:00 GMT</pubDate></item><item><title>Cosmological simulations #9: Gadget-2 (N-body part)</title><link>posts/cosmological-simulations-9-gadget-2-n-body-part.html</link><description>&lt;div&gt;&lt;p&gt;Here I would like to do a brief presentation of the main features of Gadget-2.  &lt;br&gt;
Gadget-2 (&lt;a href="http://www.mpa-garching.mpg.de/gadget/" target="_blank" title="Gadget2 homepage"&gt;here&lt;/a&gt;, &lt;a href="http://www.brunettoziosi.eu/blog/wordpress/my-first-gadget2-tests/" target="_blank" title="My first Gadget-2 tests"&gt;here&lt;/a&gt; and &lt;a href="http://onlinelibrary.wiley.com/doi/10.1111/j.1365-2966.2005.09655.x/abstract;jsessionid=DED86CDB5CD8A572F3631F0C42828086.d01t03" target="_blank" title="Gadget-2 paper"&gt;here&lt;/a&gt;) is a cosmological simulation code developed primarily by &lt;a href="http://www.mpa-garching.mpg.de/~volker/" target="_blank" title="Volker Springel's homepage"&gt;Volker Springel&lt;/a&gt;. It is a &lt;a href="http://www.brunettoziosi.eu/blog/wordpress/cosmological-simulations-3-calculating-the-force/" target="_blank" title="Cosmological simulations #3: force calculation!"&gt;TreePM&lt;/a&gt; code so it splits forces between long-range (PM part) and short-range (tree part using multipole expansion to approximate the force of distant particles groups).    &lt;/p&gt;
&lt;p class="more"&gt;&lt;a href="posts/cosmological-simulations-9-gadget-2-n-body-part.html"&gt;Read more…&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>astro/physics</category><category>Cosmology</category><category>domain decomposition</category><category>Gadget2</category><category>integrator</category><category>leapfrog</category><category>MPI</category><category>N-body</category><category>PhD</category><category>PM</category><category>simulation</category><category>springel</category><category>time-step</category><category>tree</category><category>TreePM</category><guid>posts/cosmological-simulations-9-gadget-2-n-body-part.html</guid><pubDate>Mon, 20 Feb 2012 00:00:00 GMT</pubDate></item><item><title>Learning C from simulations, #1</title><link>posts/learning-c-from-simulations-1.html</link><description>&lt;div&gt;&lt;p&gt;Coming from the beauty of Python, now I have to learn C/C++ again (after the course some semesters ago!:P) because of my work. I'm doing this working with the simulation code Gadget2 and the ICs (initial conditions) generator N-GenIC. Here I would like to pin the serious and less serious things I'm learning for my and maybe other's usefulness and fun!    &lt;/p&gt;
&lt;p class="more"&gt;&lt;a href="posts/learning-c-from-simulations-1.html"&gt;Read more…&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>astro/physics</category><category>C</category><category>code</category><category>N-body</category><category>numerical</category><category>PhD</category><category>program</category><category>simulations</category><category>imported</category><guid>posts/learning-c-from-simulations-1.html</guid><pubDate>Mon, 20 Feb 2012 00:00:00 GMT</pubDate></item><item><title>Learning C from simulations, #3: C horrors!</title><link>posts/learning-c-from-simulations-3-c-horrors.html</link><description>&lt;div&gt;&lt;p&gt;Yeah, this is post #3! Post #2 is "work in progress" and it will be on FFTs!    &lt;/p&gt;
&lt;p&gt;Today I was trying to understand what this piece of code do:    &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;Nmesh&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="n"&gt;seedtable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Nmesh&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x7fffffff&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;gsl_rng_uniform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random_generator&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="n"&gt;seedtable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Nmesh&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x7fffffff&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;gsl_rng_uniform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random_generator&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="n"&gt;seedtable&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;Nmesh&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Nmesh&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x7fffffff&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;gsl_rng_uniform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random_generator&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="n"&gt;seedtable&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;Nmesh&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Nmesh&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x7fffffff&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;gsl_rng_uniform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random_generator&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="n"&gt;seedtable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Nmesh&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Nmesh&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x7fffffff&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;gsl_rng_uniform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random_generator&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="n"&gt;seedtable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Nmesh&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Nmesh&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x7fffffff&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;gsl_rng_uniform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random_generator&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="n"&gt;seedtable&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;Nmesh&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Nmesh&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Nmesh&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x7fffffff&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;gsl_rng_uniform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random_generator&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="n"&gt;seedtable&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;Nmesh&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Nmesh&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Nmesh&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x7fffffff&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;gsl_rng_uniform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random_generator&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p class="more"&gt;&lt;a href="posts/learning-c-from-simulations-3-c-horrors.html"&gt;Read more…&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>astro/physics</category><category>C</category><category>code</category><category>N-body</category><category>numerical</category><category>PhD</category><category>program</category><category>simulations</category><category>imported</category><guid>posts/learning-c-from-simulations-3-c-horrors.html</guid><pubDate>Mon, 20 Feb 2012 00:00:00 GMT</pubDate></item><item><title>My first Gadget2 tests</title><link>posts/my-first-gadget2-tests.html</link><description>&lt;div&gt;&lt;p&gt;This post is about my first experience with the cosmological simulation code &lt;a href="http://www.mpa-garching.mpg.de/gadget/" title="Gadget2"&gt;Gadget2&lt;/a&gt;. To start I followed the instructions found &lt;a href="http://astrobites.com/2011/04/02/installing-and-running-gadget-2/"&gt;here&lt;/a&gt;. All I'm going to write refers to an Ubuntu/Kubuntu 11.10 installation.    &lt;/p&gt;
&lt;p class="more"&gt;&lt;a href="posts/my-first-gadget2-tests.html"&gt;Read more…&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>astro/physics</category><category>code</category><category>Gadget2</category><category>Cosmology</category><category>millennium</category><category>N-body</category><category>PhD</category><category>simulation</category><category>imported</category><guid>posts/my-first-gadget2-tests.html</guid><pubDate>Sat, 07 Jan 2012 00:00:00 GMT</pubDate></item><item><title>GIF2 files Python reader</title><link>posts/gif2-files-python-reader.html</link><description>&lt;div&gt;&lt;p&gt;I create this script on the basis of the code to read the Millennium II data (the same used &lt;a href="http://elbrunz.wordpress.com/2011/12/02/from-binaries-to-hdf5-using-python/" title="From binaries to HDF5 using Python"&gt;here&lt;/a&gt;) provided by &lt;a href="http://mbk.ps.uci.edu/index.html" title="Mike Boylan-Kolchin"&gt;Mike Boylan-Kolchin&lt;/a&gt;. Being allowed to read the Fortran code to write and read the GIF2 files I could adapt this script to exactly fit this problem.    &lt;/p&gt;
&lt;p class="more"&gt;&lt;a href="posts/gif2-files-python-reader.html"&gt;Read more…&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>astro/physics</category><category>Cosmology</category><category>Master Thesis</category><category>millennium</category><category>N-body</category><category>Python</category><category>simulation</category><category>imported</category><guid>posts/gif2-files-python-reader.html</guid><pubDate>Tue, 06 Dec 2011 00:00:00 GMT</pubDate></item><item><title>Cosmological simulations #7: Limitations and some considerations</title><link>posts/cosmological-simulations-7-limitations-and-some-considerations.html</link><description>&lt;div&gt;&lt;p&gt;&lt;strong&gt;Limitations&lt;/strong&gt;    &lt;/p&gt;
&lt;p&gt;In the previous posts we encountered some of the limitations of cosmological  &lt;br&gt;
simulations. Let's review these in detail.  &lt;br&gt;
First, we can consider a simulation composed of a finite box in a bigger space but to represent a real system, this box shouldn't be isolated so we use the periodic boundary conditions (&lt;a href="http://brunettoziosi.blogspot.it/2011/11/cosmological-simulations-2-how.html" target="_blank" title="Cosmological simulations #2: how?"&gt;here&lt;/a&gt;). This means that all the space around the box is filled with images of the box itself: a particle that leaves the box from one side will come in  &lt;br&gt;
from the opposite side.   &lt;br&gt;
&lt;/p&gt;&lt;p class="more"&gt;&lt;a href="posts/cosmological-simulations-7-limitations-and-some-considerations.html"&gt;Read more…&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>astro/physics</category><category>Cosmology</category><category>Master Thesis</category><category>millennium</category><category>N-body</category><category>Python</category><category>simulation</category><category>imported</category><guid>posts/cosmological-simulations-7-limitations-and-some-considerations.html</guid><pubDate>Sun, 04 Dec 2011 00:00:00 GMT</pubDate></item><item><title>GIF2 substructures coordinates correction</title><link>posts/gif2-substructures-coordinates-correction.html</link><description>&lt;div&gt;&lt;p&gt;I used this script to change the coordinates of the substructures in the GIF2 simulation output from the center of mass coordinates to the global ones. The substructures were stored in our server in files referring to the index of the halo to which they belong and their coordinates were respect to the center of the halo. For each halo this script read the subhaloes center of mass coordinates in kpc and change them to global coordinates in Mpc managing the periodic boundary conditions .    &lt;/p&gt;
&lt;p class="more"&gt;&lt;a href="posts/gif2-substructures-coordinates-correction.html"&gt;Read more…&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>astro/physics</category><category>Cosmology</category><category>Master Thesis</category><category>millennium</category><category>N-body</category><category>Python</category><category>simulation</category><category>imported</category><guid>posts/gif2-substructures-coordinates-correction.html</guid><pubDate>Sun, 04 Dec 2011 00:00:00 GMT</pubDate></item></channel></rss>