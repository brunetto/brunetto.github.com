<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>for future reference... (N-body)</title><link>brunettoziosi.eu</link><description></description><atom:link href="categories/n-body.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Wed, 11 Jun 2014 17:27:43 GMT</lastBuildDate><generator>Nikola &lt;http://getnikola.com/&gt;</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>StarLab-GPU installation</title><link>posts/starlab-gpu-installation.html</link><description>&lt;div&gt;&lt;p&gt;&lt;a href="stories/research/utils/starlab-gpu-old-guide.html"&gt;Click here for the old guide!!!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Well, probably you landed here searching information about StarLab, how to 
install it, how to run it, how prevent it to harm your cat.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DISCLAIMER 1:&lt;/strong&gt; I won't promise anything about your cat but I will try to help you having a 
reasonable well running installation of StarLab.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DISCLAIMER 2:&lt;/strong&gt; I'm not a programmer, I'm not a system administrator and I don't even 
know how to program in CUDA (yet). Maybe something here is wrong ore outdated. 
I'm only giving you some of the experienced I collected in $n+1$ times I installed StarLab. 
Nothin less, nothing more.  &lt;br&gt;
Also note that most of the knowledge I put here come 
from my &lt;a href="http://web.pd.astro.it/mapelli/"&gt;supervisor&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;StarLab&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://www.sns.ias.edu/~starlab/"&gt;StarLab&lt;/a&gt; is "A Software Environment for Collisional Stellar Dynamics".
&lt;a href="http://www.sns.ias.edu/~starlab/"&gt;Here&lt;/a&gt; you can find useful information about it that 
is not useful to rewrite here, so have a look and then come back!:)&lt;/p&gt;
&lt;h3&gt;StarLab-GPU&lt;/h3&gt;
&lt;p&gt;Welcome back!!  &lt;br&gt;
Next step: StarLab was designed to run on &lt;a href="http://en.wikipedia.org/wiki/Gravity_Pipe"&gt;GRAPE&lt;/a&gt; 
but thanks to the &lt;a href="http://castle.strw.leidenuniv.nl/software/sapporo.html"&gt;Sapporo&lt;/a&gt; 
library you can run it on GPUs.    &lt;/p&gt;
&lt;p&gt;Now we will try to install a GPU-ready version of StarLab. To be honest, we run 
a &lt;strong&gt;private&lt;/strong&gt; version of StarLab for GPU with some customizations (if you are interested, 
see &lt;a href="http://arxiv.org/abs/1211.6441"&gt;Mapelli et al. 2013&lt;/a&gt;; &lt;a href="http://arxiv.org/abs/1301.4227"&gt;Mapelli &amp;amp; Bressan 2013&lt;/a&gt;).  &lt;br&gt;
Unfortunately you can't download it now, but I hope the differences in the installation 
process are negligible. Otherwise ask us for our StarLab version.  &lt;br&gt;
Because I'm not sure about what you will find in the public version os Sapporo and StarLab, 
I will show my version of the relevant files you need to install everything. 
The installation is done on a Ubuntu 14.04 workstation so change them accordingly to 
your OS. I will also provide some examples on what you need to install StarLab on 
the clusters I tested.    &lt;/p&gt;
&lt;p&gt;Let's start!!&lt;/p&gt;
&lt;h5&gt;Download&lt;/h5&gt;
&lt;p&gt;Be sure you have boost libraries, nVidia driver and CUDA correctly installed. 
You can try to check them using &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;locate cuda | grep nvcc&lt;/code&gt; (cuda compiler)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;locate cuda | grep include&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;locate cuda | grep include | grep toolkit&lt;/code&gt; (for the SDK files of the new release)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;locate cuda | grep lib | grep cudart&lt;/code&gt; (CUDA runtime)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;locate cuda | boost lib&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;locate cuda | boost include&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It could be also useful to have a copy of the old CUDA SDK. Yes, I know, it's a mess, 
but it's not my fault!:P&lt;/p&gt;
&lt;p&gt;Download &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.sns.ias.edu/~starlab/download/starlab.tar.gz"&gt;StarLab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://castle.strw.leidenuniv.nl/documents/Sapporo/sapporo161.tgz"&gt;Sapporo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and decompress the archives with &lt;code&gt;tar -xvf archiveName&lt;/code&gt;.  &lt;br&gt;
Try to have the following folder tree:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$SLPATH/slpack&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$SLPATH/slpack/NVIDIA&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$SLPATH/slpack/NVIDIA/NVIDIA_CUDA-5.0_Samples&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$SLPATH/slpack/NVIDIA/NVIDIA_GPU_Computing_SDK&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$SLPATH/slpack/sapporo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$SLPATH/slpack/starlab&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The NVIDIA folder is optional, but I would sugest to have with you alle the NVIDIA 
file you can find, soon or later you will need them. CUDA is continuosly changing, 
SDK is not toolkit, dependencies are different and broken between different versions.
We will try to survive and to have the most standard installation we can.    &lt;/p&gt;
&lt;p&gt;&lt;code&gt;$SLPATH&lt;/code&gt; should be the path where you put your StarLab installation.   &lt;br&gt;
I'm not sure about what you will find in the public version of StarLab and Sapporo.&lt;/p&gt;
&lt;h4&gt;Sapporo&lt;/h4&gt;
&lt;p&gt;Enter in the sapporo folder, and to be sure to start a clean installation run 
&lt;code&gt;make clean&lt;/code&gt;. 
Here you need to find:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Makefile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;compile.sh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;host_evaluate_gravity.cu&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;compile.sh&lt;/code&gt; is the script StarLab will run later to decide if you are worthy of 
its presence in your computer. If &lt;code&gt;compile.sh&lt;/code&gt; fail, StarLab won't install.    &lt;/p&gt;
&lt;p&gt;You also need to find somewhere (= in an old CUDA SKD?) &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cutil.h&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;multithreading.h&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and to copy them in this folder.    &lt;/p&gt;
&lt;p&gt;Open &lt;code&gt;host_evaluate_gravity.cu&lt;/code&gt; and change &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="c"&gt;#include &amp;lt;cutil.h&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;#include &amp;lt;multithreading.h&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="c"&gt;#include "cutil.h"&lt;/span&gt;
&lt;span class="c"&gt;#include "multithreading.h"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is to make Sapporo read the local version of &lt;code&gt;cutil.h&lt;/code&gt; and &lt;code&gt;multithreading.h&lt;/code&gt; 
in case your CUDA version does not support them anymore.     &lt;/p&gt;
&lt;p&gt;Now open &lt;code&gt;Makefile&lt;/code&gt; and fit &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;CXX&lt;/span&gt;  &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
&lt;span class="n"&gt;CC&lt;/span&gt;   &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;gcc&lt;/span&gt;
&lt;span class="n"&gt;NVCC&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nvcc&lt;/span&gt;
&lt;span class="n"&gt;CUDAPATH&lt;/span&gt;    &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="n"&gt;CUDAINCLUDE&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CUDAPATH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="n"&gt;BOOSTPATH&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;boost&lt;/span&gt; 
&lt;span class="n"&gt;BOOSTINCLUDE&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BOOSTPATH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to your case.  &lt;br&gt;
Open &lt;code&gt;compile.sh&lt;/code&gt; and be sure to have something like this:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="nv"&gt;flags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-DNGB

&lt;span class="nv"&gt;CUDAINC&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"-I/usr/include -I/usr/lib/nvidia-cuda-toolkit/include/"&lt;/span&gt;
&lt;span class="nv"&gt;CUDALIB&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"-L/usr/lib/x86_64-linux-gnu/"&lt;/span&gt;
&lt;span class="nv"&gt;CUDAFLAG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'-lcudart'&lt;/span&gt;
&lt;span class="nv"&gt;BOOSTINC&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'-I/usr/include/boost'&lt;/span&gt;
&lt;span class="nv"&gt;BOOSTLIB&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'-L/usr/lib/x86_64-linux-gnu/'&lt;/span&gt;
&lt;span class="nv"&gt;BOOSTFLAG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'-lboost_system -lboost_thread -lpthread'&lt;/span&gt;


g++ -O3 &lt;span class="nv"&gt;$flags&lt;/span&gt; -g -o test_gravity_block test_gravity_block.cpp -L. -lsapporo &lt;span class="nv"&gt;$CUDAINC&lt;/span&gt; &lt;span class="nv"&gt;$CUDALIB&lt;/span&gt; &lt;span class="nv"&gt;$CUDAFLAG&lt;/span&gt; &lt;span class="nv"&gt;$BOOSTINC&lt;/span&gt; &lt;span class="nv"&gt;$BOOSTLIB&lt;/span&gt; &lt;span class="nv"&gt;$BOOSTFLAG&lt;/span&gt;
g++ -O3 &lt;span class="nv"&gt;$flags&lt;/span&gt; -g -o test_gravity_N2ngb test_gravity_N2ngb.cpp -L. -lsapporo &lt;span class="nv"&gt;$CUDAINC&lt;/span&gt; &lt;span class="nv"&gt;$CUDALIB&lt;/span&gt; &lt;span class="nv"&gt;$CUDAFLAG&lt;/span&gt; &lt;span class="nv"&gt;$BOOSTINC&lt;/span&gt; &lt;span class="nv"&gt;$BOOSTLIB&lt;/span&gt; &lt;span class="nv"&gt;$BOOSTFLAG&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Try to compile with &lt;code&gt;make&lt;/code&gt;. If it works, try to tun &lt;code&gt;bash compile.sh&lt;/code&gt;. If this works too, 
then test sapporo with &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;./test_gravity_block 800&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;./test_gravity_block 800&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Be aware that a number (of particles) too small would crash the tests.&lt;/p&gt;
&lt;p&gt;Assuming &lt;code&gt;sapporo&lt;/code&gt; is ready, let's move to starlab.&lt;/p&gt;
&lt;h4&gt;StarLab&lt;/h4&gt;
&lt;p&gt;In StarLab the relevant files you have to worry about are &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sbin/sqrt.c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;configure&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;local/grape.sh&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Rename &lt;code&gt;sbin/sqrt.c&lt;/code&gt; to &lt;code&gt;sbin/sqrt.C&lt;/code&gt; otherwise 
you could have linker problems again the C math library.  &lt;br&gt;
Now open &lt;code&gt;configure&lt;/code&gt; and search for CUDA. Probably you won't find anything.   &lt;br&gt;
Search for &lt;code&gt;Check all named libraries for g6_open&lt;/code&gt;, you should find something like &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="c"&gt;#   Check all named libraries for g6_open() (GRAPE-6).&lt;/span&gt;

    &lt;span class="nv"&gt;grape6&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;no

    &lt;span class="k"&gt;for &lt;/span&gt;gl in &lt;span class="nv"&gt;$GRAPE_LIBS_&lt;/span&gt;; &lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="k"&gt;        &lt;/span&gt;&lt;span class="nv"&gt;as_ac_Lib&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"ac_cv_lib_${gl/-l/}''_g6_open_"&lt;/span&gt; | &lt;span class="nv"&gt;$as_tr_sh&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"$as_me:$LINENO: checking for g6_open_ in -l${gl/-l/}"&lt;/span&gt; &amp;gt;&amp;amp;5
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;modify it to include boost and CUDA like:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;for &lt;/span&gt;gl in &lt;span class="nv"&gt;$GRAPE_LIBS_&lt;/span&gt;; &lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="k"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;CUDAINC&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"-I/usr/include -I/usr/lib/nvidia-cuda-toolkit/include/"&lt;/span&gt;
    &lt;span class="nv"&gt;CUDALIB&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"-L/usr/lib/x86_64-linux-gnu/"&lt;/span&gt;
    &lt;span class="nv"&gt;CUDAFLAG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'-lcudart'&lt;/span&gt;
    &lt;span class="nv"&gt;BOOSTINC&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'-I/usr/include/boost'&lt;/span&gt;
    &lt;span class="nv"&gt;BOOSTLIB&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'-L/usr/lib/x86_64-linux-gnu/'&lt;/span&gt;
    &lt;span class="nv"&gt;BOOSTFLAG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'-lboost_system -lboost_thread -lpthread'&lt;/span&gt;

    &lt;span class="nv"&gt;LIBS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"$CUDAINC $CUDALIB $CUDAFLAG $BOOSTLIB $BOOSTFLAG -DNGB"&lt;/span&gt;

    &lt;span class="nv"&gt;as_ac_Lib&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"ac_cv_lib_${gl/-l/}''_g6_open_"&lt;/span&gt; | &lt;span class="nv"&gt;$as_tr_sh&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Last edit is on &lt;code&gt;local/grape.sh&lt;/code&gt; to let StarLab know where your sapporo installation is:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nv"&gt;GRAPE_LDFLAGS_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'-L$SLPATH/slpack/sapporo'&lt;/span&gt;
&lt;span class="nv"&gt;GRAPE_LIBS_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'-lsapporo'&lt;/span&gt;
&lt;span class="c"&gt;# For now, define this as `yes' for the AMD64 boxes only, `no' otherwise.&lt;/span&gt;
&lt;span class="nv"&gt;OLD_READ_NEIGHBOUR_LIST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;no
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Before compiling, if you want, you can check also &lt;code&gt;sapporo/sapporo.config&lt;/code&gt;.  &lt;br&gt;
Inside you will find something like that:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;524288
-1
0
1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where 524288 should be the maximum number of particles you can handle, -1 the number 
of CUDA devices to use (-1 means all? maybe...), 0 and 1 are the GPU number you want to use.   &lt;br&gt;
Recent CUDA seems to be smart enought to understand where to run without having to specify 
(but look after your cat!!!).    &lt;/p&gt;
&lt;p&gt;Alright!! If you managed to reach this point, very good. Last three commands. In the 
&lt;code&gt;starlab&lt;/code&gt; folder run &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;configure --without-f77&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;go out for a walk&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;make install&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you recompile StarLab AND/OR Sapporo, type &lt;code&gt;make clean&lt;/code&gt; 2 times. delete the files in 
&lt;code&gt;starlab/usr/bin&lt;/code&gt;, turn around 3 times, touch your nose and type &lt;code&gt;make&lt;/code&gt; two times. Then 
&lt;code&gt;make install&lt;/code&gt; again.   &lt;br&gt;
No, &lt;code&gt;make clean&lt;/code&gt; and &lt;code&gt;make&lt;/code&gt; are not enought to update your object 
files or binaries.&lt;/p&gt;
&lt;h4&gt;Run StarLab&lt;/h4&gt;
&lt;p&gt;Before run a simulation you need to create the initial conditions.&lt;/p&gt;
&lt;h5&gt;Initial Conditions&lt;/h5&gt;
&lt;p&gt;StarLab if provided with few tools to help (really?) you in this task. A common 
way to create ICs for &lt;a href="http://arxiv.org/abs/1404.7147"&gt;our simulations&lt;/a&gt; is something like:     &lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;ehm, I don't know if I can tell you, sorry man...:(&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h5&gt;Launch&lt;/h5&gt;
&lt;p&gt;StarLab read ICs from the STDIN, write the output snapshots to STDOUT and everything 
you want to know about your simulations to STDERR, so, &lt;code&gt;&amp;lt;ehm.... see ICs&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h5&gt;Tidal fields&lt;/h5&gt;
&lt;h4&gt;Known issues and Troubleshooting&lt;/h4&gt;
&lt;p&gt;If StarLab did not kill your cat in a horrile way, then , it can still ruin your life.  &lt;br&gt;
Some of the things that can happen are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;you can find binaries with eccentricity greater than one (StarLab does 
not update some binaries after they are disrupted? flybyes seen as binaries? don't know)&lt;/li&gt;
&lt;li&gt;StarLab can crash if you try to simulate a number of centers of mass greater than 
5*10^4 together with a fraction of primordial binaries &amp;gt;=0.1&lt;/li&gt;
&lt;li&gt;boost problems? check the correct flags for your version (choose among some combination of 
&lt;code&gt;-lboost_system, -lboost_system-mt, -lboost_thread, -lpthread&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;check you put all the &lt;code&gt;_&lt;/code&gt;, "-I", "-l", "-L" in the right places&lt;/li&gt;
&lt;li&gt;check all the libraries paths&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Clusters&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;can I....?&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;Additional material&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Code units&lt;/li&gt;
&lt;li&gt;StarLab internals&lt;/li&gt;
&lt;li&gt;Our repo&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.science.uva.nl/sites/modesta/wiki/index.php/Starlab_tools"&gt;StarLab tools wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>GPU</category><category>simulations</category><category>N-body</category><guid>posts/starlab-gpu-installation.html</guid><pubDate>Tue, 20 Aug 2013 09:34:11 GMT</pubDate></item><item><title>PhD question #4: calculate the value of M*</title><link>posts/phd-question-4-calculate-the-value-of-m.html</link><description>&lt;div&gt;&lt;p&gt;Some post ago &lt;a href="posts/phd-question-1-m.html"&gt;I've written about M*&lt;/a&gt;, the typical non-linear mass collapsing at the redshift we are considering. Now I have to find a value for it.     &lt;/p&gt;
&lt;p class="more"&gt;&lt;a href="posts/phd-question-4-calculate-the-value-of-m.html"&gt;Read more…&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>astro/physics</category><category>code</category><category>Computer</category><category>Cosmology</category><category>N-body</category><category>PhD</category><category>simulation</category><category>imported</category><guid>posts/phd-question-4-calculate-the-value-of-m.html</guid><pubDate>Tue, 03 Apr 2012 00:00:00 GMT</pubDate></item><item><title>Never never never...</title><link>posts/never-never-never.html</link><description>&lt;div&gt;&lt;p&gt;... never forget that the result of the "integer" division 4/3 is equal to 1 instead of 1.333333333... in, I think, almost all programming languages. This is because it's the division between two integers. Only in Python3 it will give what we expect. It's a detail, and I usually remember it and I write 4./3 (4. is of type "float"), but this time I forget it, and I have obtained wrong results for a week. I didn't understand why and I've searched any possible complex and deep explanation. But it was one of the most simple and stupid errors!:P&lt;/p&gt;
&lt;p&gt;Moreover, always check every new result with the older ones. I didn't do this, and I find strange results after two months of computing. Next time, remember to check EVERY new results!&lt;/p&gt;&lt;/div&gt;</description><category>astro/physics</category><category>Cosmology</category><category>N-body</category><category>PhD</category><category>imported</category><guid>posts/never-never-never.html</guid><pubDate>Tue, 03 Apr 2012 00:00:00 GMT</pubDate></item><item><title>Cosmological simulations #9: Gadget-2 (N-body part)</title><link>posts/cosmological-simulations-9-gadget-2-n-body-part.html</link><description>&lt;div&gt;&lt;p&gt;Here I would like to do a brief presentation of the main features of Gadget-2.  &lt;br&gt;
Gadget-2 (&lt;a href="http://www.mpa-garching.mpg.de/gadget/" target="_blank" title="Gadget2 homepage"&gt;here&lt;/a&gt;, &lt;a href="http://www.brunettoziosi.eu/blog/wordpress/my-first-gadget2-tests/" target="_blank" title="My first Gadget-2 tests"&gt;here&lt;/a&gt; and &lt;a href="http://onlinelibrary.wiley.com/doi/10.1111/j.1365-2966.2005.09655.x/abstract;jsessionid=DED86CDB5CD8A572F3631F0C42828086.d01t03" target="_blank" title="Gadget-2 paper"&gt;here&lt;/a&gt;) is a cosmological simulation code developed primarily by &lt;a href="http://www.mpa-garching.mpg.de/~volker/" target="_blank" title="Volker Springel's homepage"&gt;Volker Springel&lt;/a&gt;. It is a &lt;a href="http://www.brunettoziosi.eu/blog/wordpress/cosmological-simulations-3-calculating-the-force/" target="_blank" title="Cosmological simulations #3: force calculation!"&gt;TreePM&lt;/a&gt; code so it splits forces between long-range (PM part) and short-range (tree part using multipole expansion to approximate the force of distant particles groups).    &lt;/p&gt;
&lt;p class="more"&gt;&lt;a href="posts/cosmological-simulations-9-gadget-2-n-body-part.html"&gt;Read more…&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>astro/physics</category><category>Cosmology</category><category>domain decomposition</category><category>Gadget2</category><category>integrator</category><category>leapfrog</category><category>MPI</category><category>N-body</category><category>PhD</category><category>PM</category><category>simulation</category><category>springel</category><category>time-step</category><category>tree</category><category>TreePM</category><guid>posts/cosmological-simulations-9-gadget-2-n-body-part.html</guid><pubDate>Mon, 20 Feb 2012 00:00:00 GMT</pubDate></item><item><title>Learning C from simulations, #1</title><link>posts/learning-c-from-simulations-1.html</link><description>&lt;div&gt;&lt;p&gt;Coming from the beauty of Python, now I have to learn C/C++ again (after the course some semesters ago!:P) because of my work. I'm doing this working with the simulation code Gadget2 and the ICs (initial conditions) generator N-GenIC. Here I would like to pin the serious and less serious things I'm learning for my and maybe other's usefulness and fun!    &lt;/p&gt;
&lt;p class="more"&gt;&lt;a href="posts/learning-c-from-simulations-1.html"&gt;Read more…&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>astro/physics</category><category>C</category><category>code</category><category>N-body</category><category>numerical</category><category>PhD</category><category>program</category><category>simulations</category><category>imported</category><guid>posts/learning-c-from-simulations-1.html</guid><pubDate>Mon, 20 Feb 2012 00:00:00 GMT</pubDate></item><item><title>Learning C from simulations, #3: C horrors!</title><link>posts/learning-c-from-simulations-3-c-horrors.html</link><description>&lt;div&gt;&lt;p&gt;Yeah, this is post #3! Post #2 is "work in progress" and it will be on FFTs!    &lt;/p&gt;
&lt;p&gt;Today I was trying to understand what this piece of code do:    &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;Nmesh&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="n"&gt;seedtable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Nmesh&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x7fffffff&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;gsl_rng_uniform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random_generator&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="n"&gt;seedtable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Nmesh&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x7fffffff&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;gsl_rng_uniform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random_generator&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="n"&gt;seedtable&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;Nmesh&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Nmesh&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x7fffffff&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;gsl_rng_uniform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random_generator&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="n"&gt;seedtable&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;Nmesh&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Nmesh&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x7fffffff&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;gsl_rng_uniform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random_generator&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="n"&gt;seedtable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Nmesh&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Nmesh&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x7fffffff&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;gsl_rng_uniform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random_generator&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="n"&gt;seedtable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Nmesh&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Nmesh&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x7fffffff&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;gsl_rng_uniform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random_generator&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="n"&gt;seedtable&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;Nmesh&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Nmesh&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Nmesh&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x7fffffff&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;gsl_rng_uniform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random_generator&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="n"&gt;seedtable&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;Nmesh&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Nmesh&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Nmesh&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x7fffffff&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;gsl_rng_uniform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random_generator&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p class="more"&gt;&lt;a href="posts/learning-c-from-simulations-3-c-horrors.html"&gt;Read more…&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>astro/physics</category><category>C</category><category>code</category><category>N-body</category><category>numerical</category><category>PhD</category><category>program</category><category>simulations</category><category>imported</category><guid>posts/learning-c-from-simulations-3-c-horrors.html</guid><pubDate>Mon, 20 Feb 2012 00:00:00 GMT</pubDate></item><item><title>My first Gadget2 tests</title><link>posts/my-first-gadget2-tests.html</link><description>&lt;div&gt;&lt;p&gt;This post is about my first experience with the cosmological simulation code &lt;a href="http://www.mpa-garching.mpg.de/gadget/" title="Gadget2"&gt;Gadget2&lt;/a&gt;. To start I followed the instructions found &lt;a href="http://astrobites.com/2011/04/02/installing-and-running-gadget-2/"&gt;here&lt;/a&gt;. All I'm going to write refers to an Ubuntu/Kubuntu 11.10 installation.    &lt;/p&gt;
&lt;p class="more"&gt;&lt;a href="posts/my-first-gadget2-tests.html"&gt;Read more…&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>astro/physics</category><category>code</category><category>Gadget2</category><category>Cosmology</category><category>millennium</category><category>N-body</category><category>PhD</category><category>simulation</category><category>imported</category><guid>posts/my-first-gadget2-tests.html</guid><pubDate>Sat, 07 Jan 2012 00:00:00 GMT</pubDate></item><item><title>GIF2 files Python reader</title><link>posts/gif2-files-python-reader.html</link><description>&lt;div&gt;&lt;p&gt;I create this script on the basis of the code to read the Millennium II data (the same used &lt;a href="http://elbrunz.wordpress.com/2011/12/02/from-binaries-to-hdf5-using-python/" title="From binaries to HDF5 using Python"&gt;here&lt;/a&gt;) provided by &lt;a href="http://mbk.ps.uci.edu/index.html" title="Mike Boylan-Kolchin"&gt;Mike Boylan-Kolchin&lt;/a&gt;. Being allowed to read the Fortran code to write and read the GIF2 files I could adapt this script to exactly fit this problem.    &lt;/p&gt;
&lt;p class="more"&gt;&lt;a href="posts/gif2-files-python-reader.html"&gt;Read more…&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>astro/physics</category><category>Cosmology</category><category>Master Thesis</category><category>millennium</category><category>N-body</category><category>Python</category><category>simulation</category><category>imported</category><guid>posts/gif2-files-python-reader.html</guid><pubDate>Tue, 06 Dec 2011 00:00:00 GMT</pubDate></item><item><title>Cosmological simulations #7: Limitations and some considerations</title><link>posts/cosmological-simulations-7-limitations-and-some-considerations.html</link><description>&lt;div&gt;&lt;p&gt;&lt;strong&gt;Limitations&lt;/strong&gt;    &lt;/p&gt;
&lt;p&gt;In the previous posts we encountered some of the limitations of cosmological  &lt;br&gt;
simulations. Let's review these in detail.  &lt;br&gt;
First, we can consider a simulation composed of a finite box in a bigger space but to represent a real system, this box shouldn't be isolated so we use the periodic boundary conditions (&lt;a href="http://brunettoziosi.blogspot.it/2011/11/cosmological-simulations-2-how.html" target="_blank" title="Cosmological simulations #2: how?"&gt;here&lt;/a&gt;). This means that all the space around the box is filled with images of the box itself: a particle that leaves the box from one side will come in  &lt;br&gt;
from the opposite side.   &lt;br&gt;
&lt;/p&gt;&lt;p class="more"&gt;&lt;a href="posts/cosmological-simulations-7-limitations-and-some-considerations.html"&gt;Read more…&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>astro/physics</category><category>Cosmology</category><category>Master Thesis</category><category>millennium</category><category>N-body</category><category>Python</category><category>simulation</category><category>imported</category><guid>posts/cosmological-simulations-7-limitations-and-some-considerations.html</guid><pubDate>Sun, 04 Dec 2011 00:00:00 GMT</pubDate></item><item><title>GIF2 substructures coordinates correction</title><link>posts/gif2-substructures-coordinates-correction.html</link><description>&lt;div&gt;&lt;p&gt;I used this script to change the coordinates of the substructures in the GIF2 simulation output from the center of mass coordinates to the global ones. The substructures were stored in our server in files referring to the index of the halo to which they belong and their coordinates were respect to the center of the halo. For each halo this script read the subhaloes center of mass coordinates in kpc and change them to global coordinates in Mpc managing the periodic boundary conditions .    &lt;/p&gt;
&lt;p class="more"&gt;&lt;a href="posts/gif2-substructures-coordinates-correction.html"&gt;Read more…&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>astro/physics</category><category>Cosmology</category><category>Master Thesis</category><category>millennium</category><category>N-body</category><category>Python</category><category>simulation</category><category>imported</category><guid>posts/gif2-substructures-coordinates-correction.html</guid><pubDate>Sun, 04 Dec 2011 00:00:00 GMT</pubDate></item></channel></rss>