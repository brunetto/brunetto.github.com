<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Research on Post It!</title>
    <link>http://brunettoziosi.eu/categories/research/</link>
    <description>Recent content in Research on Post It!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 15 Jun 2015 11:55:02 +0200</lastBuildDate>
    <atom:link href="http://brunettoziosi.eu/categories/research/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Dockerized Starlab</title>
      <link>http://brunettoziosi.eu/posts/dockerized-starlab/</link>
      <pubDate>Mon, 15 Jun 2015 11:55:02 +0200</pubDate>
      
      <guid>http://brunettoziosi.eu/posts/dockerized-starlab/</guid>
      <description>

&lt;p&gt;Once you have &lt;a href=&#34;../docker-installation&#34;&gt;Docker installed&lt;/a&gt;, you may want to see it
in action. Here I demonstrate how to use Docker in a slightly different way respect
what you can find around (AKA use Docker to set up a web-server or something similar).&lt;/p&gt;

&lt;p&gt;I think Docker is a great solution to deal with easiness of installation and reproducibility
in science. LXD would be probable be better. LXD already provide unprivileged containers
AND is more about a container containing more than an application, while Docker is
based on the idea of one container for a single app. However, I still have to try LXD.&lt;/p&gt;

&lt;p&gt;Here I will show you how to use Docker to install and run &lt;a href=&#34;http://brunettoziosi.eu/posts/starlab-gpu-installation/&#34;&gt;Starlab&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;NB: nVidia (AKA the most annoying GPU producer in the world) drivers, in addition to be
the worst Linux GPU drivers, require a system-dependent installation. This means that
you can&amp;rsquo;t just download the Docker image from &lt;a href=&#34;https://registry.hub.docker.com/repos/brunetto/&#34;&gt;my Docker registry&lt;/a&gt; and run a container
from it, but you need to download the &lt;code&gt;Dockerfile&lt;/code&gt; and build the image on your own.
You can use the image I provide ONLY if you run the non-GPU StarLab version.
And to do this you need to have a loooot of time to wait for the simulations to finish.&lt;/p&gt;

&lt;h2 id=&#34;create-a-docker-image:e7da96f04bfa3eab144a0265a4f6de5a&#34;&gt;Create a Docker image&lt;/h2&gt;

&lt;p&gt;The image I&amp;rsquo;m going to create contains:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;our modified StarLab version (it contains updated stellar evolution recipes), both GPU and non GPU version&lt;/li&gt;
&lt;li&gt;the same version with an &lt;a href=&#34;http://adsabs.harvard.edu/abs/1991RMxAA..22..255A&#34;&gt;Allen-Santillan&lt;/a&gt; galactic tidal field,
corrected for the non-inertial reference frame used in StarLab
(at the moment this version is not working, probably because a problem in the timestep calculation, but I am working on it!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can use the &lt;a href=&#34;http://www.sns.ias.edu/~starlab/download/&#34;&gt;public version&lt;/a&gt; and correct the
&lt;code&gt;Dockerfile&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It is possible to download and extract the StarLab sourced directly from the Internet but I
prefer to have everything already in the folder.&lt;/p&gt;

&lt;p&gt;First of all, create a new empty folder and &lt;code&gt;cd&lt;/code&gt; into it. Then, copy the StarLab sources
and the docker file into that folder.
Mine looks like that:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;starlabDocker.tar.gz
	|-sapporo
	|-starlab
	|-starlabAS
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where &lt;code&gt;starlabAS&lt;/code&gt; only contains the files that differ from the versio without the Allen-Santillan tidal field.&lt;/p&gt;

&lt;p&gt;Then, you need a &lt;code&gt;Dockerfile&lt;/code&gt;. The &lt;code&gt;Dockerfile&lt;/code&gt; tells Docker what it has to do
in order to create your image. Which base images to use (if any), which packages to download and install and so on.
Mine is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;FROM ubuntu:14.04

MAINTAINER brunetto ziosi &amp;lt;my email hehe&amp;gt;

# For the public version of StarLab4.4.4, see http://www.sns.ias.edu/~starlab/

ENV DEBIAN_FRONTEND noninteractive

ENV STARLAB_FILE starlabDocker.tar.gz

# Copy StarLab bundle into the image
COPY $STARLAB_FILE /

# This has to be set by hand and MUST be the same of the host
##############
# longisland #
##############
# ENV CUDA_DRIVER 340.46
# ENV CUDA_INSTALL http://us.download.nvidia.com/XFree86/Linux-x86_64/${CUDA_DRIVER}/NVIDIA-Linux-x86_64-${CUDA_DRIVER}.run
# ENV CUDA_TOOLKIT cuda_6.0.37_linux_64.run
# ENV CUDA_TOOLKIT_DOWNLOAD http://developer.download.nvidia.com/compute/cuda/6_0/rel/installers/$CUDA_TOOLKIT
##############
#    uno     #
##############
# ENV CUDA_DRIVER 331.38
# ENV CUDA_INSTALL http://us.download.nvidia.com/XFree86/Linux-x86_64/${CUDA_DRIVER}/NVIDIA-Linux-x86_64-${CUDA_DRIVER}.run
# ENV CUDA_TOOLKIT cuda_5.5.22_linux_64.run
# ENV CUDA_TOOLKIT_DOWNLOAD http://developer.download.nvidia.com/compute/cuda/5_5/rel/installers/$CUDA_TOOLKIT
##############
#   spritz   #
##############
ENV CUDA_DRIVER 331.113
ENV CUDA_INSTALL http://us.download.nvidia.com/XFree86/Linux-x86_64/${CUDA_DRIVER}/NVIDIA-Linux-x86_64-${CUDA_DRIVER}.run
ENV CUDA_TOOLKIT cuda_5.5.22_linux_64.run
ENV CUDA_TOOLKIT_DOWNLOAD http://developer.download.nvidia.com/compute/cuda/5_5/rel/installers/$CUDA_TOOLKIT
################
#  sfursat     #
# to be tested #
################
# ENV CUDA_DRIVER 270.41.19
# ENV CUDA_INSTALL http://us.download.nvidia.com/XFree86/Linux-x86_64/${CUDA_DRIVER}/NVIDIA-Linux-x86_64-${CUDA_DRIVER}.run
# ENV CUDA_TOOLKIT ????
# ENV CUDA_TOOLKIT_DOWNLOAD ????????

# Update and install minimal and clean up packages
RUN apt-get update --quiet &amp;amp;&amp;amp; apt-get install --yes \
 --no-install-recommends --no-install-suggests \
 build-essential module-init-tools wget libboost-all-dev   \
&amp;amp;&amp;amp; apt-get clean &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*

# Install CUDA drivers
RUN wget $CUDA_INSTALL -P /tmp --no-verbose \
      &amp;amp;&amp;amp; chmod +x /tmp/NVIDIA-Linux-x86_64-${CUDA_DRIVER}.run \
      &amp;amp;&amp;amp; /tmp/NVIDIA-Linux-x86_64-${CUDA_DRIVER}.run -s -N --no-kernel-module \
      &amp;amp;&amp;amp; rm -rf /tmp/*

# Install CUDA toolkit
RUN wget $CUDA_TOOLKIT_DOWNLOAD &amp;amp;&amp;amp; chmod +x $CUDA_TOOLKIT \
&amp;amp;&amp;amp; ./$CUDA_TOOLKIT -toolkit -toolkitpath=/usr/local/cuda-site -silent -override \
&amp;amp;&amp;amp; rm $CUDA_TOOLKIT

# Set env variables
RUN echo &amp;quot;PATH=$PATH:/usr/local/cuda-site/bin&amp;quot; &amp;gt;&amp;gt; .bashrc          \
&amp;amp;&amp;amp; echo &amp;quot;LD_LIBRARY_PATH=/usr/local/cuda-site/lib64&amp;quot; &amp;gt;&amp;gt; .bashrc   \
&amp;amp;&amp;amp; . /.bashrc \
&amp;amp;&amp;amp; ldconfig /usr/local/cuda-site/lib64

# Install StarLab w/ and w/o GPU, w/ and w/o tidal fields
RUN tar -xvf $STARLAB_FILE &amp;amp;&amp;amp; rm $STARLAB_FILE \
&amp;amp;&amp;amp; cp -r starlab starlab-no-GPU               \
&amp;amp;&amp;amp; cp -r starlab starlabAS-no-GPU             \
&amp;amp;&amp;amp; cp -r starlab starlabAS-GPU                \
&amp;amp;&amp;amp; mv starlab starlab-GPU

# Tidal field version only has 5 files different, 
# so we can copy them into a copy of the non TF version:

# starlab/src/node/dyn/util/add_tidal.C
# starlab/src/node/dyn/util/dyn_external.C
# starlab/src/node/dyn/util/dyn_io.C
# starlab/src/node/dyn/util/set_com.C
# starlab/src/node/dyn/util/dyn_story.C

RUN cp starlabAS/*.C starlabAS-no-GPU/src/node/dyn/util/ \
&amp;amp;&amp;amp; cp starlabAS/*.C starlabAS-GPU/src/node/dyn/util/     \
&amp;amp;&amp;amp; cp starlabAS/dyn.h starlabAS-no-GPU/include/          \
&amp;amp;&amp;amp; cp starlabAS/dyn.h starlabAS-GPU/include/             \
&amp;amp;&amp;amp; rm -rf starlabAS

# Compile sapporo
RUN cd sapporo/ &amp;amp;&amp;amp; make &amp;amp;&amp;amp; bash compile.sh &amp;amp;&amp;amp; cd ../

# With and w/o GPU and w/ and w/o AS tidal fields
RUN cd /starlab-GPU/ &amp;amp;&amp;amp; ./configure --with-f77=no &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install &amp;amp;&amp;amp; cd ../ \
&amp;amp;&amp;amp; mv /starlab-GPU/usr/bin slbin-GPU &amp;amp;&amp;amp; rm -rf /starlab-GPU \
&amp;amp;&amp;amp; cd /starlabAS-GPU/ &amp;amp;&amp;amp; ./configure --with-f77=no &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install &amp;amp;&amp;amp; cd ../ \
&amp;amp;&amp;amp; mv /starlabAS-GPU/usr/bin slbinAS-GPU &amp;amp;&amp;amp; rm -rf /starlabAS-GPU \
&amp;amp;&amp;amp; cd /starlab-no-GPU/ &amp;amp;&amp;amp; ./configure --with-f77=no --with-grape=no &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install &amp;amp;&amp;amp; cd ../ \
&amp;amp;&amp;amp; mv /starlab-no-GPU/usr/bin slbin-no-GPU &amp;amp;&amp;amp; rm -rf /starlab-no-GPU \
&amp;amp;&amp;amp; cd /starlabAS-no-GPU/ &amp;amp;&amp;amp; ./configure --with-f77=no --with-grape=no &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install &amp;amp;&amp;amp; cd ../ \
&amp;amp;&amp;amp; mv /starlabAS-no-GPU/usr/bin slbinAS-no-GPU &amp;amp;&amp;amp; rm -rf /starlabAS-no-GPU

# Default command.
ENTRYPOINT [&amp;quot;/bin/bash&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first part of the &lt;code&gt;Dockerfile&lt;/code&gt; specify to use &lt;code&gt;Ubuntu 14.04&lt;/code&gt; as base image
(a special version customized for Docker). Then it lists me as maintainer of the image.
What follows are environment variables needed for the installation.
&lt;code&gt;COPY&lt;/code&gt; copy the Starlab sources from the host folder to the image &lt;code&gt;/&lt;/code&gt; folder.
After that I set the right variables needed to install the right CUDA drivers
and libraries for each system.&lt;/p&gt;

&lt;p&gt;After setting the environment variables, the &lt;code&gt;RUN&lt;/code&gt; command is used to launch
the update of the system indexes and packages and the installations of the needed
build tools.&lt;/p&gt;

&lt;p&gt;Then we can install the CUDA drivers and the CUDA libraries.&lt;/p&gt;

&lt;p&gt;Because Docker add a layer for each of the Docker commands used, I minimize the number of layers
running more that one bash command chaining them with &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The following steps are extract the sources, copy the files in the right places and compile
sapporo and Starlab. Sapporo is the library that allow Starlab (developed for GRAPE) to run on the GPUs.&lt;/p&gt;

&lt;p&gt;The final line tells Docker that a container based on this image should start with /bin/bash active.&lt;/p&gt;

&lt;p&gt;To build the image just run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;time docker build --force-rm=true -t &amp;lt;your registry name&amp;gt;/starlab-cuda-&amp;lt;driver version&amp;gt;:$(date +&amp;quot;%Y%m%d&amp;quot;) .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is my build line containing&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;time&lt;/code&gt; command, just to know how log does it take to build the image&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker build --force-rm=true&lt;/code&gt; build the image removing intermediate layer&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-t&lt;/code&gt; to tag the image you create with a name you like, I use my Dcoker Hub username,
the name of the program I&amp;rsquo;m dockerizing, if using cuda, the driver version and the build date,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.&lt;/code&gt; the final dot is not a typo, it tells Docker to build an image using the &lt;code&gt;Dockerfile&lt;/code&gt;
in the current folder.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s assume that the container name is &lt;code&gt;me/starlab-cuda-340.46-6.0.37-2015-06-15&lt;/code&gt;
At the end of the process you can check if the image was successfully created (ok, you can do this also from the errors!)
by running:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker images

REPOSITORY                                   TAG                 IMAGE ID            
me/starlab-cuda-340.46-6.0.37-2015-06-15    20150615            b073d414323f        
                                            CREATED             VIRTUAL SIZE
                                            37 minutes ago      5.272 GB
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;run-a-starlab-container:e7da96f04bfa3eab144a0265a4f6de5a&#34;&gt;Run a StarLab container&lt;/h2&gt;

&lt;p&gt;Now that you created the image, it&amp;rsquo;s time to run a container with it.
To create and run a container based on your newly created image run:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -ti --device /dev/nvidia0:/dev/nvidia0 \
                 --device /dev/nvidia1:/dev/nvidia1 \
                 --device /dev/nvidiactl:/dev/nvidiactl \
                 --device /dev/nvidia-uvm:/dev/nvidia-uvm \
                 -v       &amp;lt;abs path to host folder&amp;gt;:&amp;lt;container folder&amp;gt; \
                          me/starlab-cuda-340.46-6.0.37-2015-06-15
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker run&lt;/code&gt; is obvious&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-ti&lt;/code&gt; means open a interactive pseudo tty (that is, more or less, give me a terminal inside the
container, once started, where I can run commands)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--device&lt;/code&gt; specify which devices to attach; in this case I am connecting 2 CUDA GPUs
and allow for the Unified Virtual Memory to be used (it works only from CUDA6)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-v &amp;lt;abs path to host folder&amp;gt;:&amp;lt;container folder&amp;gt;&lt;/code&gt; allow to share a folder between host and container&lt;/li&gt;
&lt;li&gt;&lt;code&gt;me/starlab-cuda-340.46-6.0.37-2015-06-15&lt;/code&gt; is the name of the image from which to create the container&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can check by running:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker ps [-a]

CONTAINER ID        IMAGE                                              
ccdffc10c680        me/starlab-cuda-340.46-6.0.37-2015-06-15   
                     COMMAND             CREATED             
                     &amp;quot;/bin/bash&amp;quot;         15 seconds ago    
                     STATUS              PORTS               NAMES
                     Up 15 seconds                           adoring_turing
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;-a&lt;/code&gt; flags tells Docker to show you also the stopped containers. Note that the container
has a random name given by Docker.&lt;/p&gt;

&lt;p&gt;It is also possible to directly run commands just after the container creation,
for example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ time echo &amp;quot;Hello world&amp;quot;
Hello world
real    0m0.000s
user    0m0.000s
sys     0m0.000s

$ time docker run ubuntu:14.04 /bin/echo &#39;Hello world&#39;
Hello world
real    0m0.219s
user    0m0.028s
sys     0m0.005s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example, the second command ran into a docker container.&lt;/p&gt;

&lt;p&gt;We can do something better: we want a script that creates a container,
start it, run some commands and then clean everything.&lt;/p&gt;

&lt;p&gt;This could be quite easy, but we are using StarLab, that makes heavy use of pipes.
I found three solutions to get it works, the last being the better.&lt;/p&gt;

&lt;p&gt;The first attempt is something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash # shebang line to specify the interpreter

set -x # set -x tells bash to echo the command is going to run

# Create a docker container with devices and volumes and give it a name
docker create --name sltest -i -t \
--device /dev/nvidia0:/dev/nvidia0 \
--device /dev/nvidia1:/dev/nvidia1 \
--device /dev/nvidiactl:/dev/nvidiactl \
--device /dev/nvidia-uvm:/dev/nvidia-uvm \
me/starlab-cuda-340.46-6.0.37-2015-06-15

# Start the container
docker start sltest

# Exec commands to create StarLab initial conditions
(docker exec -i sltest /slbin/makeking -n 100 -w 5 -i -u ) &amp;gt; makeking.out
(docker exec -i sltest /slbin/makemass -f 8 -l 0.1 -u 40 ) &amp;lt; makeking.out &amp;gt; makemass.out
(docker exec -i sltest /slbin/add_star -R 1 -Z 0.1       ) &amp;lt; makemass.out &amp;gt; add_star.out
(docker exec -i sltest /slbin/scale    -R 1 -M 1         ) &amp;lt; add_star.out &amp;gt; ics.txt

# Start kira
(docker exec -i sltest /slbin/kira -t 3 -d 1 -D 1 -f 0 -n 10 -e 0 -B -b 1) &amp;lt; ics.txt &amp;gt; out.txt 2&amp;gt; err.txt

# Stop and delete the container
docker stop sltest
docker rm sltest
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example make use of the STDIN/ERR/OUT redirection, but does not always work
very well.&lt;/p&gt;

&lt;p&gt;The second attempt, a little better is&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash 
set -x 

# Create env variables for the folders
LOCAL_FOLDER=~/starlab-results
DOCKER_FOLDER=/starlab-results

# Create a docker container with devices and volumes and give it a name
docker create --name sltest -i -t \
--device /dev/nvidia0:/dev/nvidia0 \
--device /dev/nvidia1:/dev/nvidia1 \
--device /dev/nvidiactl:/dev/nvidiactl \
--device /dev/nvidia-uvm:/dev/nvidia-uvm \
-v $LOCAL_FOLDER:$DOCKER_FOLDER \
me/starlab-cuda-340.46-6.0.37-2015-06-15

# Start the container
docker start sltest

# Exec commands to create StarLab initial conditions
(docker exec -i sltest -c &amp;quot;/slbin/makeking -n 100 -w 5 -i -u ) &amp;gt; $DOCKER_FOLDER/makeking.out&amp;quot;
(docker exec -i sltest -c &amp;quot;/slbin/makemass -f 8 -l 0.1 -u 40 ) &amp;lt; $DOCKER_FOLDER/makeking.out &amp;gt; $DOCKER_FOLDER/makemass.out&amp;quot;
(docker exec -i sltest -c &amp;quot;/slbin/add_star -R 1 -Z 0.1       ) &amp;lt; $DOCKER_FOLDER/makemass.out &amp;gt; $DOCKER_FOLDER/add_star.out&amp;quot;
(docker exec -i sltest -c &amp;quot;/slbin/scale    -R 1 -M 1         ) &amp;lt; $DOCKER_FOLDER/add_star.out &amp;gt; $DOCKER_FOLDER/ics.txt&amp;quot;

# Start kira
docker exec -i sltest bash -c &amp;quot;/slbin/kira -t 3 -d 1 -D 1 -f 0 \
 -n 10 -e 0 -B -b 1 &amp;lt; $DOCKER_FOLDER/ics.txt \
 &amp;gt; $DOCKER_FOLDER/out.txt 2&amp;gt; $DOCKER_FOLDER/err.txt&amp;quot;

# Stop and delete the container
docker stop sltest
docker rm sltest
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this second example we make use of the internal container folder attached to a host system folder.
We will found our files in &lt;code&gt;~/starlab-results&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, the way I prefer is to make the container bash read a script in the
exchange folder. To do this, we need two files.&lt;br /&gt;
The first create the container and launch the second, located into the exchange folder.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cat dockerized_starlab.sh

#!/bin/bash
set -x
# Create a docker container with devices and volumes and give it a name
CONTAINER_NAME=test-001

docker create --name $CONTAINER_NAME -i -t \
--device /dev/nvidia0:/dev/nvidia0 \
--device /dev/nvidia1:/dev/nvidia1 \
--device /dev/nvidiactl:/dev/nvidiactl \
--device /dev/nvidia-uvm:/dev/nvidia-uvm \
-v /home/ziosi/tests/$CONTAINER_NAME/results/:/sl-exchanges/ \
me/starlab-cuda-340.46-6.0.37-2015-06-15

# Start the container
docker start $CONTAINER_NAME

# Execute the script in the exchange folder
docker exec -i $CONTAINER_NAME bash -c &amp;quot;/sl-exchanges/run.sh&amp;quot;

docker stop $CONTAINER_NAME
docker rm $CONTAINER_NAME
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The second may contain the instructions to run StarLab commands:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash
set -x

for RUN in $(ls create_*.sh); do
	echo &amp;quot;Run $RUN&amp;quot;;
	/slbin-GPU/makeking -n 1000 -w 5 -i -u  &amp;gt; /sl-exchanges/makeking-$RUN.out;
	/slbin-GPU/makemass -f 8  -l 0.1 -u 150 &amp;lt; /sl-exchanges/makeking-$RUN.out &amp;gt; /sl-exchanges/makemass-$RUN.out;
	/slbin-GPU/add_star -R 1 -Z 0.10        &amp;lt; /sl-exchanges/makemass-$RUN.out &amp;gt; /sl-exchanges/add_star-$RUN.out;
	/slbin-GPU/set_com -r 5 0 0 -v 0 1 0    &amp;lt; /sl-exchanges/add_star-$RUN.out &amp;gt; /sl-exchanges/set_com-$RUN.out;
	/slbin-GPU/scale -R 1 -M 1  &amp;lt; /sl-exchanges/set_com-$RUN.out &amp;gt; /sl-exchanges/ics-$RUN.txt;
	/slbin-GPU/kira -t 500 -d 1 -D 1 -f 0 -n 10 -e 0 -B -b 1 &amp;lt; /sl-exchanges/ics-$RUN.txt &amp;gt; /sl-exchanges/out-$RUN.txt 2&amp;gt; /sl-exchanges/err-$RUN.txt;
done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where I take advantage of the fact that I wrote a script to loop over different
simulations to be ran.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s it!!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Install Docker</title>
      <link>http://brunettoziosi.eu/posts/docker-installation/</link>
      <pubDate>Mon, 15 Jun 2015 10:55:02 +0200</pubDate>
      
      <guid>http://brunettoziosi.eu/posts/docker-installation/</guid>
      <description>

&lt;h2 id=&#34;what-is-docker:b27a6dac77ac7c1c26ccb85a8fe76747&#34;&gt;What is Docker&lt;/h2&gt;

&lt;p&gt;Well, Docker is&lt;/p&gt;

&lt;p&gt;&amp;ldquo;An open source project to pack, ship and run any application as a lightweight container.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;I have written a brief introduction &lt;a href=&#34;http://rawgit.com/brunetto/my-public-talks/master/2014-12-cinecaBigData/index.html#24&#34;&gt;here&lt;/a&gt;,
and the Internet is full of definitions and suggestions. Check also out
&lt;a href=&#34;http://www.ubuntu.com/cloud/tools/lxd&#34;&gt;this&lt;/a&gt; for a comparison with
&lt;a href=&#34;https://insights.ubuntu.com/2015/04/28/getting-started-with-lxd-the-container-lightervisor/&#34;&gt;LDX&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, in short, Docker:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;is an isolated sharable environment (dev and ship)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;avoid the need to mess-up host OS to change dev env&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;avoid the need to get mad to install an app&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;is (was) based on lxc (linux containers) and Go&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;is NOT a virtual machine → lightweight&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;is a secure (sandbox)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;allow you to commit changes&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;is based on images and containers: templates and running instances (that lose memory on shutdown)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;how-to-install-docker:b27a6dac77ac7c1c26ccb85a8fe76747&#34;&gt;How to install Docker&lt;/h2&gt;

&lt;p&gt;There are many different way to install Docker. On *buntu,
I find this the best (see also &lt;a href=&#34;https://github.com/brunetto/docker-cheat-sheet#linux&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add docker repository key to apt-key for package verification and add repository:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo sh -c &amp;quot;wget -qO- https://get.docker.io/gpg | apt-key add -&amp;quot;
sudo sh -c &amp;quot;echo deb http://get.docker.io/ubuntu docker main\
&amp;gt; /etc/apt/sources.list.d/docker.list&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Install docker&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo aptitude update &amp;amp;&amp;amp; sudo aptitude install lxc-docker
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Avoid typing sudo everytime&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo groupadd docker
sudo gpasswd -a ${USER} docker
sudo service docker restart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then logout and login again.&lt;/p&gt;

&lt;p&gt;If you want, you can allow memory limits: set &lt;code&gt;/etc/default/grub&lt;/code&gt; key &lt;code&gt;GRUB_CMDLINE_LINUX&lt;/code&gt; to&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GRUB_CMDLINE_LINUX=&amp;quot;cgroup_enable=memory swapaccount=1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then update GRUB with &lt;code&gt;sudo update-grub&lt;/code&gt; and reboot.&lt;/p&gt;

&lt;h2 id=&#34;usefull-commands:b27a6dac77ac7c1c26ccb85a8fe76747&#34;&gt;Usefull commands&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;docker&lt;/code&gt; &lt;a href=&#34;https://docs.docker.com/reference/commandline/cli/#attach&#34;&gt;attach&lt;/a&gt;,
&lt;a href=&#34;https://docs.docker.com/reference/commandline/cli/#create&#34;&gt;create&lt;/a&gt;,
&lt;a href=&#34;https://docs.docker.com/reference/commandline/cli/#exec&#34;&gt;exec&lt;/a&gt;,
&lt;a href=&#34;https://docs.docker.com/reference/commandline/cli/#inspect&#34;&gt;inspect&lt;/a&gt;,
&lt;a href=&#34;https://docs.docker.com/reference/commandline/cli/#logs&#34;&gt;logs&lt;/a&gt;,
&lt;a href=&#34;https://docs.docker.com/reference/commandline/cli/#push&#34;&gt;push&lt;/a&gt;,
&lt;a href=&#34;https://docs.docker.com/reference/commandline/cli/#pull&#34;&gt;pull&lt;/a&gt;,
&lt;a href=&#34;https://docs.docker.com/reference/commandline/cli/#rm&#34;&gt;rm&lt;/a&gt;,
&lt;a href=&#34;https://docs.docker.com/reference/commandline/cli/#rmi&#34;&gt;rmi&lt;/a&gt;,
&lt;a href=&#34;https://docs.docker.com/reference/commandline/cli/#run&#34;&gt;run&lt;/a&gt;,
&lt;a href=&#34;https://docs.docker.com/reference/commandline/cli/#start&#34;&gt;start&lt;/a&gt;,
&lt;a href=&#34;https://docs.docker.com/reference/commandline/cli/#stop&#34;&gt;stop&lt;/a&gt;,
&lt;a href=&#34;https://docs.docker.com/reference/commandline/cli/#tag&#34;&gt;tag&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Inside a container, exit with &lt;code&gt;ctrl+p ctrl+q&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Attach to a running container with &lt;code&gt;docker attach &amp;lt;container name&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;other-resources:b27a6dac77ac7c1c26ccb85a8fe76747&#34;&gt;Other resources&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://registry.hub.docker.com&#34;&gt;Registry/repository&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Docs: &lt;a href=&#34;https://docs.docker.com/reference/commandline/cli/&#34;&gt;command line&lt;/a&gt;, &lt;a href=&#34;http://docs.docker.com/&#34;&gt;all&lt;/a&gt;, &lt;a href=&#34;https://github.com/brunetto/docker-cheat-sheet&#34;&gt;me&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/24702233/docker-container-and-memory-consumption&#34;&gt;Memory consumption&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://phusion.github.io/baseimage-docker/#intro&#34;&gt;Docker baseimages&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See &lt;a href=&#34;../dockerized-starlab&#34;&gt;Dockerized Starlab&lt;/a&gt; to have an example of
how Docker can be used.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PDF manipulation</title>
      <link>http://brunettoziosi.eu/posts/pdf-manipulation/</link>
      <pubDate>Fri, 05 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://brunettoziosi.eu/posts/pdf-manipulation/</guid>
      <description>

&lt;p&gt;It happens, from time to time, that I find myself looking for a way to manipulate PDF
on the fly. For example, I want to print them two-pages per sheet, or to extract
few pages, or to shrink the size of the file without degradate the quality.&lt;/p&gt;

&lt;p&gt;Here are few trick I collected and post here to be able to find them.&lt;/p&gt;

&lt;h2 id=&#34;print-two-pages-per-sheet:1a99063f87f259b634426df7f0e7e8a1&#34;&gt;Print two pages per sheet&lt;/h2&gt;

&lt;p&gt;The first tricks comes from &lt;a href=&#34;http://0x2a.at/blog/2011/02/pdf_manipulation_on_the_cli/&#34;&gt;here&lt;/a&gt;
and assume you have &lt;a href=&#34;http://www2.warwick.ac.uk/fac/sci/statistics/staff/academic-research/firth/software/pdfjam/&#34;&gt;&lt;code&gt;pdfjam&lt;/code&gt;&lt;/a&gt;
installed.
This is how you can produce a pdf with two pages per sheet:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pdfjam --nup 2x1 infile.pdf --landscape --outfile outfile.pdf
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;booklet:1a99063f87f259b634426df7f0e7e8a1&#34;&gt;Booklet&lt;/h2&gt;

&lt;p&gt;You can also print your pdf file as booklet. This means that the pages
of your file are shuffled (and placed two per sheet) so that you can
join them with a clip or some glue or strings in the middle just like
a real book. The sommand is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pdfbook --short-edge infile.pdf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;pdfbook&lt;/code&gt; is part of &lt;code&gt;pdfjam&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;extract-or-join-pages:1a99063f87f259b634426df7f0e7e8a1&#34;&gt;Extract (or join) pages&lt;/h2&gt;

&lt;p&gt;If you need to extrac some pages from your pdf file you can just run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pdftk infile.pdf cat &amp;lt;first_page&amp;gt;-&amp;lt;last_page&amp;gt; output outfile.pdf 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To join pdf files, instead, run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pdftk infile1.pdf infile2.pdf infile3.pdf cat output outfile.pdf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Obviously you need &lt;a href=&#34;http://packages.ubuntu.com/search?keywords=pdftk&#34;&gt;&lt;code&gt;pdftk&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;shrink-pdf-file-size:1a99063f87f259b634426df7f0e7e8a1&#34;&gt;Shrink pdf file size&lt;/h2&gt;

&lt;p&gt;Sometiimes a pdf grows in size with no reason (apparently). It is possible to shrink it
by reduce it to pdf defaults. You will need &lt;a href=&#34;http://www.ghostscript.com/&#34;&gt;&lt;code&gt;gs&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The command you need to run is&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/default -dNOPAUSE -dQUIET -dBATCH -sOutputFile=outfile.pdf infile.pdf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It can be quite difficult to remember, so you can create a bash alias for a function
doing it for you. In &lt;code&gt;.bashrc&lt;/code&gt; add&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;alias pdfdefault=&#39;function _pdfdefault() { gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/default -dNOPAUSE -dQUIET -dBATCH -sOutputFile=$2 $1;}; _pdfdefault&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and run &lt;code&gt;. ~/.bashrc&lt;/code&gt; before running &lt;code&gt;pdfdefault infile.pdf outfile.pdf&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;two-pages-per-sheet-with-latex:1a99063f87f259b634426df7f0e7e8a1&#34;&gt;Two pages per sheet with latex&lt;/h2&gt;

&lt;p&gt;It is possible, if you are writing something with pdf, to produce a pdf
with two pages per sheet without needing to run &lt;code&gt;pdfjam&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In this case just add, at the beginning of your latex document&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-latex&#34;&gt;\usepackage{pgfpages}
\pgfpagesuselayout{2 on 1}[a4paper], landscape]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Not only Big Data</title>
      <link>http://brunettoziosi.eu/posts/not-only-big-data/</link>
      <pubDate>Thu, 08 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://brunettoziosi.eu/posts/not-only-big-data/</guid>
      <description>&lt;p&gt;Recently I&amp;rsquo;ve been at a &lt;a href=&#34;http://www.cineca.it/en&#34;&gt;Cineca&lt;/a&gt; workshop focused on tools to deal with big data analysis.
We had a taste of MapReduce/Hadoop/Spark and friends and we used Docker.
I wrote a small presentation to update my collegues and it become a in-progress presentation of the tools I think are
useful in our everyday work. This presentation aims of acting both as a showcase of what can help us and as a cheat sheet.
You can find it after the break.&lt;/p&gt;

&lt;iframe src=&#34;http://rawgit.com/brunetto/my-public-talks/master/2014-12-cinecaBigData/index.html&#34; width=&#34;800&#34; height=&#34;600&#34;&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Python plot examples</title>
      <link>http://brunettoziosi.eu/posts/python-plot-examples/</link>
      <pubDate>Mon, 29 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://brunettoziosi.eu/posts/python-plot-examples/</guid>
      <description>&lt;p&gt;Two examples on how to make plots with &lt;a href=&#34;http://home.gna.org/veusz&#34;&gt;Veusz&lt;/a&gt; and
&lt;a href=&#34;http://matplotlib.org&#34;&gt;Matplotlib&lt;/a&gt;.&lt;br /&gt;
I prefer Veusz because it&amp;rsquo;s easier to configure, modify and it produces
perfect &lt;code&gt;pdf&lt;/code&gt; plots, but sometimes Matplotlib it&amp;rsquo;s faster for producing just
a draft plot to inspect data!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python
# -*- coding: utf8 -*- 

from __future__ import division # no more &amp;quot;zero&amp;quot; integer division bugs!:P
import time
import numpy as np
import veusz.embed as ve

def sm_hist(data, delta=5, n_bin=None, range_=None):
	dataMin = np.floor(data.min())
	dataMax = np.ceil(data.max())
	n_bin = np.ceil(1.*(dataMax-dataMin) / delta)
	range_ = (dataMin, dataMin + n_bin * delta)
	counts, bin_edges = np.histogram(data, n_bin, range_, density = False)
	return counts, bin_edges
	
def sm_hist2(data, delta=5):
	dataMin = np.floor(data.min())
	dataMax = np.ceil(data.max())
	n_bin = np.ceil(1.*(dataMax-dataMin) / delta) + 1
	idxs = ((data  - dataMin) / delta).astype(int)
	counts = np.zeros(n_bin) 
	bin_edges = np.arange(dataMin, dataMax+2, delta)
	for idx in idxs:
		counts[idx] += 1
	counts = np.hstack((np.array([0]), counts, np.array([0])))
	bin_edges = np.hstack((bin_edges[0], bin_edges, bin_edges[-1]))
	return counts, bin_edges

def plotFunc(inpath=&amp;quot;./&amp;quot;, outpath=&amp;quot;./&amp;quot;):
	font = &amp;quot;Times New Roman&amp;quot;
	colors = [u&#39;blue&#39;, u&#39;green&#39;]
	xmin = [&amp;quot;auto&amp;quot;, &amp;quot;auto&amp;quot;]
	xmax = [&amp;quot;auto&amp;quot;, &amp;quot;auto&amp;quot;]
	ymin = [&amp;quot;auto&amp;quot;, 0]
	ymax = [&amp;quot;auto&amp;quot;, &amp;quot;auto&amp;quot;]
	
	xData = np.arange(100) 
	yData = np.random.randint(0, 100, size=100) + np.sin(np.arange(100))
	
	figure = ve.Embedded(&amp;quot;Window_1&amp;quot;)
	page = figure.Root.Add(&#39;page&#39;, width = &#39;30cm&#39;, height=&#39;15cm&#39;)
	grid = page.Add(&#39;grid&#39;, autoadd = False, rows = 1, columns = 2,
						scaleRows=[0.2],
						topMargin=&#39;1cm&#39;,
						bottomMargin=&#39;1cm&#39;
						)
	graphList = []
	
	graphList.append(grid.Add(&#39;graph&#39;, name=&amp;quot;scatter&amp;quot;, autoadd=False, 
							hide = False, 
							Border__width = &#39;2pt&#39;,
							leftMargin = &#39;0.6cm&#39;,
							rightMargin = &#39;0.4cm&#39;,
							topMargin = &#39;0.5cm&#39;,
							bottomMargin = &#39;1cm&#39;,
							))
	
	graphList.append(grid.Add(&#39;graph&#39;, name=&amp;quot;hist&amp;quot;, autoadd=False, 
							hide = False, 
							Border__width = &#39;2pt&#39;,
							leftMargin = &#39;2cm&#39;,
							rightMargin = &#39;0.4cm&#39;,
							topMargin = &#39;0.5cm&#39;,
							bottomMargin = &#39;1cm&#39;,
							))
	
	for i in range(len(graphList)):
		graphList[i].Add(&#39;axis&#39;, name=&#39;x&#39;, label = &amp;quot;x&amp;quot;,
								min = xmin[i],
								max = xmax[i],
								log = False,
								Label__size = &#39;25pt&#39;,
								Label__font = font,
								TickLabels__size = &#39;17pt&#39;,
								TickLabels__format = u&#39;Auto&#39;,
								MajorTicks__width = &#39;2pt&#39;,
								MajorTicks__length = &#39;10pt&#39;,
								MinorTicks__width = &#39;1pt&#39;,
								MinorTicks__length = &#39;6pt&#39;
							)
		graphList[i].Add(&#39;axis&#39;, name=&#39;y&#39;, label = &amp;quot;y&amp;quot;, 
								direction = &#39;vertical&#39;,
								min = ymin[i],
								max = ymax[i],
								log = False,
								autoRange = u&#39;+5%&#39;,
								Label__size = &#39;25pt&#39;,
								Label__font = font,
								TickLabels__size = &#39;20pt&#39;,
								TickLabels__format = u&#39;Auto&#39;,
								MajorTicks__width = &#39;2pt&#39;,
								MajorTicks__length = &#39;10pt&#39;,
								MinorTicks__width = &#39;1pt&#39;,
								MinorTicks__length = &#39;6pt&#39;
							)
	
	graphList[0].Add(&#39;xy&#39;, key=&amp;quot;scatterPlotKey&amp;quot;, name=&#39;scatterPlotName&#39;,
						marker = u&#39;circle&#39;,
						MarkerFill__color = colors[0],
						markerSize = u&#39;3pt&#39;, 
						)

	xDataName = &amp;quot;xScatterData&amp;quot;
	yDataName = &amp;quot;yScatterData&amp;quot;
	figure.SetData(xDataName, xData)
	figure.SetData(yDataName, yData)
	graphList[0].scatterPlotName.xData.val = xDataName
	graphList[0].scatterPlotName.yData.val = yDataName
	
	
	counts, bin_edges = sm_hist2(yData, delta=5)
	
	graphList[1].Add(&#39;xy&#39;, key=&amp;quot;histPlotKey&amp;quot;, name=&#39;histPlotName&#39;,
						xData = bin_edges,
						yData = counts,
						marker = &#39;none&#39;,
						PlotLine__steps = u&#39;left&#39;,
						PlotLine__color = colors[1],
						PlotLine__style = u&amp;quot;solid&amp;quot;,
						PlotLine__width = u&#39;3&#39;,
						FillBelow__color = colors[1],
						FillBelow__style = &amp;quot;forward 2&amp;quot;,
						FillBelow__hide = False,
						FillBelow__transparency = 70,
						#FillBelow__backtransparency = 50,
						FillBelow__linewidth = &#39;1pt&#39;,
						FillBelow__linestyle = &#39;solid&#39;,
						FillBelow__backcolor = &amp;quot;white&amp;quot;,
						FillBelow__backhide = True,
						Label__posnHorz = &#39;right&#39;,
						Label__size = &#39;14pt&#39;, 
						Label__color = &#39;black&#39;
						)

	histKey = graphList[1].Add(&#39;key&#39;, autoadd=False, 
						horzPosn = &#39;left&#39;,
						vertPosn = &#39;top&#39;,
						Text__font = font,
						Text__size = &#39;15&#39;,
						Border__width = &#39;1.5pt&#39;
						)
	
	end = raw_input(&amp;quot;Press any key to finish...&amp;quot;)
	
	figure.Save(&amp;quot;example.vsz&amp;quot;)
	figure.Export(&amp;quot;example.png&amp;quot;, backcolor=&#39;#ffffff&#39;)
	figure.Export(&amp;quot;example.pdf&amp;quot;)

if __name__ == &amp;quot;__main__&amp;quot;:
	inpath = &amp;quot;./&amp;quot;
	outpath = &#39;./&#39;
	tt = time.time()
	plotFunc(inpath, outpath)
	print &amp;quot;Done in &amp;quot;, time.time()-tt, &amp;quot; seconds.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;../../files/example.png&#34; alt=&#34;Veusz plot&#34; title=&#34;Veusz plot&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python
# -*- coding: utf8 -*- 

from __future__ import division # no more &amp;quot;zero&amp;quot; integer division bugs!:P
import time
import numpy as np
import matplotlib.pylab as plt
import matplotlib.font_manager as font_manager

# SM like style
params = {&#39;backend&#39;: &#39;png&#39;,
		&#39;font.family&#39;: &amp;quot;serif&amp;quot;,
		&#39;font.size&#39;: 25,
		&#39;axes.labelsize&#39;: 35,
		#&#39;text.fontsize&#39;: 30,
		&#39;legend.fontsize&#39;: 30,
		&#39;xtick.labelsize&#39;: 28,
		&#39;xtick.major.size&#39;: 20.0,
		&#39;xtick.major.width&#39;: 3.0,
		&#39;xtick.minor.size&#39;: 12.0,
		&#39;xtick.minor.width&#39;: 2,
		&#39;ytick.labelsize&#39;: 28,
		&#39;ytick.major.size&#39;: 20.0,
		&#39;ytick.major.width&#39;: 3.0,
		&#39;ytick.minor.size&#39;: 12.0,
		&#39;ytick.minor.width&#39;: 2,
		#&#39;text.usetex&#39;: True,
		&#39;axes.linewidth&#39;: 3.0,
		&#39;lines.linewidth&#39;: 2,
		&#39;lines.markersize&#39;: 15,
		&#39;axes.grid&#39;: False,
		&#39;grid&#39;: {&#39;color&#39;:&#39;gray&#39;, &#39;linestyle&#39;:&#39;-&#39;, &#39;linewidth&#39;:1},
		&#39;figure.figsize&#39;: (10,10),
		&#39;figure.subplot.left&#39;: 0.15,  # the left side of the subplots of the figure
		&#39;figure.subplot.right&#39;   : 0.95,    # the right side of the subplots of the figure
		&#39;figure.subplot.bottom&#39;  : 0.12,   # the bottom of the subplots of the figure
		&#39;figure.subplot.top&#39;     : 0.92,    # the top of the subplots of the figure
		&#39;figure.subplot.wspace&#39;  : 0.2,    # the amount of width reserved for blank space between subplots
		&#39;figure.subplot.hspace&#39;  : 0.2,    # the amount of height reserved for white space between subplots
		&#39;figure.figsize&#39;: (12, 12)
           }
plt.rcParams.update(params)
	
def sm_hist(data, delta=5, n_bin=None, range_=None):
	dataMin = np.floor(data.min())
	dataMax = np.ceil(data.max())
	n_bin = np.ceil(1.*(dataMax-dataMin) / delta)
	range_ = (dataMin, dataMin + n_bin * delta)
	counts, bin_edges = np.histogram(data, n_bin, range_, density = False)
	# These two lines double the points let you make the histogram
	counts = np.ravel(zip(counts,counts)) 
	bin_edges = np.ravel(zip(bin_edges,bin_edges))
	counts = np.hstack((np.array([0]), counts, np.array([0])))
	return counts, bin_edges
	
	
def sm_hist2(data, delta=5):
	dataMin = np.floor(data.min())
	dataMax = np.ceil(data.max())
	n_bin = np.ceil(1.*(dataMax-dataMin) / delta) + 1
	idxs = ((data  - dataMin) / delta).astype(int)
	counts = np.zeros(n_bin) 
	bin_edges = np.arange(dataMin, dataMax+delta, delta)
	for idx in idxs:
		counts[idx] += 1
	print counts
	# These two lines double the points let you make the histogram
	counts = np.ravel(zip(counts,counts)) 
	bin_edges = np.ravel(zip(bin_edges,bin_edges))
	counts = np.hstack((np.array([0]), counts))
	bin_edges = np.hstack((bin_edges, bin_edges[-1]))
	return counts, bin_edges

def singlePlotScatter(xData, yData, nRows, nCols, x0, y0, rowspan, colspan):
	ax = plt.subplot2grid((nRows,nCols), (x0,y0), rowspan, colspan)
	ax.set_xlabel(&amp;quot;x label&amp;quot;)
	ax.set_ylabel(&amp;quot;y label&amp;quot;)
	ax.set_xscale(&amp;quot;linear&amp;quot;)
	ax.set_yscale(&amp;quot;linear&amp;quot;)
	ax.set_title(&amp;quot;Plot title&amp;quot;)
	ax.title.set_y(1.02) # adjust title position
	ax.xaxis.grid(True, which=&amp;quot;both&amp;quot;)
	ax.yaxis.grid(True, which=&amp;quot;major&amp;quot;)
	ax.plot(xData, yData, 
			color = &amp;quot;green&amp;quot;, 
			markeredgewidth = 0.8, 
			linestyle = &#39;-&#39;, 
			linewidth = 2,
			marker = &#39;o&#39;, 
			markersize = 1, 
			label = &amp;quot;label&amp;quot;)
	return ax

def singlePlotHist(yData, nRows, nCols, x0, y0, rowspan, colspan):
	ax = plt.subplot2grid((nRows,nCols), (x0,y0), rowspan, colspan)
	ax.set_xlabel(&amp;quot;x label&amp;quot;)
	ax.set_ylabel(&amp;quot;y label&amp;quot;)
	ax.set_xscale(&amp;quot;linear&amp;quot;)
	ax.set_yscale(&amp;quot;linear&amp;quot;)
	ax.set_title(&amp;quot;Plot title&amp;quot;)
	ax.title.set_y(1.02) # adjust title position
	ax.xaxis.grid(True, which=&amp;quot;both&amp;quot;)
	ax.yaxis.grid(True, which=&amp;quot;major&amp;quot;)
	counts, bin_edges = sm_hist2(yData, delta = 10)
	ax.set_ylim((0, 1.2*counts.max()))
	
	ax.plot(bin_edges, counts, 
				color = &amp;quot;blue&amp;quot;,
				alpha = 0.8,
				linewidth = 2,
				antialiased = True,
				zorder = 3 
				)
	ax.fill(bin_edges, counts, 
				alpha = 0.5,
				hatch = &amp;quot;/&amp;quot;,
				edgecolor = &amp;quot;blue&amp;quot;,
				facecolor = &amp;quot;white&amp;quot;,
				antialiased = True, 
				label = &amp;quot;whatever you want&amp;quot;
				)
	ax.legend(loc=&#39;upper left&#39;, numpoints = 1, prop=font_manager.FontProperties(size=18)).draw_frame(False)

	return ax

if __name__ == &amp;quot;__main__&amp;quot;:
	tt = time.time()
	xData = np.arange(100) 
	yData = np.random.randint(0, 100, size=100) + np.sin(np.arange(100))
	
	fig = plt.figure()
	fig.suptitle(&amp;quot;Figure title&amp;quot;)
	axs = []
	nPlots = 2
	
	axs.append(singlePlotScatter(xData, yData, nRows=1, nCols=2, x0=0, y0=0, rowspan=1, colspan=1))
	axs.append(singlePlotHist(yData, nRows=1, nCols=2, x0=0, y0=1, rowspan=1, colspan=1))
	
	fig.set_size_inches(20, 10)
	plt.savefig(&amp;quot;./grid.png&amp;quot;, dpi=100)
	plt.close(fig)
	
	print &amp;quot;Done in &amp;quot;, time.time()-tt, &amp;quot; seconds.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;../../files/grid.png&#34; alt=&#34;Matplotlib plot&#34; title=&#34;Mathplotlib plot&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Eating</title>
      <link>http://brunettoziosi.eu/pages/research/fit/</link>
      <pubDate>Thu, 23 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://brunettoziosi.eu/pages/research/fit/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://scikit-learn.org/stable/modules/linear_model.html&#34;&gt;SciKit Generalized Linear Models&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;linear-least-squares-fits-with-errors-in-both-coordinates:6832f5b027bba644337ff6835b5f54a6&#34;&gt;Linear least-squares fits with errors in both coordinates.&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jordanperr/PH291-Dual-Axis-Error-Calculation&#34;&gt;PH291-Dual-Axis-Error-Calculation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://idlastro.gsfc.nasa.gov/ftp/pro/math/fitexy.pro&#34;&gt;IDL function&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://libraries.maine.edu/Spatial/gisweb/spatdb/acsm/ac94053.html&#34;&gt;Weighted least-squares curve fitting with errors in all variables&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;gaussian-processes-variograms-kriging:6832f5b027bba644337ff6835b5f54a6&#34;&gt;Gaussian processes / variograms / Kriging&lt;/h2&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.ambhas.com/tools/html/krige_8py_source.html&#34;&gt;http://www.ambhas.com/tools/html/krige_8py_source.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://hpgl.aoizora.org/index.php?option=com_content&amp;amp;view=article&amp;amp;id=47&amp;amp;Itemid=56&#34;&gt;http://hpgl.aoizora.org/index.php?option=com_content&amp;amp;view=article&amp;amp;id=47&amp;amp;Itemid=56&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://blog.technokrat.nl/?p=409&#34;&gt;http://blog.technokrat.nl/?p=409&lt;/a&gt; (qui usano la versione R in python)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/scikit-learn/scikit-learn/pull/14&#34;&gt;https://github.com/scikit-learn/scikit-learn/pull/14&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://nbviewer.ipython.org/github/fonnesbeck/Bios366/blob/master/notebooks/Section5_1-Gaussian-Processes.ipynb&#34;&gt;http://nbviewer.ipython.org/github/fonnesbeck/Bios366/blob/master/notebooks/Section5_1-Gaussian-Processes.ipynb&lt;/a&gt; (gaussian processes è il nome ufficiale e generico degli algoritmi tipo quelli di krige)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://girs.googlecode.com/svn/trunk/maths/kriging/kriging.py&#34;&gt;http://girs.googlecode.com/svn/trunk/maths/kriging/kriging.py&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://scikit-learn.org/0.11/auto_examples/gaussian_process/plot_gp_regression.html&#34;&gt;http://scikit-learn.org/0.11/auto_examples/gaussian_process/plot_gp_regression.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.gaussianprocess.org/&#34;&gt;http://www.gaussianprocess.org/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://pygpr.sourceforge.net/&#34;&gt;http://pygpr.sourceforge.net/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://sysbio.mrc-bsu.cam.ac.uk/group/images/6/6f/Infpy_gp.pdf&#34;&gt;http://sysbio.mrc-bsu.cam.ac.uk/group/images/6/6f/Infpy_gp.pdf&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://code.google.com/p/python-in-hydrology/source/browse/trunk/codes/foo/krig_example.py?r=9&#34;&gt;https://code.google.com/p/python-in-hydrology/source/browse/trunk/codes/foo/krig_example.py?r=9&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.enthought.com/services/training/geophysics&#34;&gt;https://www.enthought.com/services/training/geophysics&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://ambhas.com/books/python-in-hydrology/book.html&#34;&gt;http://ambhas.com/books/python-in-hydrology/book.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.astroml.org/book_figures/chapter8/fig_gp_example.html&#34;&gt;http://www.astroml.org/book_figures/chapter8/fig_gp_example.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/astroML/astroML/blob/master/book_figures/chapter8/fig_gp_mu_z.py&#34;&gt;https://github.com/astroML/astroML/blob/master/book_figures/chapter8/fig_gp_mu_z.py&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://books.google.it/books?id=2fM8AQAAQBAJ&amp;amp;pg=PA539&amp;amp;lpg=PA539&amp;amp;dq=astroml+variogram&amp;amp;source=bl&amp;amp;ots=_9Pq65sDwK&amp;amp;sig=IU2yqsREt7hze9xjKx3rBrUb5aA&amp;amp;hl=en&amp;amp;sa=X&amp;amp;ei=S40GU5OsGsnStAbM54CYAw&amp;amp;ved=0CCoQ6AEwAA#v=onepage&amp;amp;q=astroml%20variogram&amp;amp;f=false&#34;&gt;http://books.google.it/books?id=2fM8AQAAQBAJ&amp;amp;pg=PA539&amp;amp;lpg=PA539&amp;amp;dq=astroml+variogram&amp;amp;source=bl&amp;amp;ots=_9Pq65sDwK&amp;amp;sig=IU2yqsREt7hze9xjKx3rBrUb5aA&amp;amp;hl=en&amp;amp;sa=X&amp;amp;ei=S40GU5OsGsnStAbM54CYAw&amp;amp;ved=0CCoQ6AEwAA#v=onepage&amp;amp;q=astroml%20variogram&amp;amp;f=false&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://jakevdp.github.io/blog/2013/12/01/kernel-density-estimation/&#34;&gt;http://jakevdp.github.io/blog/2013/12/01/kernel-density-estimation/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://gist.github.com/stober/4964727&#34;&gt;https://gist.github.com/stober/4964727&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>GW links</title>
      <link>http://brunettoziosi.eu/pages/research/GW-links/</link>
      <pubDate>Thu, 31 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://brunettoziosi.eu/pages/research/GW-links/</guid>
      <description>&lt;p&gt;List of useful links about gravitational waves:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://rhcole.com/apps/GWplotter/&#34;&gt;Gravitational waves detector and sources interactive plot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.blackholehunter.org/&#34;&gt;Black hole hunter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ego-gw.it/&#34;&gt;EGO - European Gravitational Observatory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wwwcascina.virgo.infn.it/&#34;&gt;VIRGO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ligo.org/&#34;&gt;LIGO - Laser Interferometer Gravitational Wave Observatory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;ttps://www.elisascience.org&#34;&gt;eLISA - Evolved Laser Interferometer Space Antenna&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.auriga.lnl.infn.it/&#34;&gt;AURIGA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.minigrail.nl/&#34;&gt;MiniGRAIL - Gravitational Radiation Antenna In Leiden&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ipta4gw.org/&#34;&gt;IPTA - International Pulsar Timing Array&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.epta.eu.org/&#34;&gt;EPTA - The European Pulsar Timing Array&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.gwoptics.org/ebook/&#34;&gt;E-Book on gravitational wave detection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.gwoptics.org/processing/&#34;&gt;Games for science teaching, outreach and research&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cplberry.com/&#34;&gt;Christopher Berry hompage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/MOBle/MatchedFiltering&#34;&gt;MatchedFiltering ipython notebook with wave amplitude&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ligo.org/scientists/first2years/&#34;&gt;The First Two Years of Electromagnetic Follow-Up with Advanced LIGO and Virgo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>PhD Project</title>
      <link>http://brunettoziosi.eu/pages/research/phd/</link>
      <pubDate>Thu, 31 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://brunettoziosi.eu/pages/research/phd/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;The impact of stellar evolution and dynamics on the formation of
compact-object binaries&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;figure&gt;
&lt;div style=&#34;border:1px solid black;border-radius: 8px&#34;&gt;
&lt;img src=&#34;../../../files/PhDProjectScheme.svg&#34; alt=&#34;PhD project scheme&#34; style=&#34;width:700px&#34;&gt;
&lt;figcaption&gt;
&lt;hr&gt; Schematic representation of my PhD project.
&lt;/figcaption&gt;
&lt;/div&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;My PhD project is devoted to improving our knowledge on the demographics
and the properties of double compact-objects (DCO) binaries, i.e. black hole-black hole (BH-BH),
neutron star-neutron star (NS-NS) and neutron star-black hole (NS-BH) binaries, inside young dense star clusters.
The goal is to derive accurate predictions for the ground-based Advanced Virgo/LIGO gravitational wave detectors sources.
Gravitational waves (GWs) are among the ``most wanted&amp;rdquo; predictions of General
Relativity: while indirect confirmations of GWs came from observations of pulsar
binaries, a direct detection of GWs is still missing.
Mergers of binaries
are among the most promising sources of GWs in the frequency range that will be
explored by Advanced Virgo and LIGO (~10-10000 Hz).&lt;/p&gt;

&lt;p&gt;My research focus on three main fronts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the impact of dynamics and metallicity on
the formation and evolution of double compact-object binaries&lt;/li&gt;
&lt;li&gt;the effects
of a tidal field on the evolution of star clusters and on the
demography of DCO binaries inside them,&lt;/li&gt;
&lt;li&gt;the changes in the DCO binaries demography
considering different initial structural properties of the clusters (mass, concentration,
primordial binaries fraction, density, &amp;hellip;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To investigate the impact of dynamics and metallicity on double compact-object binaries demography,
I analyzed 600 random realizations of a young dense star cluster at different metallicities.
I was interested in the binary orbital properties, lifetimes, number of exchanges and coalescence timescales
(the time a binary need to merge only because of gravitational wave emission).
We chose young and dense star cluster as environment in which to study DCO binaries
because they are the preferential
environment for star formation (Lada &amp;amp; Lada, 2003) and gravitational interactions are efficient in exchanging
energy on short times.&lt;/p&gt;

&lt;p&gt;My results, published in Ziosi et al. (2014), confirm that the cluster dynamics
favours the formation of BH-BH binaries and were tested against the literature.&lt;/p&gt;

&lt;p&gt;The results I obtained, however, stand on two critical assumptions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I assumed that the
star cluster would life unpeturbed for 100 Myr but after that time they should be
dissolved into the galactic disc because of the host galaxy tidal field&lt;/li&gt;
&lt;li&gt;I only simulated random realizations of a single star cluster model.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Both the assumptions can heavily affect estimations on the demography of the DCO binaries
and the two other parts of my project are devoted to overcome these limitations.&lt;br /&gt;
To face the first issue I implemented in the code
a numerical recipe (the one proposed in Allen &amp;amp; Santillan, 1991) to accurately include the host galaxy gravitational tidal field.
I am now testing the new tidal field. As soon as it is proved to
be reliable I will study the effect of the disk component on the life
of the star clusters and on the DCO binaries dynamics and demography.
In particoular, it is interesting the case in which the cluster is not on a circoular orbit
coplanar with the galactic disk but on an eccentric and inclined one.
In this case the potential changes rapidly with the time and the effect on the cluster can be
remarkable (see Madrid et al., 2014).&lt;/p&gt;

&lt;p&gt;Regarding the second issue, it is necessary to quantify the effect of initial
structural properties of the cluster on the double compact-object binaries population.
First of all, cluster structural properties can affect double compact-object binaries demography&lt;br /&gt;
because they influence the dynamical interactions rate among binaries, exchanges included,
and the cluster surviving time to the tidal field.
Then, analysing a a wide spectrum of different clusters we would be able to
better calibrate the results on the real population of clusters in our galaxy and
in the galaxies at distances smaller than the LIGO/Virgo horizon.
To this purpose, I am running tens of simulations spanning a wide range of initial
structural properties.  All the simulations make havy use of HPC hardware (GPU clusters) and
I built the necessary computational tools to run, manage and analyze all these simulations.
As soon as the simulations are finished, I will explore the results to understand the behaviour of the different clusters.
This would make us able to highlight which aspects of the star clusters
are more relevant on the formation and evolution of such binaries and how they impact on them.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;../GW-links&#34;&gt;GW useful links&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;phd-exams-and-courses:95fca24dc455c95430a659aa78ca2561&#34;&gt;PhD exams and courses&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Galaxy formation (Dr. Poggianti)&lt;/li&gt;
&lt;li&gt;High energy astrophysics (Prof Franceschini)&lt;/li&gt;
&lt;li&gt;Extrasolar planets (Dr. Claudi)&lt;/li&gt;
&lt;li&gt;Scientific projects management (Dr. Farinato)&lt;/li&gt;
&lt;li&gt;Galaxy Archeology (Prof. Saglia)&lt;/li&gt;
&lt;li&gt;Nucleosynthesis in the early galaxy (Prof. Sneden)&lt;/li&gt;
&lt;li&gt;Collisional dynamics in stellar systems (Dr. Mapelli)&lt;/li&gt;
&lt;li&gt;Supernovae (Dr. Pastorello)&lt;/li&gt;
&lt;li&gt;Astronomia X (Dr. Zampieri)&lt;/li&gt;
&lt;li&gt;Paper writing (Prof. Sneden)&lt;/li&gt;
&lt;li&gt;Gravitional lensing (Dr. Giocoli)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;phd-schools-and-conferences:95fca24dc455c95430a659aa78ca2561&#34;&gt;PhD schools and conferences&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.roma1.infn.it/conference/GPU2014/&#34;&gt;Perspectives of GPU computing in Physics and Astrophysics&lt;/a&gt;, Dep. of Physics of Sapienza - Rome, 15-17 Semptember 2014, &lt;a href=&#34;../../files/Presentations/2014-ZiosiRomaGPU&#34;&gt;Poster&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.sexten-cfa.eu/conferences/2014/details/42-stellar-n-body-dynamics&#34;&gt;Stellar N-body Dynamics&lt;/a&gt;, Sport &amp;amp; Kurhotel at Bad Moos - Sexten (Italy), 8-12 September 2014, &lt;a href=&#34;../../files/Presentations/2014-ZiosiSestoNBody.pdf&#34;&gt;Poster&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://members.aei.mpg.de/amaro-seoane/astro-gr-rome&#34;&gt;Astro-GR@Rome&lt;/a&gt;, Rome - Monteporzio Catone, 14-18 July 2014&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.astro.uni-bonn.de/~sambaran/DS2014/&#34;&gt;MODEST 14 - The dance of stars: dense stellar systems from infant to old&lt;/a&gt;, Bad Honnef Physics Center (Germany), 2-6 June 2014, &lt;a href=&#34;../../files/Presentations/2014-ZiosiMODEST14.pdf&#34;&gt;Poster&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://uma.ensta-paristech.fr/conf/gravasco/W2.html&#34;&gt;Dynamics &amp;amp; Kinetic theory of self-gravitating systems Workshop&lt;/a&gt; @ &lt;a href=&#34;http://uma.ensta-paristech.fr/conf/gravasco/home.html&#34;&gt;Gravasco IHP trimester &amp;ldquo;N body gravitational dynamical systems From N=2 to infinity&amp;hellip;&amp;rdquo;&lt;/a&gt;, Paris, 4-8 November 2013&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://uma.ensta-paristech.fr/conf/gravasco/P3.html&#34;&gt;Galactic Dynamics Seminar&lt;/a&gt; @ &lt;a href=&#34;http://uma.ensta-paristech.fr/conf/gravasco/home.html&#34;&gt;Gravasco IHP trimester &amp;ldquo;N body gravitational
dynamical systems From N=2 to infinity&amp;hellip;&amp;rdquo;&lt;/a&gt;, Paris, 21th October-1st November 2013, &lt;a href=&#34;../../files/Presentations/2013-11-08-Gravasco-Ziosi_NO_appendix.pdf&#34;&gt;Presentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Workshop on High Performance Scientific Computing, Strategic Research Project AACSE, 19 Semptember 2013 @ Departement of Information Engineering, Padua&lt;/li&gt;
&lt;li&gt;PhD Summer School on High Performance Scientific Computing, Strategic Research Project AACSE, 16-18 Semptember 2013 @ Departement of Information Engineering, Padua, [Presentation]()&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://agenda.infn.it/conferenceDisplay.py?confId=5719&#34;&gt;INFN School Of Statistics, 3-7 June 2013, Vietri sul Mare (SA)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.roma1.infn.it/teongrav/VESF/SCHOOL2013_WEBSITE/Vesf_School.html&#34;&gt;School on Gravitational Waves, neutrinos
and multiwavelenght e.m. observations: the new frontier of Astronomy&lt;/a&gt;, 10-15 April 2013, Monteporzio Catone (Rome)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mpia.de/imprs-hd/SummerSchools/2012/&#34;&gt;IMPRS Summer School on Computational Astrophysics&lt;/a&gt;, 10-14 September 2012, Heidelberg, Germany&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://isa2012.oa-teramo.inaf.it/index.php/home&#34;&gt;International School of Astrophysics on the Fundamental Cosmic distance scale and the Transient Sky&lt;/a&gt;, 11-15 June 2012, Teramo, Italy, [Presentation]()&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cineca.it/it/content/summer-school-parallel-computing&#34;&gt;Summer School of Parallel Computing&lt;/a&gt;, 2-13 July 2012 @ CINECA&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>StarLab (GPU) old guide</title>
      <link>http://brunettoziosi.eu/pages/research/utils/starlab-gpu-old-guide/</link>
      <pubDate>Fri, 23 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://brunettoziosi.eu/pages/research/utils/starlab-gpu-old-guide/</guid>
      <description>

&lt;h2 id=&#34;to-install-cuda-you-can-try-with-the-cuda-packages-in-the-ubuntu-repositories:3cdfe2013ffbdc941d30732c89ec1c54&#34;&gt;To install CUDA you can try with the CUDA packages in the Ubuntu repositories.&lt;/h2&gt;

&lt;p&gt;If they fail, you have to download CUDA from ****&lt;/p&gt;

&lt;p&gt;To locate the CUDA files you can try:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;locate cuda | grep nvcc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;locate cuda | grep include&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;locate cuda | grep include | grep toolkit&lt;/code&gt; (for the SDK files of the new release)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;locate cuda | grep lib | grep cudaart&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- TEASER_END --&gt;

&lt;h2 id=&#34;sapporo:3cdfe2013ffbdc941d30732c89ec1c54&#34;&gt;Sapporo&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;in setup_sapporo.sh change&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export LD_LIBRARY_PATH=/usr/local/cuda-5.0/:/usr/local/cuda-5.0/samples/common/inc:/usr/include/boost/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(installation of the binary drivers from the NVIDIA site) to&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export LD_LIBRARY_PATH=/usr/include/:/usr/lib/nvidia-cuda-toolkit/include/:/usr/include/boost/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(ubuntu CUDA distro packages)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;in Makefile put the right path in &lt;code&gt;NVCC := /usr/bin/nvcc&lt;/code&gt; and be sure to have the right
paths in&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;CUDAPATH    := /usr/include/
#/usr/local/cuda-5.0
CUDASDKPATH := /usr/lib/nvidia-cuda-toolkit/include/
#/usr/local/cuda-5.0/samples/common/inc
CUDAINCLUDE := -I$(CUDAPATH)/include -I$(CUDASDKPATH)
# RE - added these path/includes (added to NVCCFLAGS and CXXFLAGS, too)
BOOSTPATH := /usr/include/boost 
BOOSTINCLUDE := -I$(BOOSTPATH)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the commented path refers to the binary installation from the NVIDIA site.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Launch &lt;code&gt;bash ./setup_sapporo.sh&lt;/code&gt; and if you get&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;host_evaluate_gravity.cu:3: fatal error: multithreading.h: No such file or directory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;puth &lt;code&gt;multithreading.h&lt;/code&gt; in the sapporo folder and then in &lt;code&gt;host_evaluate_gravity.cu&lt;/code&gt; change&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;multithreading.h&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;quot;multithreading.h&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;so c++ can find the header in the current directory.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;if all is going right, by running again &lt;code&gt;bash setup_sapporo.sh&lt;/code&gt; you should
obtain something like&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/bin/rm -rf *.o *.cu_o libsapporo.a
/bin/rm -rf test_gravity_block test_gravity_N2ngb
g++ -O3 -DNGB -I/usr/include//include -I/usr/lib/nvidia-cuda-toolkit/include/ -I/usr/include/boost    -c -o GPUWorker.o GPUWorker.cc
g++ -O3 -DNGB -I/usr/include//include -I/usr/lib/nvidia-cuda-toolkit/include/ -I/usr/include/boost  -c sapporo.cpp -o sapporo.o
sapporo.cpp: In member function ‘int sapporo::open(int)’:
sapporo.cpp:40:25: warning: ignoring return value of ‘char* fgets(char*, int, FILE*)’, declared with attribute warn_unused_result [-Wunused-result]
sapporo.cpp:42:25: warning: ignoring return value of ‘char* fgets(char*, int, FILE*)’, declared with attribute warn_unused_result [-Wunused-result]
sapporo.cpp:67:24: warning: ignoring return value of ‘char* fgets(char*, int, FILE*)’, declared with attribute warn_unused_result [-Wunused-result]
g++ -O3 -DNGB -I/usr/include//include -I/usr/lib/nvidia-cuda-toolkit/include/ -I/usr/include/boost  -c send_fetch_data.cpp -o send_fetch_data.o
g++ -O3 -DNGB -I/usr/include//include -I/usr/lib/nvidia-cuda-toolkit/include/ -I/usr/include/boost  -c sapporoG6lib.cpp -o sapporoG6lib.o

*/usr/bin/nvcc -O0 -g -D_DEBUG  -maxrregcount=64 -I/usr/include//include -I/usr/lib/nvidia-cuda-toolkit/include/ -I/usr/include/boost  -c host_evaluate_gravity.cu -o host_evaluate_gravity.cu_o
 Iar qv libsapporo.a GPUWorker.o sapporo.o send_fetch_data.o sapporoG6lib.o host_evaluate_gravity.cu_o
ar: creating libsapporo.a
a - GPUWorker.o
a - sapporo.o
a - send_fetch_data.o
a - sapporoG6lib.o
a - host_evaluate_gravity.cu_o
ranlib libsapporo.a
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;to test the compilation run&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;test_gravity_N2ngb 900
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;test_gravity_block 900
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where 900 is the number of particles involved in the test. You can choose the number you prefer
but the test fail if the number is less than ~800.&lt;/p&gt;

&lt;h2 id=&#34;starlab:3cdfe2013ffbdc941d30732c89ec1c54&#34;&gt;StarLab&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;change configure CUDA lines:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;CUDAINC=&amp;quot;-I/usr/include -I/usr/lib/nvidia-cuda-toolkit/include/ -I/usr/include/boost&amp;quot; 
CUDALIB=&amp;quot;-L/usr/libx86_64-linux-gnu/ -lcudart&amp;quot;
LIBS=&amp;quot;$CUDAINC $CUDALIB -lboost_system -lboost_thread -lpthread -DNGB&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;and change local/grape.sh&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;CUDAINC=&amp;quot;-I/usr/include -I/usr/lib/nvidia-cuda-toolkit/include/ -I/usr/include/boost&amp;quot; 
CUDALIB=&amp;quot;-L/usr/libx86_64-linux-gnu/ -lcudart&amp;quot;

# CUDAINC=&amp;quot;-I/usr/local/cuda-5.0/include -I/usr/local/cuda-5.0/samples/common/inc -I/usr/include/boost&amp;quot; 
# CUDALIB=&amp;quot;-L/usr/local/cuda-5.0/lib64/ -lcudart&amp;quot; 

LIBS1=&amp;quot;$CUDAINC $CUDALIB -lboost_system -lboost_thread -lpthread -DNGB&amp;quot;

#g++ -O3 $flags -g -o test_gravity_block test_gravity_block.cpp -L. -lsapporo $CUDAINC $CUDALIB -lboost_thread
g++ -O3 $flags -g -o test_gravity_block test_gravity_block.cpp -L. -lsapporo $CUDAINC $CUDALIB $LIBS1

# Where to find GRAPE libraries:
# GRAPE_LDFLAGS_=&#39;-L/home/mapelli/MICMAP/programmi/sapporo161_release/&#39;
GRAPE_LDFLAGS_=&#39;-L/home/ziosi/Code/Mapelli/starlab/sapporo/sapporo161_release&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;run &lt;code&gt;make clean&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;run &lt;code&gt;./configure --without-fortran&lt;/code&gt; (&lt;code&gt;--without-f77&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;make&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;make install&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;now you can find the &lt;code&gt;kira&lt;/code&gt; binary in &lt;code&gt;/usr/local/bin&lt;/code&gt; or&lt;code&gt;/usr/bin&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;run&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./kira -t 500 -d 1 -D 1 -b 1 \
             -n 10 -e 0.000 -B   \
	 &amp;lt;  cineca95_bin_N5000_frac01_W5_Z001_IC.txt \
	 &amp;gt; new_cineca95_bin_N5000_frac01_W5_Z001.txt \
	 2&amp;gt; ew_cineca95_bin_N5000_frac01_W5_Z001.txt
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Astrocomputing &amp; Astrostatistics</title>
      <link>http://brunettoziosi.eu/pages/research/astrocomputing/</link>
      <pubDate>Thu, 22 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://brunettoziosi.eu/pages/research/astrocomputing/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jakevdp.github.io/blog/2014/03/11/frequentism-and-bayesianism-a-practical-intro&#34;&gt;Frequentism and Bayesianism: A Practical Introduction&lt;/a&gt;
also &lt;a href=&#34;../../../files/FreqBayes.ipynb&#34;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Research</title>
      <link>http://brunettoziosi.eu/pages/research/research/</link>
      <pubDate>Wed, 21 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://brunettoziosi.eu/pages/research/research/</guid>
      <description>

&lt;h2 id=&#34;phd-project:42f623b3bad309d5d6619d450af47d40&#34;&gt;PhD Project&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;The impact of stellar evolution and dynamics on the formation of
compact-object binaries&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I am working on N-body simulations of young and dense star clusters in order to
understand the impact of stellar evolution and dynamics on the formation and evolution
of compact-object (neutron stars and black holes) binary systems.&lt;br /&gt;
These objects are thought to be the best candidates to produce gravitational
waves observable in the near future with the second-generation ground-based
gravitational wave interferometers Advanced Ligo and Virgo.&lt;/p&gt;

&lt;p&gt;More info &lt;a href=&#34;../phd&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;scientific-interests:42f623b3bad309d5d6619d450af47d40&#34;&gt;Scientific interests&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;dynamics of black holes and neutron stars in star clusters&lt;/li&gt;
&lt;li&gt;direct-summation N-body simulations in star clusters&lt;/li&gt;
&lt;li&gt;gravitational waves in the frequency range of Advanced VIRGO and LIGO&lt;/li&gt;
&lt;li&gt;stellar and binary evolution&lt;/li&gt;
&lt;li&gt;big data analysis and visualization&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;master-thesis:42f623b3bad309d5d6619d450af47d40&#34;&gt;Master Thesis&lt;/h2&gt;

&lt;h2 id=&#34;bachelor-thesis:42f623b3bad309d5d6619d450af47d40&#34;&gt;Bachelor Thesis&lt;/h2&gt;

&lt;h2 id=&#34;exam-works:42f623b3bad309d5d6619d450af47d40&#34;&gt;Exam works&lt;/h2&gt;

&lt;h2 id=&#34;useful-links:42f623b3bad309d5d6619d450af47d40&#34;&gt;Useful links&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://adsabs.harvard.edu/abstract_service.html&#34;&gt;Nasa ADS&lt;/a&gt;,
&lt;a href=&#34;http://labs.adsabs.harvard.edu/wiki/doku.php&#34;&gt;Lab version&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://arxiv.org/&#34;&gt;arXiv.org&lt;/a&gt;, &lt;a href=&#34;http://arxiv.org/list/astro-ph/new&#34;&gt;new astro* papers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.unipd.it/&#34;&gt;University of Padua&lt;/a&gt;,
&lt;a href=&#34;http://www.unipd.it/scuole/scienze&#34;&gt;Science School&lt;/a&gt;,
&lt;a href=&#34;http://www.dfa.unipd.it/&#34;&gt;Department of Physics and Astronomy&lt;/a&gt;,
&lt;a href=&#34;http://www.dfa.unipd.it/index.php?id=112&#34;&gt;Building&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>StarLab-GPU installation</title>
      <link>http://brunettoziosi.eu/posts/starlab-gpu-installation/</link>
      <pubDate>Tue, 20 Aug 2013 09:34:11 +0000</pubDate>
      
      <guid>http://brunettoziosi.eu/posts/starlab-gpu-installation/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../../pages/research/utils/starlab-gpu-old-guide&#34;&gt;Click here for the old guide!!!&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;2014/09/16: updated with installation instruction for g2@Swinburne and some troubleshooting.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;UPDATE 2:&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;../dockerized-starlab/&#34;&gt;new post&lt;/a&gt;&lt;/strong&gt; about installing and using StarLab in a Docker container!!
Less troubles, more reproducibility!!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; if you want to compile starlab &lt;strong&gt;without GPU support&lt;/strong&gt;, you only need to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ignore the &amp;ldquo;&lt;code&gt;sapporo&lt;/code&gt;&amp;rdquo;  and &amp;ldquo;&lt;code&gt;CUDA&lt;/code&gt;&amp;rdquo; instructions&lt;/li&gt;
&lt;li&gt;rename &lt;code&gt;starlab/local/grape.sh&lt;/code&gt; to &lt;code&gt;starlab/local/_grape.sh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;substitute &lt;code&gt;configure --without-f77&lt;/code&gt; with &lt;code&gt;configure --with-grape=no --without-f77&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;in case you can&amp;rsquo;t &lt;code&gt;make&lt;/code&gt; succesfully may be you need to copy the folder
&lt;code&gt;starlab/src/gfx&lt;/code&gt; and do not make clean&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Well, probably you landed here searching information about StarLab, how to
install it, how to run it, how prevent it to harm your cat.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DISCLAIMER 1:&lt;/strong&gt; I won&amp;rsquo;t promise anything about your cat but I will try to help you having a
reasonable well running installation of StarLab.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DISCLAIMER 2:&lt;/strong&gt; I&amp;rsquo;m not a programmer, I&amp;rsquo;m not a system administrator and I don&amp;rsquo;t even
know how to program in CUDA (yet). Maybe something here is wrong ore outdated.
I&amp;rsquo;m only giving you some of the experienced I collected in n+1 times I installed StarLab.
Nothin less, nothing more.&lt;br /&gt;
Also note that most of the knowledge I put here come
from my &lt;a href=&#34;http://web.pd.astro.it/mapelli/&#34;&gt;supervisor&lt;/a&gt;.&lt;br /&gt;
I also thanks Mario Spera for the usefull advices.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DISCLAIMER 3:&lt;/strong&gt; StarLab still seems to &lt;strong&gt;always&lt;/strong&gt; crash if you try to simulate a system
with more than ~6000 binaries.&lt;/p&gt;

&lt;h2 id=&#34;starlab:3362ac2b0400c3c64983ad8b2d9efef3&#34;&gt;StarLab&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.sns.ias.edu/~starlab/&#34;&gt;StarLab&lt;/a&gt; is &amp;ldquo;A Software Environment for Collisional Stellar Dynamics&amp;rdquo;.
&lt;a href=&#34;http://www.sns.ias.edu/~starlab/&#34;&gt;Here&lt;/a&gt; you can find useful information about it that
is not useful to rewrite here, so have a look and then come back!:)&lt;/p&gt;

&lt;h2 id=&#34;starlab-gpu:3362ac2b0400c3c64983ad8b2d9efef3&#34;&gt;StarLab-GPU&lt;/h2&gt;

&lt;p&gt;Welcome back!!&lt;br /&gt;
Next step: StarLab was designed to run on &lt;a href=&#34;http://en.wikipedia.org/wiki/Gravity_Pipe&#34;&gt;GRAPE&lt;/a&gt;
but thanks to the &lt;a href=&#34;http://castle.strw.leidenuniv.nl/software/sapporo.html&#34;&gt;Sapporo&lt;/a&gt;
library you can run it on GPUs.&lt;/p&gt;

&lt;p&gt;Now we will try to install a GPU-ready version of StarLab. To be honest, we run
a &lt;strong&gt;private&lt;/strong&gt; version of StarLab for GPU with some customizations (if you are interested,
see &lt;a href=&#34;http://arxiv.org/abs/1211.6441&#34;&gt;Mapelli et al. 2013&lt;/a&gt;; &lt;a href=&#34;http://arxiv.org/abs/1301.4227&#34;&gt;Mapelli &amp;amp; Bressan 2013&lt;/a&gt;).&lt;br /&gt;
Unfortunately you can&amp;rsquo;t download it now, but I hope the differences in the installation
process are negligible. Ask us if you are interested in our version of StarLab.&lt;br /&gt;
Because I&amp;rsquo;m not sure about what you will find in the public version os Sapporo and StarLab,
I will show my version of the relevant files you need to install everything.
The installation is done on a Ubuntu 14.04 workstation so change them accordingly to
your OS. I will also provide some examples on what you need to install StarLab on
the clusters I tested.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s start!!&lt;/p&gt;

&lt;h4 id=&#34;download:3362ac2b0400c3c64983ad8b2d9efef3&#34;&gt;Download&lt;/h4&gt;

&lt;p&gt;Be sure you have boost libraries, nVidia driver and CUDA correctly installed.
You can try to check them using&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;locate cuda | grep nvcc&lt;/code&gt; (cuda compiler)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;locate cuda | grep include&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;locate cuda | grep include | grep toolkit&lt;/code&gt; (for the SDK files of the new release)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;locate cuda | grep lib | grep cudart&lt;/code&gt; (CUDA runtime)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;locate cuda | boost lib&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;locate cuda | boost include&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It could be also useful to have a copy of the old CUDA SDK. Yes, I know, it&amp;rsquo;s a mess,
but it&amp;rsquo;s not my fault!:P&lt;/p&gt;

&lt;p&gt;Download&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.sns.ias.edu/~starlab/download/starlab.tar.gz&#34;&gt;StarLab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://castle.strw.leidenuniv.nl/documents/Sapporo/sapporo161.tgz&#34;&gt;Sapporo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and decompress the archives with &lt;code&gt;tar -xvf archiveName&lt;/code&gt;.&lt;br /&gt;
Try to have the following folder tree:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$SLPATH/slpack&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$SLPATH/slpack/NVIDIA&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$SLPATH/slpack/NVIDIA/NVIDIA_CUDA-5.0_Samples&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$SLPATH/slpack/NVIDIA/NVIDIA_GPU_Computing_SDK&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$SLPATH/slpack/sapporo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$SLPATH/slpack/starlab&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The NVIDIA folder is optional, but I would suggest to have with you alle the NVIDIA
file you can find, soon or later you will need them. CUDA is continuosly changing,
SDK is not toolkit, dependencies are different and broken between different versions.
We will try to survive and to have the most standard installation we can.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$SLPATH&lt;/code&gt; should be the path where you put your StarLab installation.&lt;br /&gt;
I&amp;rsquo;m not sure about what you will find in the public version of StarLab and Sapporo.&lt;/p&gt;

&lt;h3 id=&#34;sapporo:3362ac2b0400c3c64983ad8b2d9efef3&#34;&gt;Sapporo&lt;/h3&gt;

&lt;p&gt;Enter in the sapporo folder, and to be sure to start a clean installation run
&lt;code&gt;make clean&lt;/code&gt;.
Here you need to find:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Makefile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;compile.sh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;host_evaluate_gravity.cu&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;compile.sh&lt;/code&gt; is the script StarLab will run later to decide if you are worthy of
its presence in your computer. If &lt;code&gt;compile.sh&lt;/code&gt; fail, StarLab won&amp;rsquo;t install.&lt;/p&gt;

&lt;p&gt;You also need to find somewhere (= in an old CUDA SKD?)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cutil.h&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;multithreading.h&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and to copy them in this folder.&lt;br /&gt;
If you are not able to find them, ask me, I have copies of those files.&lt;/p&gt;

&lt;p&gt;Open &lt;code&gt;host_evaluate_gravity.cu&lt;/code&gt; and change&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;#include &amp;lt;cutil.h&amp;gt;
#include &amp;lt;multithreading.h&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;#include &amp;quot;cutil.h&amp;quot;
#include &amp;quot;multithreading.h&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is to make Sapporo read the local version of &lt;code&gt;cutil.h&lt;/code&gt; and &lt;code&gt;multithreading.h&lt;/code&gt;
in case your CUDA version does not support them anymore.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s time to fix a bug (thanks Mario):
in &lt;code&gt;sapporo.cpp&lt;/code&gt; change&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;		fprintf(stderr, &amp;quot;\n&amp;quot;);
		nCUDAdevices = how_many;
    } else {
		fprintf(stderr,&amp;quot; sapporo::open - no config file is found \n&amp;quot;);
		fprintf(stderr,&amp;quot;  using all %d CUDA device(s), nj_max= %d\n&amp;quot;, nCUDAdevices, nj_max);
		//Set original_how_many to a positive number so we get assigned different devices
		//incase the devices are not in compute exclusive mode.
		original_how_many = 1;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;		fprintf(stderr, &amp;quot;\n&amp;quot;);
		nCUDAdevices = how_many;
		fclose(fd); // thanks Mario Spera, without this SL will crash after a while if using sapporo.config
  } else {
    fprintf(stderr,&amp;quot; sapporo::open - no config file is found \n&amp;quot;);
    fprintf(stderr,&amp;quot;  using all %d CUDA device(s), nj_max= %d\n&amp;quot;, nCUDAdevices, nj_max);
    //Set original_how_many to a positive number so we get assigned different devices
    //incase the devices are not in compute exclusive mode.
    original_how_many = 1;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;so the &lt;code&gt;sapporo.config&lt;/code&gt; file can be close and won&amp;rsquo;t crash your run.&lt;/p&gt;

&lt;p&gt;Now open &lt;code&gt;Makefile&lt;/code&gt; and fit&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Makefile&#34;&gt;CXX  := g++
CC   := gcc
NVCC := /usr/bin/nvcc
CUDAPATH    := /usr/include/
CUDAINCLUDE := -I$(CUDAPATH) 
BOOSTPATH := /usr/include/boost 
BOOSTINCLUDE := -I$(BOOSTPATH)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to your case.&lt;br /&gt;
Open &lt;code&gt;compile.sh&lt;/code&gt; and be sure to have something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/sh

flags=-DNGB

CUDAINC=&amp;quot;-I/usr/include -I/usr/lib/nvidia-cuda-toolkit/include/&amp;quot;
CUDALIB=&amp;quot;-L/usr/lib/x86_64-linux-gnu/&amp;quot;
CUDAFLAG=&amp;quot;-lcudart&amp;quot;
BOOSTINC=&amp;quot;-I/usr/include/boost&amp;quot;
BOOSTLIB=&amp;quot;-L/usr/lib/x86_64-linux-gnu/&amp;quot;
BOOSTFLAG=&amp;quot;-lboost_system -lboost_thread -lpthread&amp;quot;


g++ -O3 $flags -g -o test_gravity_block test_gravity_block.cpp -L. -lsapporo $CUDAINC $CUDALIB $CUDAFLAG $BOOSTINC $BOOSTLIB $BOOSTFLAG
g++ -O3 $flags -g -o test_gravity_N2ngb test_gravity_N2ngb.cpp -L. -lsapporo $CUDAINC $CUDALIB $CUDAFLAG $BOOSTINC $BOOSTLIB $BOOSTFLAG
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Try to compile with &lt;code&gt;make&lt;/code&gt;. If it works, try to tun &lt;code&gt;bash compile.sh&lt;/code&gt;. If this works too,
then test sapporo with&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;./test_gravity_block 800&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;./test_gravity_block 800&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Be aware that a number (of particles) too small would crash the tests.&lt;/p&gt;

&lt;p&gt;Assuming &lt;code&gt;sapporo&lt;/code&gt; is ready, let&amp;rsquo;s move to starlab.&lt;/p&gt;

&lt;h3 id=&#34;starlab-1:3362ac2b0400c3c64983ad8b2d9efef3&#34;&gt;StarLab&lt;/h3&gt;

&lt;p&gt;In StarLab the relevant files you have to worry about are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sbin/sqrt.c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;configure&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;local/grape.sh&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Rename &lt;code&gt;sbin/sqrt.c&lt;/code&gt; to &lt;code&gt;sbin/sqrt.C&lt;/code&gt; otherwise
you could have linker problems again the C math library.&lt;br /&gt;
Now open &lt;code&gt;configure&lt;/code&gt; and search for CUDA. Probably you won&amp;rsquo;t find anything.&lt;br /&gt;
Search for &lt;code&gt;Check all named libraries for g6_open&lt;/code&gt;, you should find something like&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#   Check all named libraries for g6_open() (GRAPE-6).

    grape6=no

    for gl in $GRAPE_LIBS_; do
        as_ac_Lib=`echo &amp;quot;ac_cv_lib_${gl/-l/}&#39;&#39;_g6_open_&amp;quot; | $as_tr_sh`
echo &amp;quot;$as_me:$LINENO: checking for g6_open_ in -l${gl/-l/}&amp;quot; &amp;gt;&amp;amp;5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;modify it to include boost and CUDA like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;for gl in $GRAPE_LIBS_; do
	CUDAINC=&amp;quot;-I/usr/include -I/usr/lib/nvidia-cuda-toolkit/include/&amp;quot;
	CUDALIB=&amp;quot;-L/usr/lib/x86_64-linux-gnu/&amp;quot;
	CUDAFLAG=&amp;quot;-lcudart&amp;quot;
	BOOSTINC=&amp;quot;-I/usr/include/boost/&amp;quot;
	BOOSTLIB=&amp;quot;-L/usr/lib/x86_64-linux-gnu/&amp;quot;
	BOOSTFLAG=&amp;quot;-lboost_system -lboost_thread -lpthread&amp;quot;
	
	LIBS=&amp;quot;$CUDAINC $CUDALIB $CUDAFLAG $BOOSTINC $BOOSTLIB $BOOSTFLAG -DNGB&amp;quot;
		
	as_ac_Lib=`echo &amp;quot;ac_cv_lib_${gl/-l/}&#39;&#39;_g6_open_&amp;quot; | $as_tr_sh`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Be sure to always use double quotes and to terminate the paths to folders with a slash (&lt;code&gt;/&lt;/code&gt;),
some machines are quite choosy.&lt;/p&gt;

&lt;p&gt;Last edit is on &lt;code&gt;local/grape.sh&lt;/code&gt; to let StarLab know where your sapporo installation is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GRAPE_LDFLAGS_=&#39;-L$SLPATH/slpack/sapporo&#39;
GRAPE_LIBS_=&#39;-lsapporo&#39;
# For now, define this as `yes&#39; for the AMD64 boxes only, `no&#39; otherwise.
OLD_READ_NEIGHBOUR_LIST=no
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Before compiling, if you want, you can check also &lt;code&gt;sapporo/sapporo.config&lt;/code&gt;.&lt;br /&gt;
Inside you will find something like that:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;524288
-1
0
1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where 524288 should be the maximum number of particles you can handle, -1 the number
of CUDA devices to use (-1 means all? maybe&amp;hellip;), 0 and 1 are the GPU number you want to use.&lt;br /&gt;
Recent CUDA seems to be smart enought to understand where to run without having to specify
(but look after your cat!!!).&lt;/p&gt;

&lt;p&gt;Alright!! If you managed to reach this point, very good. Last three commands. In the
&lt;code&gt;starlab&lt;/code&gt; folder run&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;configure --with-f77=no&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;go out for a walk&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;make install&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When running configure, avoid the &lt;code&gt;--without-option&lt;/code&gt; version of an option, prefer
&lt;code&gt;--with-option=no&lt;/code&gt;, it&amp;rsquo;s safer.&lt;/p&gt;

&lt;p&gt;If you recompile StarLab AND/OR Sapporo, type &lt;code&gt;make clean&lt;/code&gt; two times. delete the files in
&lt;code&gt;starlab/usr/bin&lt;/code&gt;, turn around 3 times, touch your nose and type &lt;code&gt;make&lt;/code&gt; two times. Then
&lt;code&gt;make install&lt;/code&gt; again.&lt;br /&gt;
No, &lt;code&gt;make clean&lt;/code&gt; and &lt;code&gt;make&lt;/code&gt; are not enought to update your object
files or binaries.&lt;/p&gt;

&lt;p&gt;Depending on your environment, if you run into problems, be sure that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;you loaded the correct modules (if you are in a cluster for examples&lt;/li&gt;
&lt;li&gt;you are into the right node (some machine let you compile your code on a
node that is not the login node)&lt;/li&gt;
&lt;li&gt;if you encounter strange messages regarding missing rules for missing files,
for example &lt;code&gt;libxhdyn.la&lt;/code&gt; or something regarding &lt;code&gt;gfx&lt;/code&gt;-something, may be tou need to
tune your config file to exclude, for example, the X/Qt/&amp;hellip; libraries, in case
try to run &lt;code&gt;configure --with-f77=no --with-qt=no&lt;/code&gt;; in case try to have a look at
&lt;code&gt;configure --help&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;run-starlab:3362ac2b0400c3c64983ad8b2d9efef3&#34;&gt;Run StarLab&lt;/h3&gt;

&lt;p&gt;Before run a simulation you need to create the initial conditions.&lt;/p&gt;

&lt;h4 id=&#34;initial-conditions:3362ac2b0400c3c64983ad8b2d9efef3&#34;&gt;Initial Conditions&lt;/h4&gt;

&lt;p&gt;StarLab is provided with few tools to help (really?) you in this task. A common
way to create ICs for &lt;a href=&#34;http://arxiv.org/abs/1404.7147&#34;&gt;our simulations&lt;/a&gt; is something like:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;ehm, I don&#39;t know if I can tell you, sorry man...:(&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;launch:3362ac2b0400c3c64983ad8b2d9efef3&#34;&gt;Launch&lt;/h4&gt;

&lt;p&gt;StarLab read ICs from the STDIN, write the output snapshots to STDOUT and everything
you want to know about your simulations to STDERR, so, &lt;code&gt;&amp;lt;ehm.... see ICs&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;tidal-fields:3362ac2b0400c3c64983ad8b2d9efef3&#34;&gt;Tidal fields&lt;/h4&gt;

&lt;p&gt;Be patience&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;known-issues-and-troubleshooting:3362ac2b0400c3c64983ad8b2d9efef3&#34;&gt;Known issues and Troubleshooting&lt;/h3&gt;

&lt;p&gt;If StarLab did not kill your cat in a horrile way, then, it can still ruin your life.&lt;br /&gt;
Some of the things that can happen are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;you can find binaries with eccentricity greater than one (StarLab does
not update some binaries after they are disrupted? flybyes seen as binaries? don&amp;rsquo;t know)&lt;/li&gt;
&lt;li&gt;StarLab can crash if you try to simulate a number of centers of mass greater than
5*10^4 together with a fraction of primordial binaries &amp;gt;=0.1&lt;/li&gt;
&lt;li&gt;boost problems? check the correct flags for your version (choose among some combination of
&lt;code&gt;-lboost_system, -lboost_system-mt, -lboost_thread, -lpthread&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;check you put all the &lt;code&gt;_&lt;/code&gt;, &amp;ldquo;-I&amp;rdquo;, &amp;ldquo;-l&amp;rdquo;, &amp;ldquo;-L&amp;rdquo; in the right places&lt;/li&gt;
&lt;li&gt;check all the libraries paths&lt;/li&gt;
&lt;li&gt;check for double quotes (&lt;code&gt;&amp;quot;&lt;/code&gt;) instead of single ones (&lt;code&gt;&#39;&lt;/code&gt;) in the paths&lt;/li&gt;
&lt;li&gt;check the modules, environment variables&lt;/li&gt;
&lt;li&gt;check you are on the right node&lt;/li&gt;
&lt;li&gt;check your environment against the configure options you passed
(have a look at &lt;code&gt;configure --help&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;if you need to modify StarLab and you want to add your own flags,
you need to comment&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;  getia(b-&amp;gt;get_log_story(), &amp;quot;step_slow&amp;quot;,
        b-&amp;gt;get_kira_counters()-&amp;gt;step_slow, nss);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;function call in &lt;code&gt;kira_counters.C&lt;/code&gt; otherwise you won&amp;rsquo;t be able to compile StarLab.&lt;/p&gt;

&lt;h3 id=&#34;clusters:3362ac2b0400c3c64983ad8b2d9efef3&#34;&gt;Clusters&lt;/h3&gt;

&lt;h4 id=&#34;eurora:3362ac2b0400c3c64983ad8b2d9efef3&#34;&gt;EURORA&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;in &lt;code&gt;setup_sapporo.sh&lt;/code&gt;
(if you want to compile sapporo using queues, or, load modules by hand if you want to
compile interactively)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;module purge
module load profile/advanced
module load gnu/4.6.3
module load boost/1.53.0--gnu--4.6.3
module load cuda

LD_LIBRARY_PATH=/cineca/prod/compilers/cuda/5.0.35/none/lib64:/cineca/prod/libraries/boost/1.53.0/gnu--4.6.3/lib
export LD_LIBRARY_PATH
cd $HOME/slPack/sapporo
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;in &lt;code&gt;compile.sh&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;CUDAINC=&amp;quot;-I/cineca/prod/compilers/cuda/5.0.35/none/include/ -I/cineca/prod/compilers/cuda/5.0.35/none/samples/common/inc/ -I/cineca/prod/libraries/boost/1.53.0/gnu--4.6.3/include/&amp;quot;
CUDALIB=&amp;quot;-L/cineca/prod/compilers/cuda/5.0.35/none/lib64 -L/cineca/prod/libraries/boost/1.53.0/gnu--4.6.3/lib -lcudart&amp;quot;
g++ -O3 $flags -g -o test_gravity_block test_gravity_block.cpp -L. -lsapporo $CUDAINC $CUDALIB -lboost_thread-mt
g++ -O3 $flags -g -o test_gravity_N2ngb test_gravity_N2ngb.cpp -L. -lsapporo $CUDAINC $CUDALIB -lboost_thread-mt
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;in &lt;code&gt;Makefile&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;NVCC := /cineca/prod/compilers/cuda/5.0.35/none/bin/nvcc
CUDAPATH    := /cineca/prod/compilers/cuda/5.0.35/none
CUDASDKPATH := /cineca/prod/compilers/cuda/5.0.35/none/samples
CUDAINCLUDE := -I$(CUDAPATH)/include -I$(CUDASDKPATH)/common/inc 
BOOSTPATH := /cineca/prod/libraries/boost/1.53.0/gnu--4.6.3/include
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;in &lt;code&gt;configure&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;CUDAINC=&amp;quot;-I/cineca/prod/compilers/cuda/5.0.35/none/include -I/cineca/prod/compilers/cuda/5.0.35/none/samples/common/inc -I/cineca/prod/libraries/boost/1.53.0/gnu--4.6.3/include/&amp;quot;
CUDALIB=&amp;quot;-L/cineca/prod/compilers/cuda/5.0.35/none/lib64 -lcudart&amp;quot; 
LIBS=&amp;quot;$CUDAINC $CUDALIB -L/cineca/prod/libraries/boost/1.53.0/gnu--4.6.3/lib -lboost_thread-mt -DNGB&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;in &lt;code&gt;grape.sh&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GRAPE_LDFLAGS_=&#39;-L$HOME/slPack/sapporo/&#39;
GRAPE_LIBS_=&#39;-lsapporo&#39;

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;in &lt;code&gt;setup_starlab.sh.sh&lt;/code&gt;
(if you want to compile sapporo using queues, or, load modules by hand if you want to
compile interactively)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;module purge
module load profile/advanced
module load gnu/4.6.3
module load boost/1.53.0--gnu--4.6.3
module load cuda
LD_LIBRARY_PATH=/cineca/prod/compilers/cuda/5.0.35/none/lib64:/cineca/prod/libraries/boost/1.53.0/gnu--4.6.3/lib
export LD_LIBRARY_PATH
cd $HOME/slPack/starlab
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;green-ii-hpc-system-swinburne-university:3362ac2b0400c3c64983ad8b2d9efef3&#34;&gt;Green II HPC system @ Swinburne University&lt;/h4&gt;

&lt;p&gt;Thanks to prof. Jarrod Hurley I was able to test the installation of StarLab on the Green II HPC
system at the Swinburne University. Here how to do that.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Log into the system and find yourself in the login node.&lt;/li&gt;
&lt;li&gt;Clone the private repo / download the folders and unpack them like described before.&lt;/li&gt;
&lt;li&gt;Then you need to log into one of the compile/test nodes from the head node: &lt;code&gt;ssh $USER@gstar001&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;load the right modules:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;module load gcc/4.6.4
module load boost/x86_64/gnu/1.51.0-gcc4.6
module load cuda/4.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You need that version of &lt;code&gt;gcc&lt;/code&gt; and &lt;code&gt;boost&lt;/code&gt; because of issues with boost threads in the default versions.
Just in case, check that the paths in the &lt;code&gt;Makefile&lt;/code&gt; and &lt;code&gt;compile.h&lt;/code&gt; agree with that shown in&lt;br /&gt;
&lt;code&gt;module show boost/x86_64/gnu/1.51.0-gcc4.6&lt;/code&gt;
and
&lt;code&gt;module show cuda&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Make sure you have no &lt;code&gt;&#39;&lt;/code&gt; around your path, maybe, if you need, only &lt;code&gt;&amp;quot;&lt;/code&gt; otherwise &lt;code&gt;sapporo&lt;/code&gt; won&amp;rsquo;t compile.
Just in case, check that the paths in the &lt;code&gt;Makefile&lt;/code&gt; and &lt;code&gt;compile.h&lt;/code&gt; agree with that shown in&lt;br /&gt;
&lt;code&gt;module show boost/x86_64/gnu/1.51.0-gcc4.6&lt;/code&gt;
and
&lt;code&gt;module show cuda&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you have our private version you can
* &lt;code&gt;cp ../scripts/g2/Makefile ./&lt;/code&gt;
* &lt;code&gt;cp ../scripts/g2/compile.sh ./&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;otherwise try to modify them to have:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;CXX  := g++
CC   := gcc
NVCC := /usr/local/cuda-4.0/bin/nvcc
CUDAINC := -I/usr/local/cuda-4.0/include -I/usr/local/cuda-4.0/C/common/inc 
BOOSTINC := -I/usr/local/x86_64/gnu/boost-1.51.0-gcc4.6
NVCCFLAGS := -O0 -g -D_DEBUG  -maxrregcount=64 $(CUDAINC) $(BOOSTINC) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;in the &lt;code&gt;Makefile&lt;/code&gt; and&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;flags=-DNGB

CUDAINC=&amp;quot;-I/usr/local/cuda-4.0/include -I/usr/local/cuda-4.0/C/common/inc&amp;quot;
CUDALIB=&amp;quot;-L/usr/local/cuda-4.0/lib64 -L/usr/local/cuda-4.0/lib:/usr/local/cuda-4.0/C/lib&amp;quot;
CUDAFLAG=&amp;quot;-lcudart&amp;quot;
BOOSTINC=&amp;quot;-I/usr/local/x86_64/gnu/boost-1.51.0-gcc4.6&amp;quot;
BOOSTLIB=&amp;quot;-L/usr/local/x86_64/gnu/boost-1.51.0-gcc4.6&amp;quot;
BOOSTFLAG=&amp;quot;-lboost_system  -lboost_thread-mt -lpthread&amp;quot;

g++ -O3 $flags -g -o test_gravity_block test_gravity_block.cpp -L. -lsapporo $CUDAINC $CUDALIB $CUDAFLAG $BOOSTINC $BOOSTLIB $BOOSTFLAG
g++ -O3 $flags -g -o test_gravity_N2ngb test_gravity_N2ngb.cpp -L. -lsapporo $CUDAINC $CUDALIB $CUDAFLAG $BOOSTINC $BOOSTLIB $BOOSTFLAG
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;in &lt;code&gt;compile.sh&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then run&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;make clean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bash compile.sh&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;No go the the starlab folder (&lt;code&gt;cd ../starlab&lt;/code&gt;) and fix the &lt;code&gt;configure&lt;/code&gt; file accordingly to this&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#   Check all named libraries for g6_open() (GRAPE-6).

    grape6=no

    for gl in $GRAPE_LIBS_; do
    ##############################
    ######      g2
    ##############################
    CUDAINC=&amp;quot;-I/usr/local/cuda-4.0/include/ -I/usr/local/cuda-4.0/C/common/inc/&amp;quot;
    CUDALIB=&amp;quot;-L/usr/local/cuda-4.0/lib64 -L/usr/local/cuda-4.0/lib:/usr/local/cuda-4.0/C/lib&amp;quot;
    CUDAFLAG=&amp;quot;-lcudart&amp;quot;
    BOOSTINC=&amp;quot;-I/usr/local/x86_64/gnu/boost-1.51.0-gcc4.6/&amp;quot;
    BOOSTLIB=&amp;quot;-L/usr/local/x86_64/gnu/boost-1.51.0-gcc4.6&amp;quot;
    BOOSTFLAG=&amp;quot;-lboost_system  -lboost_thread-mt -lpthread&amp;quot;
    
    LIBS=&amp;quot;$CUDAINC $CUDALIB $CUDAFLAG $BOOSTINC $BOOSTLIB $BOOSTFLAG -DNGB&amp;quot;
        
        
    as_ac_Lib=`echo &amp;quot;ac_cv_lib_${gl/-l/}&#39;&#39;_g6_open_&amp;quot; | $as_tr_sh`

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and the &lt;code&gt;local/grape.sh&lt;/code&gt; file to point to your sapporo installation.&lt;/p&gt;

&lt;p&gt;If you have our version of StarLab, just copy the right files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cp ../scripts/g2/configure ./&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cp ../scripts/g2/grape.sh ./local/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Make sure again &lt;code&gt;grape.sh&lt;/code&gt; points to the right folder&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;./configure --without-f77 --with-qt=no&lt;/code&gt; (if you want qt, load the modules and check the versions)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make clean &amp;amp;&amp;amp; make clean &amp;amp;&amp;amp; make clean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make &amp;amp;&amp;amp; make&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rm ./usr/bin/*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make install&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;** Troubleshooting **&lt;/p&gt;

&lt;p&gt;If you get this error (or some other error)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make[2]: Entering directory `/mnt/home/bziosi/slpack/starlab/src/gfx/lux&#39;
/bin/sh ../../../libtool --preserve-dup-deps --mode=link gcc  -g -O2  -L/usr/lib64/qt-3.3/lib -o libgfx-2.la   win.lo draw.lo draw1.lo color.lo dialog.lo mcd.lo interface.lo termio.lo utility.lo simple.lo  -I/usr/local/cuda-4.0/include -I/usr/local/cuda-4.0/C/common/inc -L/usr/local/cuda-4.0/lib64 -L/usr/local/cuda-4.0/lib:/usr/local/cuda-4.0/C/lib -lcudart -L/usr/local/x86_64/gnu/boost-1.51.0-gcc4.6 -lboost_system  -lboost_thread-mt -lpthread -DNGB
ar cru .libs/libgfx-2.a  win.o draw.o draw1.o color.o dialog.o mcd.o interface.o termio.o utility.o simple.o
ar: interface.o: No such file or directory
make[2]: *** [libgfx-2.la] Error 1
make[2]: Leaving directory `/mnt/home/bziosi/slpack/starlab/src/gfx/lux&#39;
make[1]: *** [clibs23] Error 2
make[1]: Leaving directory `/mnt/home/bziosi/slpack/starlab/src/gfx&#39;
make: *** [libs] Error 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;when compiling may be you can try to &lt;code&gt;make&lt;/code&gt; and &lt;code&gt;make clean&lt;/code&gt; some times.&lt;br /&gt;
Also remember that make clean is not working properly, so you need to &lt;code&gt;make clean&lt;/code&gt; more than once or delete the binaries by yourself.&lt;/p&gt;

&lt;p&gt;If you have errors regarding no rules for &lt;code&gt;libxhdyn.la&lt;/code&gt;, probably you forgot to exclude
some options from the configure, so run &lt;code&gt;configure --with-f77=no --with-qt=no&lt;/code&gt; or try &lt;code&gt;configure --help&lt;/code&gt;
to check for other options.&lt;/p&gt;

&lt;h3 id=&#34;additional-material:3362ac2b0400c3c64983ad8b2d9efef3&#34;&gt;Additional material&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Code units (coming soon&amp;hellip;)&lt;/li&gt;
&lt;li&gt;StarLab internals (TODO)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bitbucket.org/michelis/slpack&#34;&gt;Our repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/brunetto/sltools&#34;&gt;Tools to easily manage SL runs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.science.uva.nl/sites/modesta/wiki/index.php/Starlab_tools&#34;&gt;StarLab tools wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>AGN for Dummies</title>
      <link>http://brunettoziosi.eu/posts/agn-for-dummies/</link>
      <pubDate>Tue, 20 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://brunettoziosi.eu/posts/agn-for-dummies/</guid>
      <description>&lt;p&gt;Another infographic attempt from one of my PhD exams!&lt;/p&gt;

&lt;p&gt;See the the &lt;a href=&#34;infographics-attempts.html&#34;&gt;other ones too&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;../../files/very_unified_model_bck.png&#34;&gt;&lt;img alt=&#34;AGN for Dummies&#34; src=&#34;../../files/very_unified_model_bck.png&#34; title=&#34;AGN for Dummies&#34; width=&#34;800&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Latex together with matplotlib!</title>
      <link>http://brunettoziosi.eu/posts/latex-together-with-matplotlib/</link>
      <pubDate>Fri, 01 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>http://brunettoziosi.eu/posts/latex-together-with-matplotlib/</guid>
      <description>&lt;p&gt;Sometimes you need to label your plot with math expression or Greek letters and ASCII is not enough.&lt;br /&gt;
Everything you need is to add to your script&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from matplotlib import rc
rc(&#39;font&#39;,**{&#39;family&#39;:&#39;sans-serif&#39;,&#39;sans-serif&#39;:[&#39;Helvetica&#39;]})
## for Palatino and other serif fonts use:
#rc(&#39;font&#39;,**{&#39;family&#39;:&#39;serif&#39;,&#39;serif&#39;:[&#39;Palatino&#39;]))
rc(&#39;text&#39;, usetex=True)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and write you text label like&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;label = r&#39;theoretical $f(nu)$&#39;)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Essential guide to binning</title>
      <link>http://brunettoziosi.eu/posts/essential-guide-to-binning/</link>
      <pubDate>Fri, 25 May 2012 00:00:00 +0000</pubDate>
      
      <guid>http://brunettoziosi.eu/posts/essential-guide-to-binning/</guid>
      <description>

&lt;p&gt;Often I found myself fighting against data binning, trying to understand the relation between linear and logarithmic bins and how to create the bin starting from the bins number or the bins spacing.&lt;br /&gt;
It&amp;rsquo;s time to write down some consideration and snippet!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To be updated&amp;hellip;&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;linear-vs-logarithmic:22c59b26f192e65f682baafbd76fbd27&#34;&gt;Linear vs logarithmic&lt;/h2&gt;

&lt;p&gt;I live in a linear space. My advisor and a lot of other scientists live in a logarithmic space. It&amp;rsquo;s quite difficult to easily communicate, but trying to &amp;ldquo;mask&amp;rdquo; this difference life can be more peaceful.&lt;br /&gt;
Hereafter I would like to thing about &amp;ldquo;equally spaced bins&amp;rdquo;. It&amp;rsquo;s not important if they are linearly or logarithmically equally spaced because you can take the same snippet of code and pass to it a logarithmic array, or logarithmic boundaries.&lt;/p&gt;

&lt;h2 id=&#34;from-one-to-the-other:22c59b26f192e65f682baafbd76fbd27&#34;&gt;From one to the other&lt;/h2&gt;

&lt;p&gt;Suppose you have an array.  How much will be the bin spacing to obtain &lt;code&gt;n_bin&lt;/code&gt; bins?&lt;br /&gt;
It can be easily computed as&lt;br /&gt;
&lt;code&gt;$\delta_{bin} = (sup-inf)/n_{bin}$&lt;/code&gt;&lt;br /&gt;
From this it&amp;rsquo;s also straightforward to obtain the number of bins from the spacing:&lt;br /&gt;
&lt;code&gt;$n_{bin} = \lfloor(sup-inf)/\delta_{bin}\rfloor$&lt;/code&gt;&lt;br /&gt;
Note that we choose the number of bins to be integer.&lt;/p&gt;

&lt;h2 id=&#34;code:22c59b26f192e65f682baafbd76fbd27&#34;&gt;Code&lt;/h2&gt;

&lt;p&gt;Here some code to bin your arrays:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python
import sys
import numpy as np

def binning(inf, sup, n_bin=None, delta_bin=None):
	&amp;quot;&amp;quot;&amp;quot;Given the inf and sup limits of an array and the number of equally spaced
	bins, it returns the bin centers, the bin limits and the bin spacing.
	It&#39;s possible to have a linear or a logarithmic spacing passing linear or
	logarithmic inf and sup, and searchsorting on a linear or logarithmic array, 
	or you can use a linear array and logarithmically spaced bins as
	new_bins = pow(10, logbins)
	&amp;quot;&amp;quot;&amp;quot;
	if (n_bin == 0) or (n_bin == 0):
		print &amp;quot;Error, n_bin and/or delta_bin are/is zero, exit!&amp;quot;
		sys.exit()    
	elif (n_bin == None) and (delta_bin != None):
		n_bin = (sup-inf)/delta_bin
		elif (n_bin == None) and (delta_bin == None):
		print &amp;quot;Error, n_bin and delta_bin are both None, exit!&amp;quot;
		sys.exit()
	temp, half_step = np.linspace(inf, sup, 2*n_bin+1, endpoint = True, retstep = True)
	xrange_limit = int(np.floor(temp.size / 2))
	bin_pos = np.zeros(xrange_limit)
	bin_limits = np.zeros(xrange_limit+1)
	for i in xrange(xrange_limit):
		bin_pos[i] = temp[2*i+1]
		bin_limits[i] = temp[2*i]
		bin_limits[-1] = temp[-1]
	del temp
	return [bin_pos, bin_limits, 2*half_step]

def base_binning(inf, sup, n_bin=None, delta_bin=None):
	&amp;quot;&amp;quot;&amp;quot;More C-like...
	&amp;quot;&amp;quot;&amp;quot;
	if (n_bin == 0) or (n_bin == 0):
		print &amp;quot;Error, n_bin and/or delta_bin are/is zero, exit!&amp;quot;
		sys.exit()    
	elif (n_bin == None) and (delta_bin != None):
		n_bin = int((sup-inf)/(1.*delta_bin))
	elif (n_bin != None) and (delta_bin == None):
		delta_bin = (sup-inf)/(1.*n_bin)
	elif (n_bin == None) and (delta_bin == None):
		print &amp;quot;Error, n_bin and delta_bin are both None, exit!&amp;quot;
		sys.exit()
	bin_pos = np.zeros(n_bin)
	bin_limits = np.zeros(n_bin+1)
	for i in range(n_bin):
		if i%2 == 0:
			bin_limits[i] = inf + i * delta_bin
			bin_limits[i+1] = bin_limits[i] + delta_bin
	bin_pos[i] = bin_limits[i] + delta_bin/2.
	bin_limits[n_bin] = inf + n_bin * delta_bin
	return [bin_pos, bin_limits, delta_bin]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>