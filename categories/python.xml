<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>for further reference... (Python)</title><link>brunetto.github.io</link><description>This is a demo site for Nikola.</description><lastBuildDate>Tue, 20 Aug 2013 17:50:19 GMT</lastBuildDate><generator>nikola</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Second Pelican attempt: creating a blog on GitHub with Pelican</title><link>brunetto.github.io/posts/second-pelican-attempt-creating-a-blog-on-github-with-pelican.html</link><description>&lt;h2&gt;How to create a blog with GitHub and Pelican (Python)&lt;/h2&gt;
&lt;h4&gt;Suppose that you are curios about GitHub pages... but I don't understand their guide.&lt;/h4&gt;
&lt;h4&gt;And suppose that you don't like Ruby but prefer Python...&lt;/h4&gt;
&lt;p&gt;First of all create a repo named &lt;code&gt;youname.github.com&lt;/code&gt; on your GitHub account 
(ok, maybe, before this, you have to create a GitHub account!).  &lt;br&gt;
Then set the remote origin locally with    &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;    &lt;span class="c"&gt;# I use ssh because I can log in without a password saving my key at https://github.com/settings/ssh    &lt;/span&gt;
    git remote add origin ssh://git@github.com/yourname/yourname.github.com.git    
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now you can follow the excellent guide by &lt;a href="http://martinbrochhaus.com/2012/02/pelican.html"&gt;Martin&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Maybe you need to change     &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;    mkvirtualenv -p python2.7 blog    
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;with something like     &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;    mkvirtualenv -p /usr/bin/python blog    
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you need to write equation, use &lt;a href="http://www.mathjax.org/"&gt;MathJax&lt;/a&gt; is straightforward.
Following &lt;a href="http://www.ceremade.dauphine.fr/~amic/en/blog/mathjax-and-pelican.html"&gt;this post&lt;/a&gt;
you only need to add few lines to the &lt;code&gt;base.html&lt;/code&gt; of your theme and write latex-style equation like
&lt;code&gt;$$\frac{x_n}{x_{n+1}}$$&lt;/code&gt; to obtain    &lt;/p&gt;
&lt;p&gt;$$\frac{x_n}{x_{n+1}}$$    &lt;/p&gt;
&lt;p&gt;If you want to show code you only need to indent it with four spaces and put the 
languade identifier (&lt;code&gt;:::python&lt;/code&gt;) on the top, indented in the same way (.=space):&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="p"&gt;....&lt;/span&gt;&lt;span class="o"&gt;:::&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;    
&lt;span class="p"&gt;....&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;print_python&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    
&lt;span class="p"&gt;........&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="s"&gt;"Python:)"&lt;/span&gt;    
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;produces&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_python&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;"Python:)"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, if can also blog from the &lt;a href="http://ipython.org/notebook.html"&gt;IPython Notebook&lt;/a&gt;
following the &lt;a href="http://danielfrg.github.com/blog/2013/03/08/pelican-ipython-notebook-plugin/"&gt;guide by Daniel&lt;/a&gt;.    &lt;/p&gt;
&lt;p&gt;And That's all Folks!:P&lt;/p&gt;
&lt;p&gt;PS: see also &lt;a href="http://blog.xlarrakoetxea.org/posts/2012/10/creating-a-blog-with-pelican/"&gt;this&lt;/a&gt; great guide&lt;/p&gt;</description><category>blogging</category><category>Python</category><category>Pelikan</category><guid>brunetto.github.io/posts/second-pelican-attempt-creating-a-blog-on-github-with-pelican.html</guid><pubDate>Fri, 08 Mar 2013 00:00:00 GMT</pubDate></item><item><title>Asterisks and Python</title><link>brunetto.github.io/posts/asterisks-and-python.html</link><description>&lt;div&gt;&lt;p&gt;There are many possible uses of the "*" in Python, to be not confused, this is a brief summary of them.  &lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="/posts/asterisks-and-python.html"&gt;Read more...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>asterisk</category><category>Computer</category><category>function</category><category>PhD</category><category>Python</category><category>imported</category><guid>brunetto.github.io/posts/asterisks-and-python.html</guid><pubDate>Mon, 07 May 2012 00:00:00 GMT</pubDate></item><item><title>Parameter space parallel exploration in Python</title><link>brunetto.github.io/posts/parameter-space-parallel-exploration-in-python.html</link><description>&lt;div&gt;&lt;p&gt;Today a friend of mine ask me how to quickly and easily parallelize a parameter space exploration in his code. "Quickly and easily" means "do not try to use &lt;a href="http://www.brunettoziosi.eu/blog/wordpress/phd-question-3-monte-carlo-markov-chain/" target="_blank" title="PhD question #3: Monte Carlo Markov chain"&gt;MCMC&lt;/a&gt; or something similar!!!".     &lt;/p&gt;
&lt;p&gt;&lt;a href="/posts/parameter-space-parallel-exploration-in-python.html"&gt;Read more...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>astro/physics</category><category>parallel</category><category>parameter</category><category>PhD</category><category>Python</category><category>imported</category><guid>brunetto.github.io/posts/parameter-space-parallel-exploration-in-python.html</guid><pubDate>Thu, 03 May 2012 00:00:00 GMT</pubDate></item><item><title>The "initial condition" saga</title><link>brunetto.github.io/posts/the-initial-condition-saga.html</link><description>&lt;div&gt;&lt;p&gt;If reading the previous posts on N-body simulations you have though that initial conditions are a little and easy task, you were wrong! And me with you!  &lt;br&gt;
The first things I have understood banging against them were:    &lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;Gadget requires initial conditions (ICs) generate by (for example) N-GenIC&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;N-GenIC requires an initial power spectrum from CMBFast that is no longer used&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CMBeasy should substitute CMBFast but it doesn't, it only works for CMB anisotropies&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CAMB should substitute CMBFast&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the &lt;a href="http://lambda.gsfc.nasa.gov/toolbox/tb_camb_form.cfm" target="_blank" title="CAMB online interface"&gt;CAMB interface&lt;/a&gt; is terrible and not very documentated&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;a href="/posts/the-initial-condition-saga.html"&gt;Read more...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>astro/physics</category><category>CAMB</category><category>Cosmology</category><category>gadget</category><category>ICs</category><category>initial conditions</category><category>N-GenIC</category><category>PhD</category><category>power spectrum</category><category>Python</category><category>spectrum</category><category>imported</category><guid>brunetto.github.io/posts/the-initial-condition-saga.html</guid><pubDate>Tue, 31 Jan 2012 00:00:00 GMT</pubDate></item><item><title>GIF2 files Python reader</title><link>brunetto.github.io/posts/gif2-files-python-reader.html</link><description>&lt;div&gt;&lt;p&gt;I create this script on the basis of the code to read the Millennium II data (the same used &lt;a href="http://elbrunz.wordpress.com/2011/12/02/from-binaries-to-hdf5-using-python/" title="From binaries to HDF5 using Python"&gt;here&lt;/a&gt;) provided by &lt;a href="http://mbk.ps.uci.edu/index.html" title="Mike Boylan-Kolchin"&gt;Mike Boylan-Kolchin&lt;/a&gt;. Being allowed to read the Fortran code to write and read the GIF2 files I could adapt this script to exactly fit this problem.    &lt;/p&gt;
&lt;p&gt;&lt;a href="/posts/gif2-files-python-reader.html"&gt;Read more...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>astro/physics</category><category>Cosmology</category><category>Master Thesis</category><category>millennium</category><category>N-body</category><category>Python</category><category>simulation</category><category>imported</category><guid>brunetto.github.io/posts/gif2-files-python-reader.html</guid><pubDate>Tue, 06 Dec 2011 00:00:00 GMT</pubDate></item><item><title>Cosmological simulations #7: Limitations and some considerations</title><link>brunetto.github.io/posts/cosmological-simulations-7-limitations-and-some-considerations.html</link><description>&lt;div&gt;&lt;p&gt;&lt;strong&gt;Limitations&lt;/strong&gt;    &lt;/p&gt;
&lt;p&gt;In the previous posts we encountered some of the limitations of cosmological  &lt;br&gt;
simulations. Let's review these in detail.  &lt;br&gt;
First, we can consider a simulation composed of a finite box in a bigger space but to represent a real system, this box shouldn't be isolated so we use the periodic boundary conditions (&lt;a href="http://brunettoziosi.blogspot.it/2011/11/cosmological-simulations-2-how.html" target="_blank" title="Cosmological simulations #2: how?"&gt;here&lt;/a&gt;). This means that all the space around the box is filled with images of the box itself: a particle that leaves the box from one side will come in  &lt;br&gt;
from the opposite side.   &lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="/posts/cosmological-simulations-7-limitations-and-some-considerations.html"&gt;Read more...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>astro/physics</category><category>Cosmology</category><category>Master Thesis</category><category>millennium</category><category>N-body</category><category>Python</category><category>simulation</category><category>imported</category><guid>brunetto.github.io/posts/cosmological-simulations-7-limitations-and-some-considerations.html</guid><pubDate>Sun, 04 Dec 2011 00:00:00 GMT</pubDate></item><item><title>GIF2 substructures coordinates correction</title><link>brunetto.github.io/posts/gif2-substructures-coordinates-correction.html</link><description>&lt;div&gt;&lt;p&gt;I used this script to change the coordinates of the substructures in the GIF2 simulation output from the center of mass coordinates to the global ones. The substructures were stored in our server in files referring to the index of the halo to which they belong and their coordinates were respect to the center of the halo. For each halo this script read the subhaloes center of mass coordinates in kpc and change them to global coordinates in Mpc managing the periodic boundary conditions .    &lt;/p&gt;
&lt;p&gt;&lt;a href="/posts/gif2-substructures-coordinates-correction.html"&gt;Read more...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>astro/physics</category><category>Cosmology</category><category>Master Thesis</category><category>millennium</category><category>N-body</category><category>Python</category><category>simulation</category><category>imported</category><guid>brunetto.github.io/posts/gif2-substructures-coordinates-correction.html</guid><pubDate>Sun, 04 Dec 2011 00:00:00 GMT</pubDate></item><item><title>From .csv to HDF5 in Python</title><link>brunetto.github.io/posts/from-csv-to-hdf5-in-python.html</link><description>&lt;div&gt;&lt;p&gt;PyTables is a Python library that provide a simple but really useful interface to manage the HDF5 files with some other interesting features (compression, optimizations, ...). To the library presentation and documentation, for now refers, to the &lt;a href="http://www.pytables.org/moin" target="_blank" title="site"&gt;site&lt;/a&gt;.  &lt;br&gt;
I used it a lot during my master thesis to manage the dataset from the Millennium database.  &lt;br&gt;
Here I provide a brief review of how I used it to store data obtained in .csv (comma separated values) format.    &lt;/p&gt;
&lt;p&gt;&lt;a href="/posts/from-csv-to-hdf5-in-python.html"&gt;Read more...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>code</category><category>Python</category><guid>brunetto.github.io/posts/from-csv-to-hdf5-in-python.html</guid><pubDate>Fri, 02 Dec 2011 00:00:00 GMT</pubDate></item><item><title>From binaries to HDF5 using Python</title><link>brunetto.github.io/posts/from-binaries-to-hdf5-using-python.html</link><description>&lt;div&gt;&lt;p&gt;I have used this script to convert the Millennium II data from the unformatted fortran binary formato to the DF5 one.  &lt;br&gt;
The core of the script is a module (&lt;code&gt;modified_read_snapshots&lt;/code&gt;) built on the basis of a script kindly provided by &lt;a href="http://mbk.ps.uci.edu/index.html" target="_blank" title="Mike Boylan-Kolchin"&gt;Mike Boylan-Kolchin&lt;/a&gt; from the group that perform the Millennium II simulation.     &lt;/p&gt;
&lt;p&gt;&lt;a href="/posts/from-binaries-to-hdf5-using-python.html"&gt;Read more...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>code</category><category>Python</category><guid>brunetto.github.io/posts/from-binaries-to-hdf5-using-python.html</guid><pubDate>Fri, 02 Dec 2011 00:00:00 GMT</pubDate></item><item><title>Python slicing, rebinning and indexing</title><link>brunetto.github.io/posts/python-slicing-rebinning-and-indexing.html</link><description>&lt;div&gt;&lt;p&gt;During my master thesis I had to manage a lot of (different) data from GIF and GIF2 projects, Millimillennium, Millenium and Millennium 2 simulations and so on. Sometimes there were the need to sort, divide or rearrange these dataset.   &lt;br&gt;
Here some examples.    &lt;/p&gt;
&lt;p&gt;&lt;a href="/posts/python-slicing-rebinning-and-indexing.html"&gt;Read more...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>code</category><category>Python</category><guid>brunetto.github.io/posts/python-slicing-rebinning-and-indexing.html</guid><pubDate>Fri, 25 Nov 2011 00:00:00 GMT</pubDate></item></channel></rss>