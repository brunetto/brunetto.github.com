<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>for future reference... (Python)</title><link>brunetto.github.io</link><description>This is a demo site for Nikola.</description><lastBuildDate>Thu, 22 Aug 2013 12:27:26 GMT</lastBuildDate><generator>nikola</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Second Pelican attempt: creating a blog on GitHub with Pelican</title><link>brunetto.github.io/posts/second-pelican-attempt-creating-a-blog-on-github-with-pelican.html</link><description>&lt;h2&gt;How to create a blog with GitHub and Pelican (Python)&lt;/h2&gt;
&lt;h4&gt;Suppose that you are curios about GitHub pages... but I don't understand their guide.&lt;/h4&gt;
&lt;h4&gt;And suppose that you don't like Ruby but prefer Python...&lt;/h4&gt;
&lt;p&gt;First of all create a repo named &lt;code&gt;youname.github.com&lt;/code&gt; on your GitHub account 
(ok, maybe, before this, you have to create a GitHub account!).  &lt;br&gt;
Then set the remote origin locally with    &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;    &lt;span class="c"&gt;# I use ssh because I can log in without a password saving my key at https://github.com/settings/ssh    &lt;/span&gt;
    git remote add origin ssh://git@github.com/yourname/yourname.github.com.git    
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now you can follow the excellent guide by &lt;a href="http://martinbrochhaus.com/2012/02/pelican.html"&gt;Martin&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Maybe you need to change     &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;    mkvirtualenv -p python2.7 blog    
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;with something like     &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;    mkvirtualenv -p /usr/bin/python blog    
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you need to write equation, use &lt;a href="http://www.mathjax.org/"&gt;MathJax&lt;/a&gt; is straightforward.
Following &lt;a href="http://www.ceremade.dauphine.fr/~amic/en/blog/mathjax-and-pelican.html"&gt;this post&lt;/a&gt;
you only need to add few lines to the &lt;code&gt;base.html&lt;/code&gt; of your theme and write latex-style equation like
&lt;code&gt;$$\frac{x_n}{x_{n+1}}$$&lt;/code&gt; to obtain    &lt;/p&gt;
&lt;p&gt;$$\frac{x_n}{x_{n+1}}$$    &lt;/p&gt;
&lt;p&gt;If you want to show code you only need to indent it with four spaces and put the 
languade identifier (&lt;code&gt;:::python&lt;/code&gt;) on the top, indented in the same way (.=space):&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="p"&gt;....&lt;/span&gt;&lt;span class="o"&gt;:::&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;    
&lt;span class="p"&gt;....&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;print_python&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    
&lt;span class="p"&gt;........&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="s"&gt;"Python:)"&lt;/span&gt;    
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;produces&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_python&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;"Python:)"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, if can also blog from the &lt;a href="http://ipython.org/notebook.html"&gt;IPython Notebook&lt;/a&gt;
following the &lt;a href="http://danielfrg.github.com/blog/2013/03/08/pelican-ipython-notebook-plugin/"&gt;guide by Daniel&lt;/a&gt;.    &lt;/p&gt;
&lt;p&gt;And That's all Folks!:P&lt;/p&gt;
&lt;p&gt;PS: see also &lt;a href="http://blog.xlarrakoetxea.org/posts/2012/10/creating-a-blog-with-pelican/"&gt;this&lt;/a&gt; great guide&lt;/p&gt;</description><category>blogging</category><category>Python</category><category>Pelikan</category><guid>brunetto.github.io/posts/second-pelican-attempt-creating-a-blog-on-github-with-pelican.html</guid><pubDate>Fri, 08 Mar 2013 00:00:00 GMT</pubDate></item><item><title>Latex together with matplotlib!</title><link>brunetto.github.io/posts/latex-together-with-matplotlib.html</link><description>&lt;p&gt;Sometimes you need to label your plot with math expression or Greek letters and ASCII is not enough.  &lt;br&gt;
Everything you need is to add to your script    &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;matplotlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;rc&lt;/span&gt;
&lt;span class="n"&gt;rc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'font'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'family'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;'sans-serif'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'sans-serif'&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s"&gt;'Helvetica'&lt;/span&gt;&lt;span class="p"&gt;]})&lt;/span&gt;
&lt;span class="c"&gt;## for Palatino and other serif fonts use:&lt;/span&gt;
&lt;span class="c"&gt;#rc('font',**{'family':'serif','serif':['Palatino']))&lt;/span&gt;
&lt;span class="n"&gt;rc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'text'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;usetex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and write you text label like    &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;r'theoretical $f(nu)$'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><category>latex</category><category>matplotlib</category><category>Python</category><category>plot</category><category>imported</category><guid>brunetto.github.io/posts/latex-together-with-matplotlib.html</guid><pubDate>Fri, 01 Jun 2012 00:00:00 GMT</pubDate></item><item><title>HDF5 in Python: PyTables</title><link>brunetto.github.io/posts/hdf5-in-python-pytables.html</link><description>&lt;p&gt;&lt;a href="http://www.hdfgroup.org/HDF5/" target="_blank" title="HDF5 Group homepage"&gt;HDF5&lt;/a&gt; is a wonderful file format you can use to put into tons of data with easy, without the need to think about endianess, binary formats and so on.  &lt;br&gt;
Pytables is an extremely optimized library built on top of HDF5 capabilities to make even simpler the use of this type of file.  &lt;br&gt;
It's also possible to navigate into a file graphically with &lt;a href="http://vitables.org/" target="_blank" title="ViTables homepage"&gt;ViTables&lt;/a&gt;.  &lt;br&gt;
Here I would like to present some of the features I use more often.  &lt;br&gt;&lt;!--more--&gt;&lt;br&gt;
Open, flush and close a file    &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tables&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;tb&lt;/span&gt;

&lt;span class="n"&gt;h5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;openfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"filename.h5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;h5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;h5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where &lt;code&gt;'r'&lt;/code&gt; means "open the file in read-only mode". It's also possible to open it as &lt;code&gt;'w'&lt;/code&gt; (create a new file: it overwrites the file if it still exists) and &lt;code&gt;'a'&lt;/code&gt; (append: create if it does not exist, if it exists, read and modify it).    &lt;/p&gt;
&lt;p&gt;Create a group to contain some data    &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;group&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;h5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;createGroup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"group"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where &lt;code&gt;h5.root&lt;/code&gt; is the location of the new object created (where we want to create the group) and can also be passe as string ("/") and &lt;code&gt;"group"&lt;/code&gt; is the string with the name.    &lt;/p&gt;
&lt;p&gt;Store an array    &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;h5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;createArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;array_to_store&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'title'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;h5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;createArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/group"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;array_to_store&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'title'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Create a table (from &lt;a href="/posts/create-recreate-and-remove-duplicates-in-array-manipulation-obviously-in-python.html"&gt;Create, recreate and remove duplicates in array manipulation, obviously in Python!:)&lt;/a&gt; or &lt;a href="/posts/from-csv-to-hdf5-in-python.html"&gt;From .csv to HDF5 in Python&lt;/a&gt;    &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"filename.csv"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;genfromtxt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;([(&lt;/span&gt;&lt;span class="s"&gt;'column_1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'i8'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'column_2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'f4'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'column_3'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'f4'&lt;/span&gt;&lt;span class="p"&gt;)]),&lt;/span&gt; &lt;span class="n"&gt;delimiter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;','&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="c"&gt;# or in an equivalent way, if the file dimensions permit to lad the entire file:&lt;/span&gt;
&lt;span class="c"&gt;# values = np.genfromtxt("filename.csv", dtype=([('column_1', 'i8'), ('column_2', 'f4'), ('column_3', # 'f4')]), delimiter=',')&lt;/span&gt;

&lt;span class="n"&gt;h5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;openFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'filename.h5'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;h5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;createTable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'table_name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"table_description"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expectedrows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;12158536&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;genfromtxt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;([(&lt;/span&gt;&lt;span class="s"&gt;'column_1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'i8'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'column_2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'f4'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'column_3'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'f4'&lt;/span&gt;&lt;span class="p"&gt;)]),&lt;/span&gt; &lt;span class="n"&gt;delimiter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;','&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;h5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;h5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It's also possible to walk all the nodes under a group:    &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;h5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;walkNodes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and to delete a node/array/table:    &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;h5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;removeNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All the nodes are available through their path:    &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;h5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/group"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;h5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to read a table or an array, you can use the function &lt;code&gt;read()&lt;/code&gt;    &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;h5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/group"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;h5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><category>code</category><category>Python</category><category>HDF5</category><category>storage</category><category>PyTables</category><category>imported</category><guid>brunetto.github.io/posts/hdf5-in-python-pytables.html</guid><pubDate>Fri, 25 May 2012 00:00:00 GMT</pubDate></item><item><title>Essential guide to binning</title><link>brunetto.github.io/posts/essential-guide-to-binning.html</link><description>&lt;div&gt;&lt;p&gt;Often I found myself fighting against data binning, trying to understand the relation between linear and logarithmic bins and how to create the bin starting from the bins number or the bins spacing.  &lt;br&gt;
It's time to write down some consideration and snippet!    &lt;/p&gt;
&lt;p&gt;&lt;a href="/posts/essential-guide-to-binning.html"&gt;Read more...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>binning</category><category>PhD</category><category>Python</category><category>histogram</category><category>imported</category><guid>brunetto.github.io/posts/essential-guide-to-binning.html</guid><pubDate>Fri, 25 May 2012 00:00:00 GMT</pubDate></item><item><title>Create, recreate and remove duplicates in array manipulation, obviously in Python!:)</title><link>brunetto.github.io/posts/create-recreate-and-remove-duplicates-in-array-manipulation-obviously-in-python.html</link><description>&lt;div&gt;&lt;p&gt;I would like to "pin" here a pair of quick solution to everyday problems I encounter manipulating arrays.    &lt;/p&gt;
&lt;p&gt;&lt;a href="/posts/create-recreate-and-remove-duplicates-in-array-manipulation-obviously-in-python.html"&gt;Read more...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>array</category><category>code</category><category>PhD</category><category>pytables</category><category>Python</category><category>imported</category><guid>brunetto.github.io/posts/create-recreate-and-remove-duplicates-in-array-manipulation-obviously-in-python.html</guid><pubDate>Mon, 14 May 2012 00:00:00 GMT</pubDate></item><item><title>Asterisks and Python</title><link>brunetto.github.io/posts/asterisks-and-python.html</link><description>&lt;div&gt;&lt;p&gt;There are many possible uses of the "*" in Python, to be not confused, this is a brief summary of them.  &lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="/posts/asterisks-and-python.html"&gt;Read more...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>asterisk</category><category>Computer</category><category>function</category><category>PhD</category><category>Python</category><category>imported</category><guid>brunetto.github.io/posts/asterisks-and-python.html</guid><pubDate>Mon, 07 May 2012 00:00:00 GMT</pubDate></item><item><title>Parameter space parallel exploration in Python</title><link>brunetto.github.io/posts/parameter-space-parallel-exploration-in-python.html</link><description>&lt;div&gt;&lt;p&gt;Today a friend of mine ask me how to quickly and easily parallelize a parameter space exploration in his code. "Quickly and easily" means "do not try to use &lt;a href="http://www.brunettoziosi.eu/blog/wordpress/phd-question-3-monte-carlo-markov-chain/" target="_blank" title="PhD question #3: Monte Carlo Markov chain"&gt;MCMC&lt;/a&gt; or something similar!!!".     &lt;/p&gt;
&lt;p&gt;&lt;a href="/posts/parameter-space-parallel-exploration-in-python.html"&gt;Read more...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>astro/physics</category><category>parallel</category><category>parameter</category><category>PhD</category><category>Python</category><category>imported</category><guid>brunetto.github.io/posts/parameter-space-parallel-exploration-in-python.html</guid><pubDate>Thu, 03 May 2012 00:00:00 GMT</pubDate></item><item><title>The "initial condition" saga</title><link>brunetto.github.io/posts/the-initial-condition-saga.html</link><description>&lt;div&gt;&lt;p&gt;If reading the previous posts on N-body simulations you have though that initial conditions are a little and easy task, you were wrong! And me with you!  &lt;br&gt;
The first things I have understood banging against them were:    &lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;Gadget requires initial conditions (ICs) generate by (for example) N-GenIC&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;N-GenIC requires an initial power spectrum from CMBFast that is no longer used&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CMBeasy should substitute CMBFast but it doesn't, it only works for CMB anisotropies&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CAMB should substitute CMBFast&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the &lt;a href="http://lambda.gsfc.nasa.gov/toolbox/tb_camb_form.cfm" target="_blank" title="CAMB online interface"&gt;CAMB interface&lt;/a&gt; is terrible and not very documentated&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;a href="/posts/the-initial-condition-saga.html"&gt;Read more...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>astro/physics</category><category>CAMB</category><category>Cosmology</category><category>gadget</category><category>ICs</category><category>initial conditions</category><category>N-GenIC</category><category>PhD</category><category>power spectrum</category><category>Python</category><category>spectrum</category><category>imported</category><guid>brunetto.github.io/posts/the-initial-condition-saga.html</guid><pubDate>Tue, 31 Jan 2012 00:00:00 GMT</pubDate></item><item><title>GIF2 files Python reader</title><link>brunetto.github.io/posts/gif2-files-python-reader.html</link><description>&lt;div&gt;&lt;p&gt;I create this script on the basis of the code to read the Millennium II data (the same used &lt;a href="http://elbrunz.wordpress.com/2011/12/02/from-binaries-to-hdf5-using-python/" title="From binaries to HDF5 using Python"&gt;here&lt;/a&gt;) provided by &lt;a href="http://mbk.ps.uci.edu/index.html" title="Mike Boylan-Kolchin"&gt;Mike Boylan-Kolchin&lt;/a&gt;. Being allowed to read the Fortran code to write and read the GIF2 files I could adapt this script to exactly fit this problem.    &lt;/p&gt;
&lt;p&gt;&lt;a href="/posts/gif2-files-python-reader.html"&gt;Read more...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>astro/physics</category><category>Cosmology</category><category>Master Thesis</category><category>millennium</category><category>N-body</category><category>Python</category><category>simulation</category><category>imported</category><guid>brunetto.github.io/posts/gif2-files-python-reader.html</guid><pubDate>Tue, 06 Dec 2011 00:00:00 GMT</pubDate></item><item><title>Cosmological simulations #7: Limitations and some considerations</title><link>brunetto.github.io/posts/cosmological-simulations-7-limitations-and-some-considerations.html</link><description>&lt;div&gt;&lt;p&gt;&lt;strong&gt;Limitations&lt;/strong&gt;    &lt;/p&gt;
&lt;p&gt;In the previous posts we encountered some of the limitations of cosmological  &lt;br&gt;
simulations. Let's review these in detail.  &lt;br&gt;
First, we can consider a simulation composed of a finite box in a bigger space but to represent a real system, this box shouldn't be isolated so we use the periodic boundary conditions (&lt;a href="http://brunettoziosi.blogspot.it/2011/11/cosmological-simulations-2-how.html" target="_blank" title="Cosmological simulations #2: how?"&gt;here&lt;/a&gt;). This means that all the space around the box is filled with images of the box itself: a particle that leaves the box from one side will come in  &lt;br&gt;
from the opposite side.   &lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="/posts/cosmological-simulations-7-limitations-and-some-considerations.html"&gt;Read more...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>astro/physics</category><category>Cosmology</category><category>Master Thesis</category><category>millennium</category><category>N-body</category><category>Python</category><category>simulation</category><category>imported</category><guid>brunetto.github.io/posts/cosmological-simulations-7-limitations-and-some-considerations.html</guid><pubDate>Sun, 04 Dec 2011 00:00:00 GMT</pubDate></item></channel></rss>